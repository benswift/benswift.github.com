<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="https://benswift.me/feed.xml" rel="self" type="application/atom+xml" /><link href="https://benswift.me/" rel="alternate" type="text/html" /><updated>2019-02-06T18:02:06+08:00</updated><id>https://benswift.me/feed.xml</id><title type="html">benswift.me</title><subtitle>livecoder &amp; researcher homepage - code, creativity, culture</subtitle><author><name>Ben Swift</name></author><entry><title type="html">Class discussions on discourse</title><link href="https://benswift.me/blog/2019/02/06/class-discussions-on-discourse/" rel="alternate" type="text/html" title="Class discussions on discourse" /><published>2019-02-06T16:42:03+08:00</published><updated>2019-02-06T16:42:03+08:00</updated><id>https://benswift.me/blog/2019/02/06/class-discussions-on-discourse</id><content type="html" xml:base="https://benswift.me/blog/2019/02/06/class-discussions-on-discourse/">&lt;p&gt;In 2018 I (with the support of the Teaching &amp;amp; Learning IT team in &lt;a href=&quot;https://cs.anu.edu.au&quot;&gt;my
School&lt;/a&gt;) switched from &lt;a href=&quot;https://piazza.com&quot;&gt;Piazza&lt;/a&gt; to a
self-hosted &lt;a href=&quot;https://www.discourse.org&quot;&gt;Discourse&lt;/a&gt; instance for class
discussions. Specifically, I used it for &lt;a href=&quot;https://cs.anu.edu.au/courses/comp1720/&quot;&gt;COMP1720: Art &amp;amp; Interaction in New
Media&lt;/a&gt;, a large-ish (~200 students)
introductory code/art programming and interaction design course. This course is
open to both CS and non-CS students, and can be counted towards a major in both
the CS and the ANU School of Art and Design.&lt;sup id=&quot;fnref:artgit&quot;&gt;&lt;a href=&quot;#fn:artgit&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;This wasn’t because Piazza sucks—it’s actually pretty great in lots of ways.
But there were a few things we hoped to that Discourse would do better:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;integration with the rest of our class management infrastructure (so that the
professor doesn’t have to keep adding/students manually as enrolment grows
and then settles down at the start of semester)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;a &lt;a href=&quot;https://docs.discourse.org&quot;&gt;proper API&lt;/a&gt;, rather than using one of the &lt;a href=&quot;https://github.com/hfaran/piazza-api&quot;&gt;unofficial
Piazza API clients&lt;/a&gt; and hoping that
Piazza didn’t break things just before an assigment/exam&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;proper markdown support (with the ability to add whichever programming
languages we like through &lt;a href=&quot;https://highlightjs.org&quot;&gt;highlight.js&lt;/a&gt;
integration) rather than whatever they call the nonsense pseudo-markdown and
flaky rich text editor that Piazza offers&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;self-hosting and controlling where the data is stored, because I don’t think
I ever figured out whether it was technically ok to store student data on a
foreign server and compel students to create an account on same&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;a &lt;a href=&quot;https://www.discourse.org/plugins&quot;&gt;plugin ecosystem&lt;/a&gt; so that we could
tweak it to suit our specific needs (and potentially develop our own plugins)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Still, there are a couple of things that Discourse is missing out-of-the-box
compared to Piazza:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;the ability for instructors (professors &amp;amp; tutors) to mark a question/answer
as a &lt;em&gt;good question/answer&lt;/em&gt; (really handy in teaching)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;the ability for students to “post anonymously to other students” while still
being visible (identifiable) to the instructors&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;ability for students to “accept” an answer,
&lt;a href=&quot;https://stackoverflow.com&quot;&gt;SO&lt;/a&gt;-style (there’s a &lt;a href=&quot;https://github.com/discourse/discourse-solved&quot;&gt;plugin for
this&lt;/a&gt;, but we didn’t use it
first time around)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;so-howd-it-go&quot;&gt;So how’d it go?&lt;/h2&gt;

&lt;p&gt;Pretty well—student engagement was higher than the previous year (with Piazza)
and anecdotal feedback was that the students liked it. The limitations described
above didn’t bite &lt;em&gt;too&lt;/em&gt; hard, although I do think that the “post anonymously to
students” thing in particular does encourage students to speak up when they’re
struggling in a way that they don’t when their name is attached to everything.&lt;/p&gt;

&lt;p&gt;Along the way, we also made some decisions about how to organise/administer a
Discourse server for use as a course forum. Since Discourse isn’t specifically
designed for this task, we had to make a few choices, and it’s worth laying them
out here in case anyone else is going down the same path. Note, you’ll need to
get your head around the Discourse nomenclature if you’re going to use it, but
the crash course is&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;threads are called &lt;strong&gt;topics&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;topics are grouped into &lt;strong&gt;categories&lt;/strong&gt; and &lt;strong&gt;subcategories&lt;/strong&gt; (but only 2
levels max—no &lt;strong&gt;subsubcategories&lt;/strong&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;groups&lt;/strong&gt; are groups of users&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, the way we organised it was:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;each course is a &lt;strong&gt;category&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;subcategories&lt;/strong&gt; were devoted to e.g. lectures, labs, assignments, etc.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;access control&lt;/em&gt;: all students were enrolled into a &lt;strong&gt;group&lt;/strong&gt;, which was given
read/write access to the &lt;strong&gt;category&lt;/strong&gt; with the same name&lt;sup id=&quot;fnref:samename&quot;&gt;&lt;a href=&quot;#fn:samename&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
  &lt;li&gt;tutors (TAs) were given&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here’s an example: for COMP1720 we set up&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;a top-level &lt;em&gt;comp1720&lt;/em&gt; category&lt;/li&gt;
  &lt;li&gt;a &lt;em&gt;comp1720&lt;/em&gt; group (in which all students in the course were automatically
enrolled using the Discourse API)&lt;/li&gt;
  &lt;li&gt;all tutors are members of a &lt;em&gt;comp1720-tutors&lt;/em&gt; group, which has a higher
privilege level&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This way, if a student is enrolled in multiple courses, they’ll appear in
multiple groups. They’ll have access to all the topics in the categories for
their courses, but not any topics from other course (of course).&lt;/p&gt;

&lt;p&gt;One final bonus is that the default “homepage” for a logged in user shows the
latest posts across all the user’s categories (although users can customise this
behaviour).&lt;/p&gt;

&lt;h2 id=&quot;next-steps&quot;&gt;Next steps&lt;/h2&gt;

&lt;p&gt;I’ve got a student who’s working hard to develop a new plugin to restore the
“anon to students, visible to instructors” behaviour, since that’s a
deal-breaker for a lot of folks (it nearly was for me as well). We’ll release
that plugin when it’s done and the kinks are worked out.&lt;/p&gt;

&lt;p&gt;There are still things to figure out as well, but things are looking good. I
wouldn’t go back; I think it’s easier to add the things I miss from Piazza to
Discourse than the other way around.&lt;/p&gt;

&lt;p&gt;If you’ve got experience with this sort of thing and have suggestions or
comments, then get in touch (&lt;a href=&quot;https://twitter.com/benswift&quot;&gt;@benswift&lt;/a&gt; or
&lt;a href=&quot;mailto:ben.swift@anu.edu.au&quot;&gt;ben.swift@anu.edu.au&lt;/a&gt;)&lt;/p&gt;
&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:artgit&quot;&gt;

      &lt;p&gt;I also teach all the artists &amp;amp; designers to use git—and it works really
well… with the appropriate scaffolding. Knowing how to use version control
really does feel like having superpowers. &lt;a href=&quot;#fnref:artgit&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:samename&quot;&gt;

      &lt;p&gt;in principle the course category (list of topics) and group (list of
members) could in principle have different names &lt;a href=&quot;#fnref:samename&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Ben Swift</name></author><category term="teaching" /><category term="web" /><summary type="html">In 2018 I (with the support of the Teaching &amp;amp; Learning IT team in my School) switched from Piazza to a self-hosted Discourse instance for class discussions. Specifically, I used it for COMP1720: Art &amp;amp; Interaction in New Media, a large-ish (~200 students) introductory code/art programming and interaction design course. This course is open to both CS and non-CS students, and can be counted towards a major in both the CS and the ANU School of Art and Design.[^artgit]</summary></entry><entry><title type="html">On livecoding annotations and visualisations</title><link href="https://benswift.me/blog/2019/01/31/on-livecoding-annotations-and-visualisations/" rel="alternate" type="text/html" title="On livecoding annotations and visualisations" /><published>2019-01-31T06:53:00+08:00</published><updated>2019-01-31T06:53:00+08:00</updated><id>https://benswift.me/blog/2019/01/31/on-livecoding-annotations-and-visualisations</id><content type="html" xml:base="https://benswift.me/blog/2019/01/31/on-livecoding-annotations-and-visualisations/">&lt;p&gt;I’ve just finished reading Charlie Roberts’ &lt;a href=&quot;https://charlieroberts.github.io/annotationsAndVisualizations/&quot;&gt;interactive web essay on
annotations and visualisations for live
code&lt;/a&gt;. If you
haven’t read it, go do that now—and make sure you have some
speakers/headphones to listen to the code examples, because it would be a real
shame to read it without watching/listening to his ideas in action. All the code
samples (with the visual annotations) are live-editable, both running “whole
blocks” and re-evaluating individual expressions with &lt;code&gt;ctrl+enter&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The essay lays out some guiding principles:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;There are three principles that guide the design of the presented annotations
and visualizations.&lt;/p&gt;

  &lt;ol&gt;
    &lt;li&gt;If a value changes over time (typically related to musical progression or
signal processing), display its current state, either by adding a
visualization / annotation or by modifying the source code to reflect the
current value.&lt;/li&gt;
    &lt;li&gt;Make annotations and visualizations as proximal as possible to the code
fragment responsible for generating the data they are representing.&lt;/li&gt;
    &lt;li&gt;In addition to displaying when values change, whenever possible also provide
some indication of when a value is being read, in particular when there is a
direct affect on musical / sonic output.&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;It then goes on to show some example visualisation in
&lt;a href=&quot;http://gibberwocky.cc/&quot;&gt;gibberwocky&lt;/a&gt;, both in an “all in” demo and then in
bite-sized listings which show off the different specific ideas. In general, I
really like the ideas, and it’s something Andrew Sorensen and I have written
about before in our paper &lt;a href=&quot;https://doi.org/10.1109/LIVE.2013.6617345&quot;&gt;Visual Code Annotations for Cyberphysical
Programming&lt;/a&gt; (2013) in the &lt;em&gt;1st
International Workshop on Live Programming (LIVE)&lt;/em&gt;&lt;sup id=&quot;fnref:preprint&quot;&gt;&lt;a href=&quot;#fn:preprint&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; (it’s reference
#4 in the essay). I’ll refer to this a bit in this post, so let’s call it “the
LIVE paper”.&lt;/p&gt;

&lt;p&gt;I also think that the three points listed above are pretty solid, especially in
a multimedia livecoding context (maybe even in a broader context). One thing I
like about the visual annotations provided is that they’re mostly ASCII (or
ASCII-ish). This is not so important when deploying them in the web browser
(since you can do so much fancy styling stuff with CSS &amp;amp; js these days) but it’s
really important when dealing with… &lt;em&gt;ahem&lt;/em&gt;, more venerable editors. I ended up
having to use some unholy Emacs hacks with
&lt;a href=&quot;https://www.gnu.org/software/emacs/manual/html_node/elisp/Overlays.html&quot;&gt;overlays&lt;/a&gt;
to get the original annotations discussed in the LIVE paper working.&lt;/p&gt;

&lt;p&gt;I think that displaying hidden state in comments is a good compromise, and
avoids the need for fancy “extra-textual” overlays. Not that overlays aren’t
sometimes useful, but there’s a lot you can show with inline &lt;code&gt;text-decoration&lt;/code&gt;
hacks and adding a few comments to provide ascii text to decorate (when it isn’t
explicitly represented in the first place).&lt;/p&gt;

&lt;h2 id=&quot;mixing-annotations-and-live-edits&quot;&gt;Mixing annotations and live edits&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;But&lt;/strong&gt;, (you can probably tell that there was going to be a “but” somewhere)
many of the cool annotations displayed don’t work while the code is being
edited&lt;sup id=&quot;fnref:broken&quot;&gt;&lt;a href=&quot;#fn:broken&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;. In some cases they actually break the code (try editing one of
the &lt;code&gt;'x*ox*xo--x*x*o'&lt;/code&gt; patterns while the code’s running—you’ll end up with
new stuff in your pattern that you didn’t put there).&lt;/p&gt;

&lt;p&gt;The problem isn’t so obvious when all the code listings are fully-formed on page
load, and you can just play them as is. But when you try and mess with the code
then you’ll see what I mean (again, I really suggest that you try it—it’s
super-cool being able to mess around with the live code in the browser).&lt;/p&gt;

&lt;p&gt;I feel this particularly keenly because I’m a clean-slate livecoder (as is
Charlie), so I’m &lt;em&gt;always&lt;/em&gt; moving through an incomplete code state until I get
something which will even run. This isn’t just a problem for clean-slate
livecoding, though—even tweaks to existing code which introduce “bad” code
states (from the visualisation’s perspective) will cause these issues.&lt;/p&gt;

&lt;p&gt;We talked about this in the LIVE paper—the fact that there’s a distinction
between the “state of the world” vs “state of the code”. This is a fundamental
challenge for the sorts of inline code visualisation/annotations shown in the
essay, because it’s using the &lt;strong&gt;code&lt;/strong&gt; as the “raw material” for displaying
information about the &lt;strong&gt;world&lt;/strong&gt; (beat/timing and other “hidden variables”, audio
engine state and output, etc.).&lt;/p&gt;

&lt;p&gt;There are a few different ways to tackle this problem:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;mark some annotations as “safe” for code being edited, and some “unsafe”&lt;/li&gt;
  &lt;li&gt;when code is being edited, turn off all annotations (or at least for that
expression)&lt;/li&gt;
  &lt;li&gt;some sort of “grand unified theory” of the delta between the current code
state and the current execution state, and reconcile these to provide a
maximal set of acceptable visualisations (this approach includes a
&lt;a href=&quot;https://coq.inria.fr/&quot;&gt;coq&lt;/a&gt; program to formally verify that you’re doing
everything right)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I think the pragmatic choice is #2, as long as the “disabled edits” section is
kept as small as possible. It’s still going to be a pain, though, because when
I’m livecoding I’m tweaking stuff all the time, so it’s likely that a lot of the
code will spend a lot of the time with the visualisations disabled.&lt;/p&gt;

&lt;p&gt;I’ll leave #3 up to people smarter than me 😁 (although perhaps there are
heuristics which could do a decent job).&lt;/p&gt;

&lt;p&gt;Finally, I can identify with Charlie when he writes:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;But, in the end, the feedback provided by these annotations and visualizations
have become a critical part of my live coding practice.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I get this—in my experience (when I’ve had even more limited annotations than
the ones he shows in the essay) are just as much for my benefit as the audience.
Livecoding is hard, and any extra information you can get about what’s going on
with your code is super helpful.&lt;/p&gt;

&lt;p&gt;In principle visual code annotations can be even more useful to the livecoder
because they allow her to “audition” algorithmic changes to the code
without&lt;sup id=&quot;fnref:feedback&quot;&gt;&lt;a href=&quot;#fn:feedback&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt; actually eval-ing the code and changing the music. Here’s an
example from the essay:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;Euclid(9,16)/* 1010110101011010 */ 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I might not always know what the &lt;code&gt;9,6&lt;/code&gt; euclidean rhythm is, but I’m by now
fairly used to looking at &lt;code&gt;10100010&lt;/code&gt; sequences and “hearing” the rhythm in my
head. I could poke around with the parameters in a live set, exploring the
parameter space (and thinking through the effect it’ll have on the music) and
then only evaluating the code when I’m satisfied. That’s super powerful—the
equivalent of the DJ cueing the next track with one can on their ear, and one
ear in the club—something which I don’t have currently in my livecoding setup
(although others might).&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;You can probably tell that I think there’s a productive research agenda
here—and I hope Charlie continues with it. I hope to help out myself, too. I
guess my main point is just to shout from the rooftops:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;any code visualisation/annotation techniques must be robust for &lt;strong&gt;code which is
currently being edited&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I’m not just talking about technical issues, either; obviously any
demo/prototype is going to have those, but they’re fixable. I think there are
deeper issues with trying to use &lt;em&gt;live&lt;/em&gt; text as both the description of program
behaviour and as a “view” on the hidden state of the program.&lt;/p&gt;

&lt;p&gt;Anyway, this is just a blog post, so I’m off the hook with regard to rigour,
accountability and just general good scholarship, right 😜&lt;/p&gt;

&lt;h2 id=&quot;addendum-thoughts-on-web-publishing&quot;&gt;Addendum: thoughts on web publishing&lt;/h2&gt;

&lt;p&gt;I love that this essay/paper is published online—the interactive examples are
crucial to getting the point across. I know that some conferences &amp;amp; journals
these days allow html submission (nicer for reading on mobile, anyway) and other
multimedia artefacts (audio/video recordings) but it’s still hard to get
traction for this sort of rich, interactive in-browser work. The fact that at
the end Charlie has to say:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If you’re going to cite this website in an academic paper, please consider
also citing either reference #1 or reference #7 given above; citations of such
papers count more in academia than citations of a website. Plus, there’s
further information in them not covered in this essay. Thank you!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Oh well. Mad props to Charlie for putting this out there for comment and
discussion, and hopefully there are a new generation of publications&lt;sup id=&quot;fnref:distill&quot;&gt;&lt;a href=&quot;#fn:distill&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;
where this stuff can be front-and-centre, not just a weird “supplemental web
materials” section to a traditional pdf.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:preprint&quot;&gt;

      &lt;p&gt;if you don’t have institutional access to the IEEE then just &lt;a href=&quot;mailto:ben.swift@anu.edu.au&quot;&gt;email
me&lt;/a&gt; and I can send you a pre-print. &lt;a href=&quot;#fnref:preprint&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:broken&quot;&gt;
      &lt;p&gt;Charlie, if I’m doing it wrong, please let me know :) &lt;a href=&quot;#fnref:broken&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:feedback&quot;&gt;

      &lt;p&gt;Yes, I know that the real-time feedback of hearing the sound is crucial, and
I’m not for a second saying that we do away with it, but there are some
situations where I want to check what the result of an algorithmic/parameter
change might be without inflicting it on the audience. &lt;a href=&quot;#fnref:feedback&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:distill&quot;&gt;

      &lt;p&gt;&lt;a href=&quot;https://distill.pub/&quot;&gt;Distill&lt;/a&gt; is great, but it’s pretty DL/AI-focussed.
The livecoding community needs something similar (although it does
privilege livecoding environments which work in the brower, so that’s not
ideal either. Hmm.) &lt;a href=&quot;#fnref:distill&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Ben Swift</name></author><category term="livecoding" /><summary type="html">I’ve just finished reading Charlie Roberts’ interactive web essay on annotations and visualisations for live code. If you haven’t read it, go do that now—and make sure you have some speakers/headphones to listen to the code examples, because it would be a real shame to read it without watching/listening to his ideas in action. All the code samples (with the visual annotations) are live-editable, both running “whole blocks” and re-evaluating individual expressions with ctrl+enter.</summary></entry><entry><title type="html">Oils from 威海</title><link href="https://benswift.me/blog/2019/01/29/oils-from-weihai/" rel="alternate" type="text/html" title="Oils from 威海" /><published>2019-01-29T09:24:00+08:00</published><updated>2019-01-29T09:24:00+08:00</updated><id>https://benswift.me/blog/2019/01/29/oils-from-weihai</id><content type="html" xml:base="https://benswift.me/blog/2019/01/29/oils-from-weihai/">&lt;p&gt;One of my academic responsibilities is teaching our ANU Computer Science
programs into our various partner institutions overseas. One of these partner
institutions is &lt;a href=&quot;https://en.wh.sdu.edu.cn/enDefault.html&quot;&gt;Shandong University
WeiHai&lt;/a&gt; (SDUW).&lt;/p&gt;

&lt;p&gt;On my trip to SDUW in May 2016, I was walking across the campus one bright
spring morning when I was stopped by a professor from the SDUW School of Art.
Through his limited English and my much more limited Mandarin, he told me that
he wanted me to sit for a portrait session for his first-year painting class.&lt;/p&gt;

&lt;p&gt;After a marathon 4hr sitting&lt;sup id=&quot;fnref:tired&quot;&gt;&lt;a href=&quot;#fn:tired&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;, here’s what the students came up with. As
a bonus, I got to choose my favourite one and bring it home—can you guess
which one I chose?&lt;/p&gt;

&lt;picture&gt;&lt;img alt=&quot;loop of the finished oil paintings&quot; src=&quot;/assets/images/posts/ben-oils-2779bf43241a5e7aa0720d0e7c1f317c057eeeb707014cfdc09c88362aa31e67.gif&quot; /&gt;&lt;/picture&gt;

&lt;p&gt;It’s now hanging on my wall at home, creepily looking down at my family and our
guests. &lt;strong&gt;I love it&lt;/strong&gt;.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:tired&quot;&gt;

      &lt;p&gt;that’s why I look so sullen—I smiled no-stop for the first hour (when they
were painting the background) but by the time they were putting on the
facial details 3hrs in I was &lt;em&gt;way&lt;/em&gt; too tired to keep my smile up 😊 &lt;a href=&quot;#fnref:tired&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Ben Swift</name></author><category term="teaching" /><summary type="html">One of my academic responsibilities is teaching our ANU Computer Science programs into our various partner institutions overseas. One of these partner institutions is Shandong University WeiHai (SDUW).</summary></entry><entry><title type="html">Old livecoding photo roundup</title><link href="https://benswift.me/blog/2019/01/22/old-livecoding-photo-roundup/" rel="alternate" type="text/html" title="Old livecoding photo roundup" /><published>2019-01-22T10:12:00+08:00</published><updated>2019-01-22T10:12:00+08:00</updated><id>https://benswift.me/blog/2019/01/22/old-livecoding-photo-roundup</id><content type="html" xml:base="https://benswift.me/blog/2019/01/22/old-livecoding-photo-roundup/">&lt;p&gt;I’m trying to find all the photos of me doing livecoding gigs over the past 10
years. If you’ve got an old photo of me doing my thing, then can you either
&lt;a href=&quot;mailto:ben.swift@anu.edu.au&quot;&gt;email&lt;/a&gt; or &lt;a href=&quot;https://twitter.com/benswift&quot;&gt;tweet&lt;/a&gt; at
me to share it? I’ll give you authoreal credit and hugs.&lt;/p&gt;

&lt;p&gt;For any photos of actual gigs, they’ll go into the
&lt;a href=&quot;/livecoding/index.html&quot;&gt;livecoding&lt;/a&gt; section of this website.
However, I also do lots of other presentations, talks and demos which don’t
really count as “gigs”. For those, I’ll just add the photos here as they turn
up.&lt;/p&gt;

&lt;h3 id=&quot;australian-council-of-deans-of-ict-2017&quot;&gt;Australian Council of Deans of ICT 2017&lt;/h3&gt;

&lt;picture&gt;&lt;img alt=&quot;Ben livecoding at the Council of Deans' of ICT meeting&quot; src=&quot;/assets/images/livecoding/ben-alta-f65b59efe5c97c2c50367987698a0962cfa684f4252cc34cfbbf6673ade06115.jpg&quot; /&gt;&lt;/picture&gt;

&lt;p&gt;from &lt;a href=&quot;https://twitter.com/FalknerKatrina/status/854861227809361920&quot;&gt;@FalknerKatrina&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;australian-institute-of-physics-congress-2014&quot;&gt;Australian Institute of Physics Congress 2014&lt;/h3&gt;

&lt;picture&gt;&lt;img alt=&quot;Ben livecoding a physics simulation at AIP congress&quot; src=&quot;/assets/images/livecoding/ben-AIP-congress-53c24a4daa26112790b1c8feef98c5ff50f2800f1444dbae9e3cf0511304db0a.jpg&quot; /&gt;&lt;/picture&gt;

&lt;p&gt;from &lt;a href=&quot;https://twitter.com/starstoofondly/status/542177320321024000&quot;&gt;@starstoofondly&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;australasian-computer-music-conference-acmc-2007&quot;&gt;Australasian Computer Music Conference (ACMC) 2007&lt;/h3&gt;

&lt;picture&gt;&lt;img alt=&quot;ACMC attendees hanging out at Kremlin bar&quot; src=&quot;/assets/images/livecoding/ben-acmc-07-kremlin-014fc7330592130a587ae8910ca57d941b4ca3cd74f1e7c6758660156783c556.jpg&quot; /&gt;&lt;/picture&gt;

&lt;p&gt;This isn’t me &lt;em&gt;performing&lt;/em&gt;, unless you count my animated conversation with
Gordon Monro as a performance.&lt;/p&gt;</content><author><name>Ben Swift</name></author><category term="gigs" /><category term="livecoding" /><summary type="html">I’m trying to find all the photos of me doing livecoding gigs over the past 10 years. If you’ve got an old photo of me doing my thing, then can you either email or tweet at me to share it? I’ll give you authoreal credit and hugs.</summary></entry><entry><title type="html">highlight.js with xtlang support</title><link href="https://benswift.me/blog/2019/01/17/highlight-js-with-xtlang-support/" rel="alternate" type="text/html" title="highlight.js with xtlang support" /><published>2019-01-17T07:54:00+08:00</published><updated>2019-01-17T07:54:00+08:00</updated><id>https://benswift.me/blog/2019/01/17/highlight-js-with-xtlang-support</id><content type="html" xml:base="https://benswift.me/blog/2019/01/17/highlight-js-with-xtlang-support/">&lt;blockquote&gt;
  &lt;p&gt;It is a truth, universally acknowledged, that all programming language authors
must also be expert web developers. (&lt;em&gt;attributed to Jane Austen&lt;/em&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I’ve just spent a solid day wrestling with source code syntax highlighting on my
blog, and I’ve finally got it figured out. Tada:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-armasm&quot;&gt;labelious:
  sub r0, 1
  bne doneski
  b labelious

doneski:
  nop
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I know you’ve got questions, so the rest of this post will be structured as an
&lt;strong&gt;FAQ&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;faq&quot;&gt;FAQ&lt;/h2&gt;

&lt;h3 id=&quot;why-did-you-even-do-that-it-seemed-to-be-working-fine-before&quot;&gt;Why did you even do that? It seemed to be working fine before.&lt;/h3&gt;

&lt;p&gt;Yes, well, it was mostly working fine. But I was just using an
off-the-shelf&lt;sup id=&quot;fnref:cdn&quot;&gt;&lt;a href=&quot;#fn:cdn&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; disribution of &lt;a href=&quot;https://highlightjs.org/&quot;&gt;highlight.js&lt;/a&gt;,
which supported a bunch of languages but not all the ones I need. Especially
Extempore, which is super-important for showing off my livecoding stuff on this
blog.&lt;/p&gt;

&lt;h3 id=&quot;does-extemporextlang-have-highlightjs-support-now&quot;&gt;Does Extempore/xtlang have highlight.js support now?&lt;/h3&gt;

&lt;p&gt;Yep, &lt;a href=&quot;https://github.com/cyblue9&quot;&gt;&lt;code&gt;@blue9&lt;/code&gt;&lt;/a&gt; ported the &lt;a href=&quot;https://bitbucket.org/birkenfeld/pygments-main/src/7941677dc77d4f2bf0bbd6140ade85a9454b8b80/pygments/lexers/lisp.py?at=default&amp;amp;fileviewer=file-view-default#lisp.py-2420&quot;&gt;Scheme/xtlang
lexer&lt;/a&gt;
that I wrote for Pygments, which is a &lt;em&gt;big&lt;/em&gt; help to the Extempore community
(thanks &lt;code&gt;blue9&lt;/code&gt;).&lt;/p&gt;

&lt;h3 id=&quot;isnt-it-just-a-matter-of-adding-xtlang-to-the-highlightjs-build-step&quot;&gt;Isn’t it just a matter of adding &lt;code&gt;xtlang&lt;/code&gt; to the highlight.js build step?&lt;/h3&gt;

&lt;p&gt;No, because &lt;a href=&quot;https://github.com/highlightjs/highlightjs-xtlang#usage&quot;&gt;reasons&lt;/a&gt;.
It’s a real mess, and we’re waiting on &lt;a href=&quot;https://github.com/highlightjs/highlight.js/pull/1888&quot;&gt;this
PR&lt;/a&gt; to land before it
gets easier.&lt;/p&gt;

&lt;h3 id=&quot;howd-you-get-it-working-then&quot;&gt;How’d you get it working, then?&lt;/h3&gt;

&lt;p&gt;Hacks upon hacks. If you really wanna know, it’s in &lt;a href=&quot;https://github.com/benswift/benswift.github.io/tree/hljs-with-xtlang&quot;&gt;this
branch&lt;/a&gt;
(although the final product, &lt;code&gt;highlight.pack.js&lt;/code&gt; is in the main &lt;code&gt;source&lt;/code&gt;
branch).&lt;/p&gt;

&lt;p&gt;Basically, I backported the Extempore language support from the new “plugin” way
of doing things (which is better, but doesn’t really work yet) to the old
“built-in” way of doing things, and then generated a new, custom build of
highlight.js which included both xtlang and all the other languages that I need
for my blog.&lt;/p&gt;

&lt;h3 id=&quot;so-can-i-see-some-xtlang-code-then&quot;&gt;So can I see some xtlang code, then?&lt;/h3&gt;

&lt;p&gt;Sure, here’s an example function from
&lt;a href=&quot;https://github.com/digego/extempore/blob/master/examples/core/extempore_lang.xtm&quot;&gt;&lt;code&gt;examples/core/extempore_lang.xtm&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-xtlang&quot;&gt;(bind-func my-test-7
  (lambda ()
    (let ((a:&amp;lt;i64,double&amp;gt;* (alloc)) ; returns pointer to type &amp;lt;i64,double&amp;gt;
          (b 37)
          (c 6.4))
      (tuple-set! a 0 b) ;; set i64 to 64
      (tset! a 1 c) ;; set double to 6.4 - tset! is an alias for tuple-set!
      (printf &quot;tuple:1 %lld::%f\n&quot; (tuple-ref a 0) (tref a 1))
      ;; we can fill a tuple in a single call by using tfill!
      (tfill! a 77 77.7)
      (printf &quot;tuple:2 %lld::%f\n&quot; (tuple-ref a 0) (tuple-ref a 1))
      (tuple-ref a 0)))) ;; return first element which is i64
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;when-will-we-get-this-syntax-colouring-goodness-when-viewing-extempore-code-on-github&quot;&gt;When will we get this syntax colouring goodness when viewing Extempore code on GitHub?&lt;/h3&gt;

&lt;p&gt;GitHub doesn’t use highlight.js, it uses
&lt;a href=&quot;https://github.com/github/linguist&quot;&gt;linguist&lt;/a&gt; for this sort of thing. So
getting it working on GH would involve porting the language definitions to that
project as well.&lt;/p&gt;

&lt;h3 id=&quot;will-it-always-be-this-complicated-to-set-up&quot;&gt;Will it always be this complicated to set up?&lt;/h3&gt;

&lt;p&gt;No, once the &lt;a href=&quot;https://github.com/highlightjs/highlight.js/pull/1888&quot;&gt;aformentioned issue&lt;/a&gt;
is sorted out, it should be much easier to get a “base” package of highlight.js
from the main download website/CDN, and then to add any extras (e.g.
Extempore/xtlang) as needed. But until that happens, shenanigans are required.&lt;/p&gt;

&lt;h3 id=&quot;whats-with-the-jane-austen-quote-above-then&quot;&gt;What’s with the Jane Austen quote above, then?&lt;/h3&gt;

&lt;p&gt;Figuring this all out required a lot of digging around in existing packages,
learning a new &lt;a href=&quot;https://www.npmjs.com/package/gear&quot;&gt;node-based build system&lt;/a&gt; and
a bunch of other things. I’m pretty capable with this sort of thing, so I got
there in the end. But it does make me a bit sad that the job of building a
community around a programming language involves so much stuff that doesn’t use
the language itself, and these days invariably involves poking around various
npm packages and staring at the Chrome developer tools.&lt;/p&gt;

&lt;h3 id=&quot;can-i-use-your-build-of-highlightjs-to-font-lock-xtlang-code-on-my-own-site&quot;&gt;Can I use your build of highlight.js to font-lock xtlang code on my own site?&lt;/h3&gt;

&lt;p&gt;Sure, I’d be pumped if you did. If you want, you can check out the
&lt;a href=&quot;https://github.com/benswift/benswift.github.io/tree/hljs-with-xtlang&quot;&gt;&lt;code&gt;hljs-with-xtlang&lt;/code&gt;
branch&lt;/a&gt; of
this repo and follow the instructions therein to make your own custom build. Or,
if you don’t want to do that, you could just use the one you’ve already
downloaded (since you’re visiting this website). Here’s a &lt;a href=&quot;/assets/js/highlight.pack.js&quot;&gt;direct
link&lt;/a&gt; if you want to do
things that way.&lt;/p&gt;
&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:cdn&quot;&gt;
      &lt;p&gt;well, off-the-CDN, anyway &lt;a href=&quot;#fnref:cdn&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Ben Swift</name></author><category term="web" /><summary type="html">It is a truth, universally acknowledged, that all programming language authors must also be expert web developers. (attributed to Jane Austen)</summary></entry><entry><title type="html">The annual benswift.me re-write: 2019 edition</title><link href="https://benswift.me/blog/2019/01/02/the-annual-benswift-me-re-write-2019-edition/" rel="alternate" type="text/html" title="The annual benswift.me re-write: 2019 edition" /><published>2019-01-02T17:46:00+08:00</published><updated>2019-01-02T17:46:00+08:00</updated><id>https://benswift.me/blog/2019/01/02/the-annual-benswift-me-re-write-2019-edition</id><content type="html" xml:base="https://benswift.me/blog/2019/01/02/the-annual-benswift-me-re-write-2019-edition/">&lt;p&gt;Welcome, traveller. You’ve managed to find my blog without being &lt;a href=&quot;http://zork.wikia.com/wiki/Grue&quot;&gt;eaten by a
grue&lt;/a&gt;. If you haven’t visited for a while, you
might have noticed that I’ve re-written my website. &lt;a href=&quot;/blog/2017/07/06/benswift-me-update-july-2017-edition/&quot;&gt;Again&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There are a few reasons:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;it forces me to keep up to date with web stuff, which I &lt;a href=&quot;https://cs.anu.edu.au/courses/comp1720/&quot;&gt;teach for a
living&lt;/a&gt; (students can sniff out a
fraud)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;my academic activities don’t fit the traditional “list of journal
publications” shape that my university-provided web presence is geared
towards&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;if I move to a different institution, I don’t have the difficult job of
exfiltrating my content from my old institution’s platform&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;building things is fun (I’m good at this stuff, and it feels good to use the
skills you’ve spent years developing)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;part of being an academic is brand-management, and that’s much easier to do
if you completely control (at least one of) the platforms you’re putting your
message out on&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I’m a control-freak, and the idea of &lt;em&gt;not&lt;/em&gt; being in control bums me out (this
is the pernicious flip side of #5)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Some of these are good reasons, some not-so-good. For a fun party game, &lt;a href=&quot;https://twitter.com/benswift&quot;&gt;argue
with me on twitter&lt;/a&gt; about which is which 😉&lt;/p&gt;

&lt;h2 id=&quot;the-nitty-gritty-technical-stuff&quot;&gt;The nitty-gritty technical stuff&lt;/h2&gt;

&lt;p&gt;I’ve (once again) gone with a &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;-powered static
site. This time, though, I’ve opted for my own lovingly hand-crafted HTML &amp;amp; CSS
rather than one of the out-of-the-box themes. In doing this, I decided on a few
design priorities:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;em&gt;modern&lt;/em&gt; markup: CSS grid &amp;amp; flexbox &lt;strong&gt;all the way&lt;/strong&gt; (sorry if you’re on an old
version of IE)&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;minimal&lt;/em&gt; markup: there’s really not many elements in each page (I wanted to
see how far I could push back against the &lt;code&gt;div&lt;/code&gt; soup that’s so common these
days)&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;semantic&lt;/em&gt; markup: we have &lt;code&gt;nav&lt;/code&gt; and &lt;code&gt;article&lt;/code&gt; and &lt;code&gt;main&lt;/code&gt; and &lt;code&gt;aside&lt;/code&gt;, so
let’s use them&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Typography-wise, I used &lt;a href=&quot;https://twitter.com/rsms&quot;&gt;@rsms&lt;/a&gt;’s new &lt;a href=&quot;https://rsms.me/inter/&quot;&gt;Inter
UI&lt;/a&gt; font family, and I really like it. I’m not a
designer (as you can probably tell) so I kept it simple—one typeface, one
highlight colour, and then I poke around with
&lt;a href=&quot;https://www.sass-lang.com&quot;&gt;Sass’s&lt;/a&gt; colour manipulation functions to get a &lt;em&gt;bit&lt;/em&gt;
more variation.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The verdict&lt;/strong&gt;: I was really pleasantly surprised—it came together in about a
day of hard work. Next time around (i.e. now that I know what I’m doing a bit
more) it’d be even easier. I particularly liked using &lt;a href=&quot;https://css-tricks.com/snippets/css/complete-guide-grid/#prop-grid-template-areas&quot;&gt;grid template
areas&lt;/a&gt;
to draw a little ascii-art diagram of my desired layout. Obviously the layout
for this blog is really boring, but I can imagine this being really handy for
more complex layouts.&lt;/p&gt;

&lt;p&gt;If it’s broken for you and you’re on a modern browser&lt;sup id=&quot;fnref:ie-shade&quot;&gt;&lt;a href=&quot;#fn:ie-shade&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;, then please
&lt;a href=&quot;mailto:ben.swift@anu.edu.au&quot;&gt;let me know&lt;/a&gt; and I’ll try to fix it if I can. I
don’t think I’ve broken any (many) links, but again let me know if you find
something I’ve missed.&lt;/p&gt;

&lt;p&gt;The other thing I really like about this iteration of the annual &lt;code&gt;benswift.me&lt;/code&gt;
redesign is that I finally understand the whole thing. No more magic themes
which I hesitantly poke around in “eye-of-newt” style whenever I want to make
changes, and that’s a nice feeling&lt;sup id=&quot;fnref:control-freak&quot;&gt;&lt;a href=&quot;#fn:control-freak&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;Let me know what you think of my new redesign in the comments. Just
kidding—there are no comments. But do get in touch in some other way (see the
icons at the top for various options).&lt;/p&gt;
&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:ie-shade&quot;&gt;
      &lt;p&gt;that’s my subtle way of throwing shade at IE &lt;a href=&quot;#fnref:ie-shade&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:control-freak&quot;&gt;
      &lt;p&gt;especially if you’re a control freak &lt;a href=&quot;#fnref:control-freak&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Ben Swift</name></author><category term="meta" /><category term="web" /><summary type="html">Welcome, traveller. You’ve managed to find my blog without being eaten by a grue. If you haven’t visited for a while, you might have noticed that I’ve re-written my website. Again.</summary></entry><entry><title type="html">Another reveal.js plugin for Jekyll</title><link href="https://benswift.me/blog/2018/09/28/another-reveal.js-plugin-for-jekyll/" rel="alternate" type="text/html" title="Another reveal.js plugin for Jekyll" /><published>2018-09-28T11:42:26+08:00</published><updated>2018-09-28T11:42:26+08:00</updated><id>https://benswift.me/blog/2018/09/28/another-reveal.js-plugin-for-jekyll</id><content type="html" xml:base="https://benswift.me/blog/2018/09/28/another-reveal.js-plugin-for-jekyll/">&lt;p&gt;I use &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; to create my course websites and
&lt;a href=&quot;https://github.com/hakimel/reveal.js/&quot;&gt;reveal.js&lt;/a&gt; to create my lecture slides.
Both of them are awesome, and allow me to focus on writing (hopefully) great
content, and the formatting/presentation stuff stays out of the way until I &lt;code&gt;git
push&lt;/code&gt; the updates to the server.&lt;/p&gt;

&lt;p&gt;There are a few ways of making these two tools (Jekyll and reveal.js) play
nicely together: see &lt;a href=&quot;https://github.com/dploeger/jekyll-revealjs&quot;&gt;here&lt;/a&gt; and
&lt;a href=&quot;https://medium.com/aerobatic-blog/building-a-reveal-js-presentation-with-jekyll-collections-52bcdba4114a&quot;&gt;here&lt;/a&gt;
for example. However, most of these require you to put each slide in a new &lt;code&gt;.md&lt;/code&gt;
file, which is a pain.&lt;/p&gt;

&lt;p&gt;What I want to do is to write one &lt;code&gt;.md&lt;/code&gt; file per presentation, and have the
level 1 and level 2 headings (i.e. &lt;code&gt;#&lt;/code&gt; and &lt;code&gt;##&lt;/code&gt;) determine the slide splits
(this is pretty much how &lt;a href=&quot;https://pandoc.org/MANUAL.html#producing-slide-shows-with-pandoc&quot;&gt;pandoc does
it&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;I wrote a simple &lt;a href=&quot;https://jekyllrb.com/docs/plugins/&quot;&gt;Jekyll plugin&lt;/a&gt; to make
this happen—which has just a couple of moving parts&lt;/p&gt;

&lt;p class=&quot;hl-para&quot;&gt;Because the source for this &lt;a href=&quot;https://github.com/benswift/benswift.github.io/&quot;&gt;whole blog is on
GH&lt;/a&gt;, then you can just head
there and see it for yourself if you’re the sort of person who prefers reading
code to prose. Think of this blog post as a “companion piece”.&lt;/p&gt;

&lt;h2 id=&quot;0-download-the-revealjs-source&quot;&gt;0. download the reveal.js source&lt;/h2&gt;

&lt;p&gt;It’s step 0 because it’s super easy—just head to
&lt;a href=&quot;https://github.com/hakimel/reveal.js/releases&quot;&gt;GitHub&lt;/a&gt;, download &amp;amp; unzip the
latest release. You can put it wherever you like in your main site folder; I
usually put it in &lt;code&gt;assets/&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;the-revealify-filter&quot;&gt;1. the revealify &lt;a href=&quot;https://jekyllrb.com/docs/plugins/filters/&quot;&gt;filter&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;First, put this code into a &lt;code&gt;revealify.rb&lt;/code&gt; file in your Jekyll &lt;code&gt;_plugins&lt;/code&gt;
directory:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;# (c) Ben Swift 2017-2019, MIT Licence
# ben.swift@anu.edu.au

# a liquid filter for turning regular md output into the &amp;lt;section&amp;gt;-enclosed
# chunks required by reveal.js

require 'jekyll'
require 'nokogiri'

module Jekyll

  module Revealify

    def revealify(html)

      # parse content
      content = Nokogiri::HTML.fragment(html)

      # create an empty node
      reveal_div = Nokogiri::HTML.fragment('&amp;lt;div class=&quot;reveal&quot;&amp;gt;&amp;lt;div class=&quot;slides&quot;&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;', 'UTF-8')
      slides_div = reveal_div.search('.slides').first

      content.xpath(&quot;*&quot;).each do |element|

        # &amp;lt;section&amp;gt; elements should be passed through as-is
        if element.matches? &quot;section&quot;
          slides_div.add_child(element.dup)

        else
          # on &quot;split&quot; elements (&amp;lt;h1&amp;gt;, &amp;lt;h2&amp;gt;, &amp;lt;hr&amp;gt;)
          if element.matches? &quot;h1,h2,hr&quot;
            current_section = slides_div.add_child(&quot;&amp;lt;section&amp;gt;&quot;).first
            # hoist all the header's attributes up to the wrapper element
            # not sure if this will always work, but here goes...
            element.keys.each do |attribute|
              # relies on the fact that the &quot;current&quot; wrapper node is the last child in ret
              current_section[attribute] = element[attribute]
              # element.delete attribute
            end
          end

          # add the element to the current &amp;lt;section&amp;gt; (i.e. the current slide)
          # unless it's just an &amp;lt;hr&amp;gt; (which are used for splitting only)
          current_section = slides_div.last_element_child
          current_section.add_child(element.dup) unless element.matches? &quot;hr&quot;
        end

      end

      reveal_div.to_html
    end

  end

end

Liquid::Template.register_filter(Jekyll::Revealify)

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;2-add-a-reveal-layout&quot;&gt;2. add a reveal &lt;a href=&quot;https://jekyllrb.com/docs/layouts/&quot;&gt;layout&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;You’ll need a new &lt;a href=&quot;https://jekyllrb.com/docs/layouts/&quot;&gt;layout&lt;/a&gt; as well: create a
&lt;code&gt;reveal.html&lt;/code&gt; file in your Jekyll &lt;code&gt;_layouts&lt;/code&gt; directory and make sure that the
body tag has this in it (you’ll need to make sure it’s got the right paths &amp;amp;
other stuff for your setup). The key part is that first &lt;code&gt;{{ content |
revealify }}&lt;/code&gt; line—that takes the content of your page (the jekyll
&lt;code&gt;.md&lt;/code&gt; file with &lt;code&gt;layout: reveal&lt;/code&gt; in the frontmatter) and passes it through the
“revealify” filter plugin we &lt;a href=&quot;#the-revealify-filter&quot;&gt;made earlier&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The configuration stuff here is just the example config from
&lt;a href=&quot;https://github.com/hakimel/reveal.js#configuration&quot;&gt;reveal.js&lt;/a&gt;, so feel free to
tweak to suit your own presentation.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;!-- this is where the reveailfy filter gets applied --&amp;gt;
{{ content | revealify }}

&amp;lt;!-- load the reveal.js css &amp;amp; js (assuming you've put it in assets/)--&amp;gt;
&amp;lt;link rel=&quot;stylesheet&quot; href=&quot;{{site.baseurl}}/assets/reveal.js-3.7.0/css/reveal.css&quot;&amp;gt;
&amp;lt;link rel=&quot;stylesheet&quot; href=&quot;{{site.baseurl}}/assets/reveal.js-3.7.0/css/theme/white.css&quot;&amp;gt;
&amp;lt;script src=&quot;{{site.baseurl}}/assets/reveal.js-3.7.0/js/reveal.js&quot; type=&quot;text/javascript&quot;&amp;gt;&amp;lt;/script&amp;gt;

&amp;lt;!-- configure the presentation, (you can tweak options to suit) --&amp;gt;
&amp;lt;script&amp;gt;
 Reveal.initialize({

   // Display presentation control arrows
   controls: true,

   // Help the user learn the controls by providing hints, for example by
   // bouncing the down arrow when they first encounter a vertical slide
   controlsTutorial: true,

   // Determines where controls appear, &quot;edges&quot; or &quot;bottom-right&quot;
   controlsLayout: 'bottom-right',

   // Visibility rule for backwards navigation arrows; &quot;faded&quot;, &quot;hidden&quot;
   // or &quot;visible&quot;
   controlsBackArrows: 'faded',

   // Display a presentation progress bar
   progress: true,

   // Display the page number of the current slide
   slideNumber: false,

   // Push each slide change to the browser history
   history: false,

   // Enable keyboard shortcuts for navigation
   keyboard: true,

   // Enable the slide overview mode
   overview: true,

 });
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p class=&quot;hl-para&quot;&gt;The full &lt;a href=&quot;https://jekyllrb.com/docs/layouts/&quot;&gt;layout&lt;/a&gt; file will depend on how
the rest of your site works (where you’ve put the &lt;code&gt;reveal.js-x.x.x&lt;/code&gt; folder,
etc.) so I haven’t included the full file here (you can &lt;a href=&quot;https://github.com/benswift/benswift.github.io/blob/source/_layouts/reveal.html&quot;&gt;see it on
GitHub&lt;/a&gt;,
though). Also remember that you can see the full list of reveal configuration
options &lt;a href=&quot;https://github.com/hakimel/reveal.js#configuration&quot;&gt;in the README&lt;/a&gt;:&lt;/p&gt;

&lt;h2 id=&quot;3-write-your-slides-as-markdown-content&quot;&gt;3. write your slides as markdown content&lt;/h2&gt;

&lt;p&gt;Finally, write your content as a regular jekyll post which uses the &lt;code&gt;reveal&lt;/code&gt;
layout, e.g.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-md&quot;&gt;---
title: &quot;Week 1: intro&quot;
layout: reveal
---

## Intro

- welcome to the course
- we're gonna learn all the things

## Timeline

- first, we'll sit in boring lectures...
- ... then, there will be a huge exam!

fun times.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, you get all the niceties of the &lt;code&gt;jekyll watch&lt;/code&gt; cycle; livereload,
auto-compilation of scss assets, etc.&lt;/p&gt;

&lt;p&gt;And if you need to do something interesting with the formatting or layout of
your content, then you can just drop straight into writing HTML (as you can
always do in a markdown file).&lt;/p&gt;

&lt;h2 id=&quot;4-write-amazing-content&quot;&gt;4. write amazing content&lt;/h2&gt;

&lt;p&gt;This is the hard part. But at least if you’ve got a nice workflow for actually
turning your content into nice looking slides then you’ve got a head start :)&lt;/p&gt;</content><author><name>Ben Swift</name></author><category term="web" /><summary type="html">I use Jekyll to create my course websites and reveal.js to create my lecture slides. Both of them are awesome, and allow me to focus on writing (hopefully) great content, and the formatting/presentation stuff stays out of the way until I git push the updates to the server.</summary></entry><entry><title type="html">Hosting a self-built jekyll site on GH pages</title><link href="https://benswift.me/blog/2018/06/22/hosting-a-self-built-jekyll-site-on-gh-pages/" rel="alternate" type="text/html" title="Hosting a self-built jekyll site on GH pages" /><published>2018-06-22T10:40:00+08:00</published><updated>2018-06-22T10:40:00+08:00</updated><id>https://benswift.me/blog/2018/06/22/hosting-a-self-built-jekyll-site-on-gh-pages</id><content type="html" xml:base="https://benswift.me/blog/2018/06/22/hosting-a-self-built-jekyll-site-on-gh-pages/">&lt;p&gt;This blog is built from &lt;a href=&quot;http://commonmark.org/help/&quot;&gt;markdown&lt;/a&gt; files using
&lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; hosted on &lt;a href=&quot;https://pages.github.com/&quot;&gt;GitHub
pages&lt;/a&gt;, which saves a lot of hassle involved with DIY
hosting&lt;sup id=&quot;fnref:hassle&quot;&gt;&lt;a href=&quot;#fn:hassle&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;. There are a bunch of &lt;a href=&quot;http://blog.teamtreehouse.com/using-github-pages-to-host-your-website&quot;&gt;useful
tutorials&lt;/a&gt;
on how to set all this up.&lt;/p&gt;

&lt;p&gt;However, I like to have control over which plugins are used, etc. which GitHub
pages doesn’t let you do. What it (GH pages) &lt;em&gt;does&lt;/em&gt; let you do, though, is dump
a bunch of files (html, js, css) in a repo and just serve them as-is. These
files represent the “built” version of your site, not the source, so you’ll
probably want a separate repo for your content (e.g. your markdown files) and
the built site. Handling this stuff can be a hassle, so here’s the &lt;code&gt;Makefile&lt;/code&gt; I
use to make it easy.&lt;/p&gt;

&lt;p&gt;The basic process is:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;create a git repo where you keep your jekyll site (or not, but it’s so nice
to have your blog content under version control)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;create a separate project on GitLab called
&lt;code&gt;$(GH_USERNAME)/$(GH_USERNAME).github.io.git&lt;/code&gt;, but don’t create anything in
there yet&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code&gt;make init&lt;/code&gt; will turn the local jekyll build directory into a git repo&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code&gt;make push&lt;/code&gt; target will build your site (locally) and push it up to GitHub,
where it’ll be served by GitHub pages&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;After that, you can work on, commit &amp;amp; push your blog wherever you like (I
actually keep the content in the &lt;a href=&quot;https://github.com/benswift/benswift.github.io&quot;&gt;same GH
repo&lt;/a&gt;, but in a &lt;code&gt;source&lt;/code&gt; branch)
but you can push the built site to the master branch so GH pages will serve it
up for you.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-make&quot;&gt;BASE_HTML_DIR=_site
GH_USERNAME=benswift # change this to your GH username

all: push

init:
	mkdir -p $(BASE_HTML_DIR) &amp;amp;&amp;amp; cd $(BASE_HTML_DIR) &amp;amp;&amp;amp; git init . &amp;amp;&amp;amp; git remote add origin git@github.com:$(GH_USERNAME)/$(GH_USERNAME).github.io.git

generate-blog:
	bundle exec jekyll build

commit-all: generate-blog
	cd $(BASE_HTML_DIR) &amp;amp;&amp;amp; git add . &amp;amp;&amp;amp; git commit -m &quot;update blog&quot;

push: commit-all
	cd $(BASE_HTML_DIR) &amp;amp;&amp;amp; git push origin master
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:hassle&quot;&gt;

      &lt;p&gt;I know that it’s not actually &lt;em&gt;that&lt;/em&gt; much hassle, especially if you’ve
already got a webserver set up for other reasons, but zero hassle still
beats ε hassle ∀ε&amp;gt;0, especially when there’s other work to be done. &lt;a href=&quot;#fnref:hassle&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Ben Swift</name></author><category term="meta" /><category term="web" /><summary type="html">This blog is built from markdown files using Jekyll hosted on GitHub pages, which saves a lot of hassle involved with DIY hosting[^hassle]. There are a bunch of useful tutorials on how to set all this up.</summary></entry><entry><title type="html">CHI hangs</title><link href="https://benswift.me/blog/2018/06/22/chi-hangs/" rel="alternate" type="text/html" title="CHI hangs" /><published>2018-06-22T10:29:00+08:00</published><updated>2018-06-22T10:29:00+08:00</updated><id>https://benswift.me/blog/2018/06/22/chi-hangs</id><content type="html" xml:base="https://benswift.me/blog/2018/06/22/chi-hangs/">&lt;p&gt;Here’s a photo of Kieran and I hanging out at CHI. I’ll write a more detailed
trip report some other time, but from the general chats I had with people (and
random &lt;a href=&quot;https://eagereyes.org/blog/2018/seven-visualization-talks-that-terrified-me-at-chi&quot;&gt;unsolicited blog
posts&lt;/a&gt;)
it seems like &lt;a href=&quot;/blog/2018/04/24/the-other-side-algorithm-as-ritual-in-artificial-intelligence/&quot;&gt;the ritual&lt;/a&gt; started some conversations.&lt;/p&gt;

&lt;picture&gt;&lt;img alt=&quot;Ben and Kieran at CHI&quot; style=&quot;width:100%;&quot; src=&quot;/assets/images/posts/ben-kieran-at-chi-07a77cee2d311faa1a5c8a706b7282994a58b1551a6d4c9bc667298f371ff464.jpg&quot; /&gt;&lt;/picture&gt;</content><author><name>Ben Swift</name></author><category term="kieran" /><category term="research" /><summary type="html">Here’s a photo of Kieran and I hanging out at CHI. I’ll write a more detailed trip report some other time, but from the general chats I had with people (and random unsolicited blog posts) it seems like the ritual started some conversations.</summary></entry><entry><title type="html">ANU Laptop Orchestra</title><link href="https://benswift.me/blog/2018/06/06/anu-laptop-orchestra/" rel="alternate" type="text/html" title="ANU Laptop Orchestra" /><published>2018-06-06T09:20:00+08:00</published><updated>2018-06-06T09:20:00+08:00</updated><id>https://benswift.me/blog/2018/06/06/anu-laptop-orchestra</id><content type="html" xml:base="https://benswift.me/blog/2018/06/06/anu-laptop-orchestra/">&lt;p&gt;One of the coolest parts of my job is doing livecoding gigs—here’s a recent
set I did at Smiths as part of &lt;a href=&quot;https://www.smithsalternative.com/events/soundscapes-21-44719&quot;&gt;Soundscapes
#21&lt;/a&gt;. A big
shout-out to Ushini Attanayake (not in the video, sadly) who did a &lt;strong&gt;fantastic&lt;/strong&gt;
job of her first livecoding set.&lt;/p&gt;

&lt;div style=&quot;padding:177.78% 0 0 0;position:relative;&quot;&gt;&lt;iframe src=&quot;https://player.vimeo.com/video/269115310?color=be2edd&quot; style=&quot;position:absolute;top:0;left:0;width:100%;height:100%;&quot; frameborder=&quot;0&quot; webkitallowfullscreen=&quot;&quot; mozallowfullscreen=&quot;&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;script src=&quot;https://player.vimeo.com/api/player.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Somehow I’ve managed to make that stuff part of my day job as a (&lt;em&gt;cough&lt;/em&gt;)
respectable computer science lecturer, because Laptop Orchestras (or &lt;em&gt;LOrk&lt;/em&gt;s)
are a thing. Seriously, &lt;a href=&quot;https://en.wikipedia.org/wiki/Laptop_orchestra&quot;&gt;look it up on the
internet&lt;/a&gt;. But ANU doesn’t have
one—sadface. And it’s time to fix that.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;if&lt;/strong&gt; you’re a current ANU undergrad or coursework-postgrad student (&lt;em&gt;any&lt;/em&gt;
ANU student, not just in computer science) and you’re into&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;music&lt;/strong&gt;: hi-tech DJing (including livecoding, live patching e.g. Max/MSP,
PD, live loop manipulation e.g. Ableton), and other instrumentalists who
want to perform live with the laptop orchestra are invited too&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;visuals&lt;/strong&gt;: VJing, projection mapping, 2D/3D graphics e.g. shaders, Unity,
etc., and other drawers/dancers/painters/glassblowers who want to perform
live with the laptop orchestra are invited too&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;organising&lt;/strong&gt;, &lt;strong&gt;managing&lt;/strong&gt; and &lt;strong&gt;promoting&lt;/strong&gt; these sorts of gigs and
bands so that people actually show up and have an awesome time (because
even laptop orchestras need agents&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;and&lt;/strong&gt; you want to get together with like (and unlike!)-minded folks and play
some gigs &lt;em&gt;for university credit&lt;/em&gt;, and you have 6–12 credit points (1–2
courses) of room in your ANU degree in S2 2018 and S1 2019&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;then&lt;/strong&gt; you need to get in touch with me (&lt;a href=&quot;mailto:ben.swift@anu.edu.au&quot;&gt;ben.swift@anu.edu.au&lt;/a&gt;), perhaps
with a link to some of your creative work, and we can try and make this
happen.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I’m putting together a &lt;a href=&quot;https://en.wikipedia.org/wiki/Laptop_orchestra&quot;&gt;Laptop
Orchestra&lt;/a&gt; (or, alternately an
&lt;a href=&quot;https://algorave.com/&quot;&gt;Algorave&lt;/a&gt; group) as a
&lt;a href=&quot;https://cs.anu.edu.au/TechLauncher/&quot;&gt;TechLauncher&lt;/a&gt; project. Don’t wait till the
start of semester 2; the groups might be full up by then and you’ll miss out!&lt;/p&gt;

&lt;p&gt;Even if you’re not sure if you’re the right person (e.g. you’re not sure how to
fit it into your degree program) if you’ve always liked technology, creativity
and live performance but never found the right outlet for those passions, then
&lt;a href=&quot;mailto:ben.swift@anu.edu.au&quot;&gt;get in touch&lt;/a&gt;, there might be ways to make it
happen.&lt;/p&gt;</content><author><name>Ben Swift</name></author><category term="livecoding" /><category term="ccc" /><category term="lens" /><category term="gigs" /><summary type="html">One of the coolest parts of my job is doing livecoding gigs—here’s a recent set I did at Smiths as part of Soundscapes #21. A big shout-out to Ushini Attanayake (not in the video, sadly) who did a fantastic job of her first livecoding set.</summary></entry></feed>