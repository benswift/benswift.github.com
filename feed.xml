<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="https://benswift.me/feed.xml" rel="self" type="application/atom+xml" /><link href="https://benswift.me/" rel="alternate" type="text/html" /><updated>2021-02-20T10:45:21+11:00</updated><id>https://benswift.me/feed.xml</id><title type="html">benswift.me</title><subtitle>livecoder &amp; researcher homepage - code, creativity, culture</subtitle><author><name>Ben Swift</name></author><entry><title type="html">Respectful Learning Memes</title><link href="https://benswift.me/blog/2021/12/19/respectful-learning-memes/" rel="alternate" type="text/html" title="Respectful Learning Memes" /><published>2021-12-19T00:00:00+11:00</published><updated>2021-12-19T00:00:00+11:00</updated><id>https://benswift.me/blog/2021/12/19/respectful-learning-memes</id><content type="html" xml:base="https://benswift.me/blog/2021/12/19/respectful-learning-memes/">&lt;p&gt;A few years ago I re-wrote one of our core &lt;a href=&quot;https://cs.anu.edu.au/courses/comp2300/&quot;&gt;computer architecture
courses&lt;/a&gt; (it has the course code
COMP2300). While I’m not teaching it this semester, it’s still a course dear to
my heart. It’s a large (400+ students) compulsory course, so there’s a spread of
different levels of interest, aptitude &amp;amp; enthusiasm in the student cohort.&lt;/p&gt;

&lt;p&gt;One of the tricky parts of COMP2300 is that we don’t use a high-level
programming language—one with recognisable keywords like &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;else&lt;/code&gt;, &lt;code&gt;for&lt;/code&gt;, etc.
Instead, all the programming is done in “assembly” language, which
is &lt;em&gt;fairly&lt;/em&gt; close to the direct stream of bytes that the CPU sees as it’s
executing your code. While this is a great chance to learn how CPUs work, the
unfamiliarity can be challenging—and the students aren’t shy about saying so.&lt;/p&gt;

&lt;h2 id=&quot;the-hidden-communication-channels&quot;&gt;The hidden communication channels&lt;/h2&gt;

&lt;p&gt;One thing that I’ve discovered over the last few years is that for every
“official” course forum/communication channel there’s &lt;em&gt;at least&lt;/em&gt; one shadow
channel that’s created somewhere else. These
Facebook/WhatsApp/Insta/WeChat/TikTok/etc. groups are where the students really
let their hair down and say what they think about the course.&lt;/p&gt;

&lt;p&gt;One surprising (to me) upside of these channels is that as the students chat
with one another, they come up with some really helpful explanations of the
concepts they’re strugging with in the course. And they’re &lt;em&gt;really&lt;/em&gt; good at
making &lt;strong&gt;memes&lt;/strong&gt;. Here are just a few of the ones which ended up on the allowed
“cheat sheets” in the final exam.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/respectful-learning-memes/comp2300-offramp.jpeg&quot; alt=&quot;COMP2300 offramp meme&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/respectful-learning-memes/comp2300-galaxy-brain.jpeg&quot; alt=&quot;COMP2300 galaxy brain meme&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/respectful-learning-memes/comp2300-joey.jpeg&quot; alt=&quot;COMP2300 Joey from Friends meme&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/respectful-learning-memes/comp2300-obiwan.jpeg&quot; alt=&quot;COMP2300 ObiWan meme&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/respectful-learning-memes/comp2300-anakin.jpeg&quot; alt=&quot;COMP2300 Anakin Skywalker meme&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I don’t know where they came from—at least some of them were created
specifically for COMP2300. But I know from talking to students that they
actually helped them understand and remember key concepts from the course.&lt;/p&gt;

&lt;h2 id=&quot;harnessing-students-as-content-creators&quot;&gt;Harnessing students as content creators&lt;/h2&gt;

&lt;p&gt;Like many academics around the world, I’m currently brushing up my course
syllabus for the new semester (which starts &lt;em&gt;next week&lt;/em&gt; as I’m writing this).
And I’m sure the students will make new memes for (among other things)
explaining the course content to each other.&lt;/p&gt;

&lt;p&gt;However, if that happens on the “secret” channels then that’s obviously not good
for equity—I want to make sure all students benefit, not just the ones in the
right FB Messenger group. So this year I’m going to include a meme thread as
part of the official course forum. Since it’s an official course communication
channel I’m sure it’ll be kept respectful, and all students can benefit. And as
I teach bigger and more diverse classes, the chance to harness these students’
brilliance in meme-making (and some of them are &lt;em&gt;seriously&lt;/em&gt; good at it) to help
all my students learn seems like a win. Can’t wait to see what they come up with
☺&lt;/p&gt;</content><author><name>Ben Swift</name></author><category term="teaching" /><summary type="html">A few years ago I re-wrote one of our core computer architecture courses (it has the course code COMP2300). While I’m not teaching it this semester, it’s still a course dear to my heart. It’s a large (400+ students) compulsory course, so there’s a spread of different levels of interest, aptitude &amp;amp; enthusiasm in the student cohort.</summary></entry><entry><title type="html">Independent Study Contract writing tips</title><link href="https://benswift.me/blog/2021/01/25/independent-study-contract-writing-tips/" rel="alternate" type="text/html" title="Independent Study Contract writing tips" /><published>2021-01-25T00:00:00+11:00</published><updated>2021-01-25T00:00:00+11:00</updated><id>https://benswift.me/blog/2021/01/25/independent-study-contract-writing-tips</id><content type="html" xml:base="https://benswift.me/blog/2021/01/25/independent-study-contract-writing-tips/">&lt;p&gt;Many students here at the ANU School of Computing take a capstone project at the
end of their undergraduate degree. There are a few different variations (e.g.
half-year vs full-year, “research” vs “implementation”, etc.), but overall these
projects are a chance for students to put together all the skills they’ve
learned in their degree program in a supervised project where &lt;em&gt;they’re&lt;/em&gt; the
boss.&lt;/p&gt;

&lt;p&gt;To take on one of these project, students need to find a supervisor, decide on a
project and sign an &lt;strong&gt;independent study contract&lt;/strong&gt; (ISC). While these ISCs
&lt;em&gt;could&lt;/em&gt; be seen as a tick-and-flick waste of time, when done well they’re an
important part of the project.&lt;/p&gt;

&lt;p&gt;If you’re a student writing an ISC (at the ANU School of Computing at least)
there two “meaty” parts to your ISC: the &lt;em&gt;project description&lt;/em&gt;, and the
&lt;em&gt;learning outcomes&lt;/em&gt;. Putting some hard work into those parts at the beginning of
your project is totally worth it. Your supervisor can (and should!) help you
out, but it’s your project, and you should make sure it reflects the project you
want to do.&lt;/p&gt;

&lt;h2 id=&quot;tips-for-writing-a-good-isc&quot;&gt;Tips for writing a good ISC&lt;/h2&gt;

&lt;p&gt;All projects are different, and therefore so are all ISCs. The best tip I can
give is to &lt;em&gt;write an ISC that you’ll &lt;strong&gt;want&lt;/strong&gt; to keep looking at throughout the
project&lt;/em&gt;. It’s tempting to see the sole purpose of the ISC getting a permission
code to enrol in the project course. But it’s something that should guide your
research, and something which you should be able to point to at the end and say
“yep, I achieved my goals”.&lt;/p&gt;

&lt;h3 id=&quot;project-description&quot;&gt;Project Description&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;this is kindof a marketing exercise: you’re trying to “sell” your project to
an interested observer, so make it seem interesting—give it a “hook”&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;length: one or two paragraphs (it should fit in the space on the form), and
should be understandable by one of your classmates&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;don’t write it out by hand straight on to the form; this is the sort of thing
you want to have a few drafts at (including getting feedback from your supervisor)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;don’t &lt;em&gt;just&lt;/em&gt; say vague stuff like “explore various techniques for…” or
“investigate different approaches to…”; if you’re gonna do that you need to
also have something about what you’re trying to find with your
explorations/investigations, and how you’ll measure whether you’,re successful&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;if you’re going to create something (e.g. a piece of software, a user study)
then mention it in the project description&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;learning-outcomes&quot;&gt;Learning Outcomes&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;how many? you probably want 3 (±1)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;the “standard” way to frame learning outcomes is to write them as
continuations of the sentence: “at the end of this project, the student will
be able to…”&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;think about what you’d like to be able to do once you’ve completed the project
and work backwards from there&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;the Learning &amp;amp; Teaching centre at Adelaide Uni has some &lt;a href=&quot;https://www.adelaide.edu.au/learning/resources-for-educators/curriculum-resources/learning-outcomes/writing-learning-outcomes#application-of-learning-outcomes&quot;&gt;good tips on
writing&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name>Ben Swift</name></author><category term="teaching" /><summary type="html">Many students here at the ANU School of Computing take a capstone project at the end of their undergraduate degree. There are a few different variations (e.g. half-year vs full-year, “research” vs “implementation”, etc.), but overall these projects are a chance for students to put together all the skills they’ve learned in their degree program in a supervised project where they’re the boss.</summary></entry><entry><title type="html">Configuring Spacemacs org-roam &amp;amp; org-noter for academic writing bliss</title><link href="https://benswift.me/blog/2020/12/16/configuring-spacemacs-org-roam-org-noter-for-academic-writing-bliss/" rel="alternate" type="text/html" title="Configuring Spacemacs org-roam &amp;amp; org-noter for academic writing bliss" /><published>2020-12-16T00:00:00+11:00</published><updated>2020-12-16T00:00:00+11:00</updated><id>https://benswift.me/blog/2020/12/16/configuring-spacemacs-org-roam-org-noter-for-academic-writing-bliss</id><content type="html" xml:base="https://benswift.me/blog/2020/12/16/configuring-spacemacs-org-roam-org-noter-for-academic-writing-bliss/">&lt;p&gt;I’ve always had a decent memory, and so I’ve never really had a formal system
for keeping track of who said what and in which paper. When it comes time to
write something of my own I end up mostly just going from memory and
re-&lt;a href=&quot;https://scholar.google.com&quot;&gt;google-scholaring&lt;/a&gt; things from scratch (often
finding later that I already had that paper in my
&lt;a href=&quot;https://www.zotero.org&quot;&gt;Zotero&lt;/a&gt; database already). As I get older my memory
isn’t as sharp, so I think it’s time to use a more systematic workflow for
writing—keeping notes about stuff I’ve read &amp;amp; linking the ideas together.&lt;/p&gt;

&lt;p&gt;All the cool kids are raving about the &lt;a href=&quot;https://zettelkasten.de&quot;&gt;Zettelkasten&lt;/a&gt;
method, and the &lt;a href=&quot;https://www.orgroam.com&quot;&gt;org-roam&lt;/a&gt; package supporting this
workflow in &lt;a href=&quot;/blog/tag/emacs/&quot;&gt;Emacs&lt;/a&gt;. There are also
extensions for managing one’s paper library
(&lt;a href=&quot;https://github.com/org-roam/org-roam-bibtex&quot;&gt;org-roam-bibtex&lt;/a&gt;) and
reading/annotating pdf files
(&lt;a href=&quot;https://github.com/weirdNox/org-noter&quot;&gt;org-noter&lt;/a&gt;). When combined, this all
seems like having academic writing superpowers compared to my “sit around and
hope I remember the reference” approach. See e.g. &lt;a href=&quot;https://emacsconf.org/2020/talks/17/&quot;&gt;Noorah Alhasan’s EmacsConf
2020 talk&lt;/a&gt; for more detailed info on this
workflow.&lt;/p&gt;

&lt;p class=&quot;hl-para&quot;&gt;This post isn’t about how I’ve become amazingly productive; it’s about how I
wasted a day yak-shaving just to get the software working 🙃&lt;/p&gt;

&lt;h2 id=&quot;getting-it-all-to-play-nicely-in-spacemacs&quot;&gt;Getting it all to play nicely in Spacemacs&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.spacemacs.org&quot;&gt;Spacemacs&lt;/a&gt; (currently) has good
&lt;a href=&quot;https://orgmode.org&quot;&gt;org-mode&lt;/a&gt; support, but only rudimentary org-roam support,
and doesn’t include the org-roam-bibtex and org-noter extensions. So I spent
some time yesterday setting it all up. There were a couple of
&lt;a href=&quot;https://philipperambert.com/Installing-Org-Roam-Bibtex-In-Spacemacs&quot;&gt;blog&lt;/a&gt;
&lt;a href=&quot;https://www.ianjones.us/org-roam-bibtex&quot;&gt;posts&lt;/a&gt; which were helpful, as well as
the GitHub READMEs of the various packages—and you should check them out, this
post isn’t meant to be a standalone “here’s everything you need” guide. But all
the info I could find only covered &lt;em&gt;some&lt;/em&gt; of the parts I wanted (e.g. using
org-roam-bibtex but not org-noter, or using all the parts I wanted but for
&lt;a href=&quot;https://github.com/hlissner/doom-emacs&quot;&gt;Doom&lt;/a&gt; rather than Spacemacs). So if
you’re trying to do the same thing as me this post will (hopefully) save you
some time.&lt;/p&gt;

&lt;p&gt;I’m still tinkering with things, so if you want to see the latest version of my
config then have a look at my public dotfiles repo (especially
&lt;a href=&quot;https://github.com/benswift/.dotfiles/blob/master/spacemacs&quot;&gt;&lt;code&gt;.spacemacs&lt;/code&gt;&lt;/a&gt; and
&lt;a href=&quot;https://github.com/benswift/.dotfiles/blob/master/ben-utils.el&quot;&gt;&lt;code&gt;ben-utils.el&lt;/code&gt;&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;First, make sure you’ve got the &lt;code&gt;org&lt;/code&gt; and &lt;code&gt;bibtex&lt;/code&gt; layers installed, and you’ll
need these extra packages in &lt;code&gt;dotspacemacs-additional-packages&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;org-roam-bibtex&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;org-noter&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;org-noter-pdftools&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You’ll also need to provide some extra layer &lt;code&gt;:variables&lt;/code&gt; to the associated layers in
&lt;code&gt;dotspacemacs-configuration-layers&lt;/code&gt; (you could probably do this in config hooks
or even in &lt;code&gt;spacemacs/user-config&lt;/code&gt; as well—this is just how I did it).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-scheme&quot;&gt;(bibtex
 :variables
 bibtex-completion-bibliography (expand-file-name &quot;~/Documents/org/zotero.bib&quot;)
 bibtex-completion-pdf-field &quot;file&quot;
 ;; org-ref stuff (but used by bibtex layer)
 org-ref-default-bibliography (list bibtex-completion-bibliography)
 org-ref-get-pdf-filename-function 'org-ref-get-pdf-filename-helm-bibtex)

(org
 :variables
 org-directory (expand-file-name &quot;~/Documents/org&quot;)
 org-default-notes-file (concat org-directory &quot;/inbox.org&quot;)
 ;; org-roam
 org-enable-roam-support t
 org-roam-directory (concat org-directory &quot;/roam&quot;)
 org-roam-db-location (concat org-roam-directory &quot;/db/org-roam.db&quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;p class=&quot;hl-para&quot;&gt;Note: those first two config variables (the &lt;code&gt;bibtex-completion-*&lt;/code&gt; ones) weren’t
listed in the blog posts I found, but seemed to be necessary to get
&lt;a href=&quot;https://github.com/tmalsburg/helm-bibtex&quot;&gt;helm-bibtex&lt;/a&gt; to find my master
reference file.&lt;/p&gt;

&lt;p&gt;Finally, since org-roam-bibtex, org-noter and org-noter-pdftools aren’t
Spacemacs layers (they’re just additional packages) you need to provide some
extra configuration in &lt;code&gt;spacemacs/user-config&lt;/code&gt; to hook it all together. For
convenience I put it in a separate &lt;code&gt;.el&lt;/code&gt; file which I load from
&lt;code&gt;spacemacs/user-config&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-scheme&quot;&gt;(use-package org-roam-bibtex
  :after org-roam
  :hook (org-roam-mode . org-roam-bibtex-mode)
  :custom
  (orb-preformat-keywords '(&quot;citekey&quot; &quot;title&quot; &quot;url&quot; &quot;author-or-editor&quot; &quot;keywords&quot; &quot;file&quot;))
  (orb-process-file-keyword t)
  (orb-file-field-extensions '(&quot;pdf&quot; &quot;epub&quot; &quot;html&quot;))

  (orb-templates
   '((&quot;r&quot; &quot;ref&quot; plain (function org-roam-capture--get-point)
      &quot;&quot;
      :file-name &quot;${citekey}&quot;
      :head &quot;#+TITLE: ${citekey}: ${title}
#+ROAM_KEY: ${ref}

- tags ::
- keywords :: ${keywords}

* ${title}
  :PROPERTIES:
  :Custom_ID: ${citekey}
  :URL: ${url}
  :AUTHOR: ${author-or-editor}
  :NOTER_DOCUMENT: ${file}
  :NOTER_PAGE:
  :END:&quot;))))

(use-package org-pdftools
  :hook (org-load . org-pdftools-setup-link))

(use-package org-noter
  :after (:any org pdf-view)
  :custom (org-noter-always-create-frame nil))

(use-package org-noter-pdftools
  :after org-noter
  :config
  (with-eval-after-load 'pdf-annot
    (add-hook 'pdf-annot-activate-handler-functions #'org-noter-pdftools-jump-to-note)))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once I’ve used this system a bit longer and ironed out any kinks I might submit
a dedicated org-roam-bibtex layer to Spacemacs (or add it to the org layer). But
for now I’ll just leave it here in case any other Spacemacs users are wondering
how I did it.&lt;/p&gt;</content><author><name>Ben Swift</name></author><category term="research" /><category term="emacs" /><summary type="html">I’ve always had a decent memory, and so I’ve never really had a formal system for keeping track of who said what and in which paper. When it comes time to write something of my own I end up mostly just going from memory and re-google-scholaring things from scratch (often finding later that I already had that paper in my Zotero database already). As I get older my memory isn’t as sharp, so I think it’s time to use a more systematic workflow for writing—keeping notes about stuff I’ve read &amp;amp; linking the ideas together.</summary></entry><entry><title type="html">Student project: animated 3D code rendering engine</title><link href="https://benswift.me/blog/2020/12/11/student-project-animated-3d-code-rendering-engine/" rel="alternate" type="text/html" title="Student project: animated 3D code rendering engine" /><published>2020-12-11T00:00:00+11:00</published><updated>2020-12-11T00:00:00+11:00</updated><id>https://benswift.me/blog/2020/12/11/student-project-animated-3d-code-rendering-engine</id><content type="html" xml:base="https://benswift.me/blog/2020/12/11/student-project-animated-3d-code-rendering-engine/">&lt;p&gt;I’m trying to get better at writing down potential student project ideas as they
come to me. For the moment, I’m doing this on my blog using the
&lt;a href=&quot;https://benswift.me/blog/tag/student-project/&quot;&gt;&lt;code&gt;student-project&lt;/code&gt;&lt;/a&gt; tag.&lt;/p&gt;

&lt;p&gt;As a &lt;a href=&quot;//livecoding/&quot;&gt;livecoder&lt;/a&gt; I care more than most about
how my code looks on the screen. While I’ve &lt;a href=&quot;https://benswift.me/research/#swiftVisualCodeAnnotations2013&quot;&gt;written in the
past&lt;/a&gt; about the
potential of animated “tooltip” style code annotations, I’d love to have more
detailed (parametric) control over the display of the code/text itself,
especially in a “handwritten” style. Being able to “write” the code in real-time
in sync with the music in a livecoding setup would look super cool, and I
&lt;sup id=&quot;fnref:unproven-hypothesis&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:unproven-hypothesis&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; think that it might even help folks follow what’s going
on in terms of which bits of code are responsible for which parts of the music.&lt;/p&gt;

&lt;p&gt;Making this happen would require:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;a handwriting synthesis model (something like &lt;a href=&quot;https://github.com/sjvasquez/handwriting-synthesis&quot;&gt;this one by Alex
Graves&lt;/a&gt;)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;(optionally) a 3D version (which would give output like
&lt;a href=&quot;https://www.youtube.com/watch?v=rA3QZVEfGpc&quot;&gt;this&lt;/a&gt;, but automated rather than
manual)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;a way of applying keyword colouring &amp;amp; other standard code display niceties
(because it’d be nice to not &lt;em&gt;lose&lt;/em&gt; the things that a regular old IDE/text
editor can do)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;a protocol for a livecoding IDE to communicate (including timing information)
with this code synthesis engine so that the code would be displayed/drawn (and
re-drawn) in response to the music in funky ways&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;…and it’d all have to run in real-time during a performance (although it
needn’t be running on the livecoder’s machine—as mentioned above it’d ideally
use some sort of &lt;a href=&quot;https://nrepl.org/nrepl/index.html&quot;&gt;nrepl&lt;/a&gt;-style protocol and
could be done over the network).&lt;/p&gt;

&lt;p&gt;If you’re an ANU student and you want to do a research project along these lines
with the &lt;a href=&quot;https://cs.anu.edu.au/code-creativity-culture/&quot;&gt;c/c/c studio&lt;/a&gt;, then
&lt;a href=&quot;mailto:ben.swift@anu.edu.au&quot;&gt;drop me a line&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:unproven-hypothesis&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;I have no evidence for this… but I’d like to try and get some. &lt;a href=&quot;#fnref:unproven-hypothesis&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Ben Swift</name></author><category term="student-project" /></entry><entry><title type="html">Creative Computing ANU Extension course</title><link href="https://benswift.me/blog/2020/09/17/creative-computing-anu-extension-course/" rel="alternate" type="text/html" title="Creative Computing ANU Extension course" /><published>2020-09-17T00:00:00+10:00</published><updated>2020-09-17T00:00:00+10:00</updated><id>https://benswift.me/blog/2020/09/17/creative-computing-anu-extension-course</id><content type="html" xml:base="https://benswift.me/blog/2020/09/17/creative-computing-anu-extension-course/">&lt;div style=&quot;padding:75% 0 0 0;position:relative;&quot;&gt;&lt;iframe src=&quot;https://player.vimeo.com/video/454451852?color=be2edd&quot; style=&quot;position:absolute;top:0;left:0;width:100%;height:100%;&quot; frameborder=&quot;0&quot; webkitallowfullscreen=&quot;&quot; mozallowfullscreen=&quot;&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;script src=&quot;https://player.vimeo.com/api/player.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;An update for those who have been following updates about &lt;a href=&quot;https://benswift.me/blog/tag/reimagine/&quot;&gt;my reimagine
fellowship&lt;/a&gt;: a Creative Computing
course (hosted by the c/c/c studio as part of the &lt;a href=&quot;https://extension.anu.edu.au/&quot;&gt;ANU Extension
program&lt;/a&gt;) has been approved for delivery in 2021.
So if you’re an ACT student heading into year 11 in 2021, and you want to make
beats and/or art with code, then you should check it out. More details &lt;a href=&quot;https://cs.anu.edu.au/code-creativity-culture/news/2020/07/24/anu-extension-creative-computing.html&quot;&gt;on
the&lt;/a&gt;.&lt;/p&gt;</content><author><name>Ben Swift</name></author><category term="reimagine" /><category term="ccc" /><summary type="html"></summary></entry><entry><title type="html">Parental leave, take 2</title><link href="https://benswift.me/blog/2020/09/08/parental-leave-take-2/" rel="alternate" type="text/html" title="Parental leave, take 2" /><published>2020-09-08T00:00:00+10:00</published><updated>2020-09-08T00:00:00+10:00</updated><id>https://benswift.me/blog/2020/09/08/parental-leave-take-2</id><content type="html" xml:base="https://benswift.me/blog/2020/09/08/parental-leave-take-2/">&lt;p&gt;Our family has recently &lt;a href=&quot;https://github.com/benswift/benswift.github.io/commit/eb7fd10ac87c1059047e6e25783db01847c73e17&quot;&gt;grown by one
member&lt;/a&gt;.
I’m proud and exhausted and happy; it’s a really wild (and mostly very nice)
cocktail of feelings. If you &lt;a href=&quot;https://twitter.com/benswift/status/1301318122356396038&quot;&gt;follow me on
twitter&lt;/a&gt; you might have
already heard this exciting news.&lt;/p&gt;

&lt;p&gt;Anyway, I’m taking advantage of the ANU’s fantastic parental leave for the
second time, and so I’ll be a full-time Dad for the rest of the year. My
approach to answering my emails and doing work stuff will be &lt;a href=&quot;/blog/2019/02/26/on-parental-leave-and-auto-reply-messages/&quot;&gt;pretty much the
same as last time&lt;/a&gt;, so I’m sorry
if you were relying on me for something work-related in the near future. I’ll be
back in 2021 refreshed and ready to be part of the ANU CS team and the &lt;a href=&quot;https://cs.anu.edu.au/code-creativity-culture/&quot;&gt;c/c/c
studio&lt;/a&gt;.&lt;/p&gt;</content><author><name>Ben Swift</name></author><summary type="html">Our family has recently grown by one member. I’m proud and exhausted and happy; it’s a really wild (and mostly very nice) cocktail of feelings. If you follow me on twitter you might have already heard this exciting news.</summary></entry><entry><title type="html">mbsync v1.3.2 breaking change: `SubFolders` config required</title><link href="https://benswift.me/blog/2020/07/17/mbsync-v1-3-2-breaking-change/" rel="alternate" type="text/html" title="mbsync v1.3.2 breaking change: `SubFolders` config required" /><published>2020-07-17T00:00:00+10:00</published><updated>2020-07-17T00:00:00+10:00</updated><id>https://benswift.me/blog/2020/07/17/mbsync-v1-3-2-breaking-change</id><content type="html" xml:base="https://benswift.me/blog/2020/07/17/mbsync-v1-3-2-breaking-change/">&lt;p&gt;As part of my ongoing quest to Emacs-all-the-things, I’m a long-time satisfied
user of the &lt;a href=&quot;https://www.djcbsoftware.nl/code/mu/&quot;&gt;mu&lt;/a&gt; email client. I even
&lt;a href=&quot;https://github.com/djcb/mu/pull/1725&quot;&gt;wrote the latest CI infrastructure setup&lt;/a&gt;
for the project as a way to give back to Dirk-Jan and the rest of the awesome mu
team.&lt;/p&gt;

&lt;p&gt;Anyway, mu doesn’t care how you get your email onto your machine (i.e. into your
&lt;code&gt;~/Maildir&lt;/code&gt;), and so for that task I use
&lt;a href=&quot;http://isync.sourceforge.net/mbsync.html&quot;&gt;isync/mbsync&lt;/a&gt; to download my mail
(via IMAP) from &lt;a href=&quot;https://www.fastmail.com/&quot;&gt;fastmail&lt;/a&gt;. My fastmail &lt;a href=&quot;https://github.com/benswift/.dotfiles/blob/master/mbsyncrc&quot;&gt;config is
online&lt;/a&gt; if you want
to see how I set it all up.&lt;/p&gt;

&lt;p&gt;Everything was working swimmingly, until a recent patch version update to mbsync
(1.3.1 -&amp;gt; 1.3.2) broke things. All of a sudden, I started getting errors saying
&lt;em&gt;Maildir error: found subfolder ‘INBOX/Sent Items’, but store ‘fastmail-local’
does not specify SubFolders style&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;There was no mention of a breaking change relating to &lt;code&gt;SubFolders&lt;/code&gt; style in the
&lt;a href=&quot;https://sourceforge.net/projects/isync/files/isync/1.3.2/&quot;&gt;v1.3.2 release
notes&lt;/a&gt;, but a look at
the manual with &lt;code&gt;man mbsync&lt;/code&gt; revealed this info:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;SubFolders&lt;/strong&gt; &lt;code&gt;Verbatim|Maildir++|Legacy&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;The on-disk folder naming style used for hierarchical mailboxes. This option
has no effect when &lt;code&gt;Flatten&lt;/code&gt; is used. Suppose mailboxes with the canonical
paths &lt;code&gt;top/sub/subsub&lt;/code&gt; and &lt;code&gt;INBOX/sub/subsub&lt;/code&gt;, the styles will yield the
following on-disk paths:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;em&gt;Verbatim&lt;/em&gt; - &lt;code&gt;Path/top/sub/subsub&lt;/code&gt; and &lt;code&gt;Inbox/sub/subsub&lt;/code&gt; (this is the style
you probably want to use)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;em&gt;Maildir++&lt;/em&gt; - &lt;code&gt;Inbox/.top.sub.subsub&lt;/code&gt; and &lt;code&gt;Inbox/..sub.subsub&lt;/code&gt; (this style
is compatible with Courier and Dovecot - but note that the mailbox metadata
format is not compatible). Note that attempts to set Path are rejected in
this mode.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;em&gt;Legacy&lt;/em&gt; - &lt;code&gt;Path/top/.sub/.subsub&lt;/code&gt; and &lt;code&gt;Inbox/.sub/.subsub&lt;/code&gt; (this is
mbsync’s historical style)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;em&gt;Default&lt;/em&gt;: unset; will error out when sub-folders are encountered&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By setting &lt;code&gt;SubFolders Verbatim&lt;/code&gt; in my &lt;code&gt;.mbsyncrc&lt;/code&gt; things started working again.
Hooray!&lt;/p&gt;

&lt;p&gt;Of course, it might be the case that this was all documented somewhere, or that
I’m just &lt;a href=&quot;https://knowyourmeme.com/memes/youre-doing-it-wrong&quot;&gt;doing it wrong&lt;/a&gt;.
But I hope that this is helpful for anyone who runs into the same issue, because
having your email break is &lt;em&gt;super&lt;/em&gt; frustrating; email is such a crucial part of
my (and everyone’s) job, so it just needs to work.&lt;/p&gt;

&lt;h3 id=&quot;bonus-pretty-mu4e-mbsync-filter&quot;&gt;Bonus: pretty mu4e mbsync filter&lt;/h3&gt;

&lt;p&gt;If you are using the same mu &amp;amp; mbsync combo for email, then you might find the
following elisp snippet handy. It does some cool tricks with the
&lt;code&gt;mu4e~get-mail-process-filter&lt;/code&gt; so that the “in-progress” output from mu, which
looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;C: 1/1  B: 0/0  M: +0/0 *0/0 #0/0  S: +0/0 *0/0 #0/0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;gets pretty colours in your &lt;code&gt;*mu4e-update*&lt;/code&gt; buffer. It’s purely cosmetic, but I
care about that stuff, and you (maybe?) should too. Anyway, here’s the relevant
elisp to put in your Emacs init file.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-scheme&quot;&gt;(defun mu4e-pretty-mbsync-process-filter (proc msg)
  (ignore-errors
    (with-current-buffer (process-buffer proc)
      (let ((inhibit-read-only t))
        (delete-region (point-min) (point-max))
        (insert (car (reverse (split-string msg &quot;\r&quot;))))
        (when (re-search-backward &quot;\\(C:\\).*\\(B:\\).*\\(M:\\).*\\(S:\\)&quot;)
          (add-face-text-property
           (match-beginning 1) (match-end 1) 'font-lock-keyword-face)
          (add-face-text-property
           (match-beginning 2) (match-end 2) 'font-lock-function-name-face)
          (add-face-text-property
           (match-beginning 3) (match-end 3) 'font-lock-builtin-face)
          (add-face-text-property
           (match-beginning 4) (match-end 4) 'font-lock-type-face))))))

(advice-add
 'mu4e~get-mail-process-filter
 :override #'mu4e-pretty-mbsync-process-filter)
&lt;/code&gt;&lt;/pre&gt;</content><author><name>Ben Swift</name></author><category term="tools" /><category term="emacs" /><summary type="html">As part of my ongoing quest to Emacs-all-the-things, I’m a long-time satisfied user of the mu email client. I even wrote the latest CI infrastructure setup for the project as a way to give back to Dirk-Jan and the rest of the awesome mu team.</summary></entry><entry><title type="html">ACMC2020: tools for organising a virtual conference</title><link href="https://benswift.me/blog/2020/07/15/acmc2020-organising-my-first-virtual-conference/" rel="alternate" type="text/html" title="ACMC2020: tools for organising a virtual conference" /><published>2020-07-15T00:00:00+10:00</published><updated>2020-07-15T00:00:00+10:00</updated><id>https://benswift.me/blog/2020/07/15/acmc2020-organising-my-first-virtual-conference</id><content type="html" xml:base="https://benswift.me/blog/2020/07/15/acmc2020-organising-my-first-virtual-conference/">&lt;p&gt;I’ve been a bit quiet on this blog for the last few weeks&lt;sup id=&quot;fnref:weeks&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:weeks&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; because I’ve
been organising &lt;a href=&quot;https://acmc2020.com/&quot;&gt;ACMC2020&lt;/a&gt;: the &lt;em&gt;2020 Australasian Computer
Music Conference&lt;/em&gt;. From the conference landing page:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;This year’s conference theme is &lt;strong&gt;inclusion&lt;/strong&gt;. We want to highlight the
diverse range of people who contribute to Australia’s computer/electronic
music culture but may not normally attend an academic conference, including
artists and scholars who are young/emerging, from regional/remote areas, who
have a disability, who are First Nations People, who have low/no income, who
are engaged in community music making, or who simply work outside of academia
and mainstream institutions.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Well, the conference is now all done for 2020 (although the videos are still
freely available online; check out our
&lt;a href=&quot;https://www.youtube.com/watch?v=v6muRCIp3Kg&amp;amp;list=PL4_Bp-PE5_5sgaN4pIzrz0KGBn0RXramC&quot;&gt;keynotes&lt;/a&gt;).
It’s been a lot of hard work, but the ACMC community are &lt;em&gt;amazing&lt;/em&gt;, so it’s been
pretty fun as well. A special shout out to the rest of the ACMC &lt;a href=&quot;https://acmc2020.com/#Organisers&quot;&gt;organising
committee&lt;/a&gt; (Charles, Nat, Sia, Kit &amp;amp; Alec) for
all their hard work—thanks team :) So even though I’m writing this blog post,
these decisions &amp;amp; reflections are really the result of our combined labour, as
well as feedback from the ACMC community during the conference.&lt;/p&gt;

&lt;div id=&quot;toc&quot;&gt;

  &lt;h2&gt;table of contents&lt;/h2&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#tools-for-running-an-online-conference-in-2020&quot; id=&quot;markdown-toc-tools-for-running-an-online-conference-in-2020&quot;&gt;Tools for running an online conference in 2020&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#website&quot; id=&quot;markdown-toc-website&quot;&gt;Conference website&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#easychair&quot; id=&quot;markdown-toc-easychair&quot;&gt;Submissions &amp;amp; peer review&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#google-docs&quot; id=&quot;markdown-toc-google-docs&quot;&gt;Scheduling/programming the sessions&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#youtube&quot; id=&quot;markdown-toc-youtube&quot;&gt;Video presentations&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#discord&quot; id=&quot;markdown-toc-discord&quot;&gt;Q&amp;amp;A and discussion&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#going-to-the-pub-after-the-session&quot; id=&quot;markdown-toc-going-to-the-pub-after-the-session&quot;&gt;Going to the pub after the session&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;

&lt;h2 id=&quot;tools-for-running-an-online-conference-in-2020&quot;&gt;Tools for running an online conference in 2020&lt;/h2&gt;

&lt;p&gt;This post isn’t about the success (or otherwise) of ACMC2020 as an inclusive,
affirming computer music conference. I care about that a lot, and that post is
in the works, but this isn’t it.&lt;/p&gt;

&lt;p&gt;Instead, this post is a list of all the tools that we chose to use to put it all
together, and the rationale behind those decisions. There are lots of people all
around the world organising virtual conferences right now, so hopefully writing
down our experiences is helpful.&lt;/p&gt;

&lt;p&gt;As the hosts of a virtual ACMC, our priorities were:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;to minimise the risk technical difficulties, “live” activities were limited
to those where they add value (for example all talks were pre-recorded &amp;amp;
watched on YouTube to avoid the technical issues which come with live
screen-shared zoom presentations)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;use synchronous communication modes for discussion and q&amp;amp;a, but with
persistence: leave participants the option of returning to a discussion later
(or for leaving a question for a presenter in a different timezone, to be
answered at a friendlier time for them)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;where possible, use low-cost (because the ACMC doesn’t have a huge budget)
and open-source tools (so that the things we learn can be built upon by
others)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;automate all the things; it probably goes without saying if you know me or
read my blog, but manual work makes me sad and continuous integration
pipelines make me happy ☺&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p class=&quot;hl-para&quot;&gt;&lt;strong&gt;tl;dr&lt;/strong&gt; we used &lt;a href=&quot;https://easychair.org/&quot;&gt;EasyChair&lt;/a&gt; for submissions &amp;amp; peer
review, a &lt;a href=&quot;https://github.com/australasian-computer-music-association/acmc2020&quot;&gt;customised version of
ICLR’s&lt;/a&gt;
website, &lt;a href=&quot;https://support.google.com/youtube/answer/9080341?hl=en&quot;&gt;YouTube
premiere&lt;/a&gt;, and
&lt;a href=&quot;https://discord.com/&quot;&gt;Discord&lt;/a&gt; for text/voice discussion and q&amp;amp;a&lt;/p&gt;

&lt;h3 id=&quot;website&quot;&gt;Conference website&lt;/h3&gt;

&lt;p&gt;Initially we threw up simple &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; site (hosted using
GitHub Pages) with the basic conference info &amp;amp; Call for Papers. This was
super-easy and did the job through the initial phase of advertising the
conference and drumming up submissions.&lt;/p&gt;

&lt;p&gt;Around the time we were finalising the accepted papers &amp;amp; conference schedule,
the ICLR team &lt;a href=&quot;https://news.ycombinator.com/item?id=23282113&quot;&gt;posted on HN&lt;/a&gt; that
the tooling for their &lt;a href=&quot;https://iclr.cc/virtual_2020/index.html&quot;&gt;virtual
conference&lt;/a&gt; was newly &lt;a href=&quot;https://github.com/Mini-Conf/Mini-Conf&quot;&gt;available on
GitHub&lt;/a&gt;. We decided to use it as a
starting point for building the ACMC2020 conference website.&lt;/p&gt;

&lt;p&gt;The final version of the ACMC site is still live (and will remain so for a while
at least) at &lt;a href=&quot;https://acmc2020.com/&quot;&gt;https://acmc2020.com/&lt;/a&gt;, and the &lt;a href=&quot;https://github.com/australasian-computer-music-association/acmc2020&quot;&gt;source is up on
GitHub&lt;/a&gt; as
well.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/acmc-website-words-sounds-screenshot.png&quot; alt=&quot;ACMC website screenshot&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;reflections&quot;&gt;Reflections&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;in the end I think it looked really great (and we received some &lt;a href=&quot;https://twitter.com/benswift/status/1280746825637453824&quot;&gt;nice
feedback&lt;/a&gt; from the
creators of the template) but it was &lt;a href=&quot;https://github.com/australasian-computer-music-association/acmc2020/pulse&quot;&gt;a lot of
work&lt;/a&gt;
requiring a non-trivial amount of web development experience to get it to that
point (Charles Martin helped a lot with this)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;a static site which is automatically populated based on data in a CSV or YAML
file is a good option—it means as long as whatever system you’re using to
organise &amp;amp; schedule the accepted papers can output a &lt;code&gt;.csv&lt;/code&gt; file you can
probably make it work with this website template&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;if I had my time again, I’m undecided as to whether I’d use the same
&lt;a href=&quot;https://github.com/Mini-Conf/Mini-Conf&quot;&gt;Mini-Conf&lt;/a&gt; template as a starting
point, or just write a new Jekyll plugin which adds similar features (and just
has a more mature docs/ecosystem for static site building)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;easychair&quot;&gt;Submissions &amp;amp; peer review&lt;/h3&gt;

&lt;p&gt;We used &lt;a href=&quot;https://easychair.org/&quot;&gt;EasyChair&lt;/a&gt; for conference submissions,
partially because the small-ish size of the conference meant that we were able
to sneak in under the limits for their free tier. While the reviewing &amp;amp; final
decisions were done through EasyChair, at the end of that process we exported
all the accepted submissions as a big &lt;code&gt;.csv&lt;/code&gt; file (which we imported into Google
Docs—see below).&lt;/p&gt;

&lt;h4 id=&quot;reflections-1&quot;&gt;Reflections&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;since the &lt;a href=&quot;http://computermusic.org.au/&quot;&gt;ACMA&lt;/a&gt; has its roots in academia, the
majority of the audience for this conference are familiar with the whole “call
for papers -&amp;gt; peer review -&amp;gt; notification -&amp;gt; conference attendance” thing,
however there were certainly people for whom this process was unfamiliar and a
bit daunting (so we need to provide more guidance for those folks next time)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;EasyChair sucks, but the others (&lt;a href=&quot;https://new.precisionconference.com/&quot;&gt;Precision
Conference&lt;/a&gt;,
&lt;a href=&quot;https://cmt3.research.microsoft.com/&quot;&gt;CMT&lt;/a&gt;) suck too, so I wouldn’t strongly
push people one way on the other on this part of the process—as long as your
choice allows you to export all accepted submissions &amp;amp; their metadata in some
sort of machine-readable format (e.g. CSV, YAML)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;google-docs&quot;&gt;Scheduling/programming the sessions&lt;/h3&gt;

&lt;p&gt;EasyChair worked fine for distributing the submissions for peer review &amp;amp;
selecting the ones we wanted in the conference. It doesn’t really have a nice
story for how to organise those submissions into a coherent conference program.&lt;/p&gt;

&lt;p&gt;To do this, we used a shared Google Docs spreadsheet. Starting with the CSV
export from EasyChair, the ACMC committee added columns about which
presentations should go in which sessions and in which order. To get this data
into the &lt;a href=&quot;#website&quot;&gt;conference website&lt;/a&gt; we needed to manually “Download as
&lt;code&gt;.csv&lt;/code&gt;”, then copy the file into the &lt;code&gt;sitedata&lt;/code&gt; folder ready to be picked up by
the next build of the conference website.&lt;/p&gt;

&lt;h4 id=&quot;reflections-2&quot;&gt;Reflections&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;ACMA is lucky that &lt;em&gt;most&lt;/em&gt; of our community&lt;sup id=&quot;fnref:chronodiversity&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:chronodiversity&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; is based in
Australia across a relatively small range of timezones—if you’re running an
international conference then you need to think about the chronodiversity of
your participants when you’re scheduling your conference sessions (my
colleague &lt;a href=&quot;https://twitter.com/stevemblackburn&quot;&gt;Steve Blackburn&lt;/a&gt; has a
blogpost in the works about this)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;this step required the most manual work (in particular the manual “Download as
&lt;code&gt;.csv&lt;/code&gt;” step) which was certainly a hassle in the early stages of the
scheduling process when things are changing a lot, however the convenience &amp;amp;
familiarity of a spreadsheet was a net win&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;the &lt;a href=&quot;#website&quot;&gt;website infrastructure&lt;/a&gt; has a place for putting python scripts,
and &lt;a href=&quot;https://github.com/australasian-computer-music-association/acmc2020/blob/master/scripts/process_videos.py&quot;&gt;we used this a
lot&lt;/a&gt;
to run consistency checks &amp;amp; other helpful analyses (because checking stuff
with scripts is way more fun than checking it by eye, and &lt;em&gt;probably&lt;/em&gt; a
time-saver…)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;youtube&quot;&gt;Video presentations&lt;/h3&gt;

&lt;p&gt;All the AV content for the conference was streamed to “attendees” on YouTube.
ACMC isn’t a traditional academic conference—there are audiovisual computer
music performances alongside more traditional paper presentations—but we put
everything on YouTube nonetheless.&lt;/p&gt;

&lt;p&gt;A couple of the performances were livestreamed, but for the majority of the
conference program participants were asked to submit a video representing their
performance or paper presentation. Then, an &lt;a href=&quot;https://github.com/australasian-computer-music-association/acmc2020/blob/master/scripts/process_videos.py&quot;&gt;elaborate series of ffmpeg
scripts&lt;/a&gt;&lt;sup id=&quot;fnref:ffmpeg&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:ffmpeg&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;
concatenated the videos to produce a single video per session, with consistent
“titlecards” announcing the authors &amp;amp; title of each new video in the session.&lt;/p&gt;

&lt;p&gt;Each session video was uploaded to YouTube, and scheduled for “simultaneous
viewing” at the scheduled time using the &lt;a href=&quot;https://support.google.com/youtube/answer/9080341?hl=en&quot;&gt;YouTube
Premiere&lt;/a&gt; feature.
After the Premiere, the videos were (still are) left up on the &lt;a href=&quot;https://www.youtube.com/channel/UCKK95K68yVuok-qWNS4Z6Jw&quot;&gt;ACMC
YouTube&lt;/a&gt; for people to
catch up &amp;amp; watch at their leisure.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/acmc-youtube-screenshot.png&quot; alt=&quot;ACMC YouTube channel screenshot&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;reflections-3&quot;&gt;Reflections&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;outsourcing the video delivery to YouTube (who, regardless of what you think
of their business model, are &lt;strong&gt;really good&lt;/strong&gt; at delivering video) saved
so much stress&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;the ability to upload &amp;amp; schedule the video ahead of time but still watch it
all-together allows for synchronous discussion and q&amp;amp;a amongst attendees&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;when the premiere is done, you don’t have to “put the videos online for those
who missed them”; they’re already there (which is &lt;em&gt;so much easier&lt;/em&gt; than having
to make talk recordings, edit them together, and then upload them somewhere)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;YouTube’s analytics are also really good, if you’re into that sort of thing,
and you even get stuff like half-decent automatic subtitling and other
accessibility wins&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;it’s hard to know what sort of viewership counts as “successful”, but the ACMC
conference videos (in total) are currently at 2.2k views and ~500h watch time&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;in terms of wranging the videos pre-upload, &lt;a href=&quot;https://ffmpeg.org/&quot;&gt;&lt;code&gt;ffmpeg&lt;/code&gt;&lt;/a&gt; is
&lt;em&gt;amazing&lt;/em&gt; for dealing with all the weird audio/video formats that presenters
will send you, however until you grok that each &lt;code&gt;ffmpeg&lt;/code&gt; run is actually
setting up a graph of audio &amp;amp; video sinks, sources &amp;amp; filters you’re doomed to
copy-paste stuff from StackOverflow and then stare in bewilderment at cryptic
error messages (trust me… I learned this the hard way 😢)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;not all presenters&lt;sup id=&quot;fnref:acmc-presenters&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:acmc-presenters&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt; at an academic conference have the skills
(or the inclination) to create an engaging video of their work, so depending
on your community you might see the occasional “monotone drone over text
slides” presentation (but you’d get bad presentations at an in-person
conference as well)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;discord&quot;&gt;Q&amp;amp;A and discussion&lt;/h3&gt;

&lt;p&gt;ACMC2020 went all in on text-based chat using &lt;a href=&quot;https://discord.com/&quot;&gt;Discord&lt;/a&gt;
(we created our own ACMC2020 Discord server and sent an invite link to all
conference participants). YouTube is great for one-way one-to-many broadcasting,
but not so great for two-way communication, and especially not many-to-many
interaction &amp;amp; discussion. And having all the discussion for the whole conference
(with the ability to &lt;code&gt;@mention&lt;/code&gt; participants across sessions) in one place
helped with the feeling that this was a single event, rather than just a series
of disconnected YouTube videos.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/acmc-discord-screenshot.png&quot; alt=&quot;ACMC Discord channel screenshot&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;reflections-4&quot;&gt;Reflections&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;live video chat can be great for situations where everyone already knows
everyone else, but video (and even audio) can be a bit intimidating for
newcomers to a community, and we wanted to make the q&amp;amp;a as inclusive as
possible&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;we considered Zoom, but it’s really a video platform—as a text chat platform
it’s really bad (no persistent discussions, no ability to mention other
participants, no emoji/reaction gifs, etc.)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;within the ACMC2020 Discord server, we created a separate “channel” for each
conference session, where the live discussion would happen (all presenters
would hang out in that channel during the session), but this also allowed for
persistent session-specific questions to be asked and returned to later with
more thoughtful answers (or to get around timezone differences)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://slack.com/&quot;&gt;Slack&lt;/a&gt; would have probably worked similarly well to
Discord, but we liked the fact that Discord makes it easy to jump into an
“audio” chat—this was particularly useful for the keynote q&amp;amp;a sessions where
the session chair could collate the questions from the text chat, but the
speaker could respond using audio rather than having to type out their answers&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;going-to-the-pub-after-the-session&quot;&gt;Going to the pub after the session&lt;/h3&gt;

&lt;p&gt;Sadly, the ACMC committee never found out a good way of recreating this part of
the usual conference experience at an online conference. Some folks who were
geographically co-located did get together and watch some of the streams
together, but the recent &lt;a href=&quot;https://www.abc.net.au/news/2020-07-07/metropolitan-melbourne-suburbs-back-in-coronavirus-lockdown/12431564&quot;&gt;Melbourne covid19
lockdown&lt;/a&gt;
meant that some people couldn’t even do that.&lt;/p&gt;

&lt;h4 id=&quot;reflections-5&quot;&gt;Reflections&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;some aspects of the online conference that I prefer, the ACMC community still
needs to have some way of getting together in person to solidify the
relationships which developed over the course of ACMC2020&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:weeks&quot; role=&quot;doc-endnote&quot;&gt;

      &lt;p&gt;well, it’s actually pretty common that I’m quiet for a few weeks, so I
guess it’s business as usual &lt;a href=&quot;#fnref:weeks&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:chronodiversity&quot; role=&quot;doc-endnote&quot;&gt;

      &lt;p&gt;actually, we did have some overseas participants, and the async nature of
the &lt;a href=&quot;#discord&quot;&gt;Discord chat&lt;/a&gt; meant that people could mention them in their
questions in the text chat, and they could log in at a later time to provide
answers—this worked really well on a few occasions &lt;a href=&quot;#fnref:chronodiversity&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:ffmpeg&quot; role=&quot;doc-endnote&quot;&gt;

      &lt;p&gt;while this worked really nicely in the end, those scripts probably took me
as much time to get right as the rest of the website stuff combined 😞 &lt;a href=&quot;#fnref:ffmpeg&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:acmc-presenters&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;actually, all the ACMC presenters were great this year ☺ &lt;a href=&quot;#fnref:acmc-presenters&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Ben Swift</name></author><category term="web" /><category term="tools" /><summary type="html">I’ve been a bit quiet on this blog for the last few weeks[^weeks] because I’ve been organising ACMC2020: the 2020 Australasian Computer Music Conference. From the conference landing page:</summary></entry><entry><title type="html">LENS 2020 final gig stream tomorrow at 8pm</title><link href="https://benswift.me/blog/2020/06/11/lens-2020-final-gig-stream-tomorrow-at-8pm/" rel="alternate" type="text/html" title="LENS 2020 final gig stream tomorrow at 8pm" /><published>2020-06-11T00:00:00+10:00</published><updated>2020-06-11T00:00:00+10:00</updated><id>https://benswift.me/blog/2020/06/11/lens-2020-final-gig-stream-tomorrow-at-8pm</id><content type="html" xml:base="https://benswift.me/blog/2020/06/11/lens-2020-final-gig-stream-tomorrow-at-8pm/">&lt;p&gt;&lt;img src=&quot;/assets/images/posts/lens2020-final-gig-poster.jpg&quot; alt=&quot;LENS S1 2020 final gig poster&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you’re stuck at home this Friday night (or if you’ve got a good mobile data
package) then you should tune in to see the final gig from the &lt;em&gt;LENS: ANU Laptop
Ensemble&lt;/em&gt; S1 2020 cohort.&lt;/p&gt;

&lt;p&gt;Gig details are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;date&lt;/strong&gt;: Friday June 12&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;time&lt;/strong&gt;: 8pm–10pm AEST&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;location&lt;/strong&gt;: live on the &lt;a href=&quot;https://www.youtube.com/channel/UCIU6SqIS02GJlnLOPqlwmpA&quot;&gt;LENS YouTube channel &lt;svg class=&quot;icon&quot;&gt;&lt;use xlink:href=&quot;#fab.fa-youtube&quot;&gt;&lt;/use&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Even if you miss the live event, you can still watch the video anytime. Like and subscribe!&lt;/p&gt;

&lt;p&gt;There’s also a &lt;a href=&quot;https://www.facebook.com/events/2563515850576414&quot;&gt;Facebook
event&lt;/a&gt; if you’re into that
sort of thing.&lt;/p&gt;</content><author><name>Ben Swift</name></author><category term="livecoding" /><category term="ccc" /><category term="lens" /><category term="gigs" /><summary type="html"></summary></entry><entry><title type="html">Two-way OSC communication between Extempore and Pd</title><link href="https://benswift.me/blog/2020/04/30/two-way-osc-communication-between-extempore-and-pd/" rel="alternate" type="text/html" title="Two-way OSC communication between Extempore and Pd" /><published>2020-04-30T00:00:00+10:00</published><updated>2020-04-30T00:00:00+10:00</updated><id>https://benswift.me/blog/2020/04/30/two-way-osc-communication-between-extempore-and-pd</id><content type="html" xml:base="https://benswift.me/blog/2020/04/30/two-way-osc-communication-between-extempore-and-pd/">&lt;p&gt;Because &lt;a href=&quot;https://github.com/digego/extempore&quot;&gt;Extempore&lt;/a&gt; and
&lt;a href=&quot;https://puredata.info&quot;&gt;Pd&lt;/a&gt; are both multimedia programming environments, they
both speak &lt;a href=&quot;https://en.wikipedia.org/wiki/Open_Sound_Control&quot;&gt;OSC&lt;/a&gt; straight out
of the box. If you need to send messages (numbers, strings, other data) from one
program to the other over the local network&lt;sup id=&quot;fnref:lan&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:lan&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; then OSC is a pretty good way
to do it.&lt;/p&gt;

&lt;h2 id=&quot;pd-extempore&quot;&gt;Pd-&amp;gt;Extempore&lt;/h2&gt;

&lt;p&gt;To send OSC messages from Pd to Extempore, you’ll first need to start Extempore,
define a function to act as the OSC callback/handler, and start the OSC server
listening on a particular port.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-xtlang&quot;&gt;;; the name of this function doesn't matter, as long as you specify the same
;; name later when you start the server
(define (osc-receive-handler timestamp address . args)
  (println 'osc-receive-handler address '-&amp;gt; args))

;; start the server listening on port 7009
(io:osc:start-server 7009 &quot;osc-receive-handler&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once you evaluate those lines you’ll see a notification printed in the Extempore
terminal:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Starting OSC server on port: 7009 calling back to osc-receive-handler
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now that Extempore’s listening, you need to send a message with Pd. There’s a
built-in &lt;code&gt;oscformat&lt;/code&gt; object for this. As usual in Pd, the easiest way to see how
it works is to create an &lt;code&gt;oscformat&lt;/code&gt; object, then right-click to open up the
&lt;code&gt;oscformat-help.pd&lt;/code&gt; patch.&lt;/p&gt;

&lt;p&gt;Assuming you’re running Pd on the same computer as the Extempore OSC server you
set up before, you can send your messages to &lt;code&gt;localhost&lt;/code&gt; (look for the &lt;code&gt;connect
localhost 5000&lt;/code&gt; message in the Pd help patch). However, you need to make sure
the ports match—the Extempore server is listening on port &lt;code&gt;7099&lt;/code&gt;, while the
default port number in the &lt;code&gt;oscformat-help.pd&lt;/code&gt; patch is &lt;code&gt;5000&lt;/code&gt; (so you’ll need
to change it before you send that &lt;code&gt;connect message&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Once you’ve done all that, you should be able to trigger the send messages (e.g.
&lt;code&gt;1 2 3&lt;/code&gt;) near the top of the patch. They’ll be received by Extempore and passed
as arguments to the &lt;code&gt;osc-receive-handler&lt;/code&gt; function, which (as defined above)
just prints them to the log, so you’ll see output like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;osc-receive-handler &quot;/cat/horse/pig&quot; -&amp;gt; (1.000000 2.000000 3.000000)
osc-receive-handler &quot;/cat/horse/pig&quot; -&amp;gt; (4.000000 5.000000 &quot;weasel&quot; 6.000000 7.000000 &quot;rat&quot;)
osc-receive-handler &quot;/mouse/banana&quot; -&amp;gt; (1.000000 2.000000 3.000000)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Success! 🙌🎉🙌 Now, re-define your &lt;code&gt;osc-receive-handler&lt;/code&gt; to do something more
interesting and you’re away.&lt;/p&gt;

&lt;h2 id=&quot;extempore-pd&quot;&gt;Extempore-&amp;gt;Pd&lt;/h2&gt;

&lt;p&gt;Sending OSC messages the opposite direction is pretty similar. In this case,
it’s Pd’s &lt;code&gt;oscparse&lt;/code&gt; object that you’ll need. Again, go ahead an open up the
&lt;code&gt;oscparse-help.pd&lt;/code&gt; patch. Find the “packets from network” part of the patch
(again, make note of the port the server is listening on) and send the &lt;code&gt;listen&lt;/code&gt;
message to start Pd listening for incoming OSC messages.&lt;/p&gt;

&lt;p&gt;Then, start Extempore and start a listener again as before. You might not &lt;em&gt;use&lt;/em&gt;
this part if you’re just sending data out of Extempore, but it’s required to set
up some of the internal OSC infrastructure so you need to do it anyway.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-xtlang&quot;&gt;;; the name of this function doesn't matter, as long as you specify the same
;; name later when you start the server
(define (osc-receive-handler timestamp address . args)
  (println 'osc-receive-handler address '-&amp;gt; args))

;; start the server listening on port 7009
(io:osc:start-server 7009 &quot;osc-receive-handler&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, it’s a one-liner to send an OSC message to a particular host &amp;amp; port:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-xtlang&quot;&gt;(io:osc:send (now) (cons &quot;localhost&quot; 7010) &quot;/test/msg&quot; &quot;Hello&quot; 500 6.6 &quot;World&quot; (random 10))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After the address argument (in this case &lt;code&gt;&quot;/test/msg&quot;&lt;/code&gt;) you can supply as many
arguments as you like—you just need to make sure you unpack them properly on
the Pd side.&lt;/p&gt;

&lt;p&gt;This time, if the messages gets through ok you’ll see the message received in
your Pd log view, with stuff like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;parse-output: list test msg Hello 500 6.6 World 8
parse-output: list test msg Hello 500 6.6 World 0
parse-output: list test msg Hello 500 6.6 World 9
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;…plus a bunch more debugging output from the &lt;code&gt;oscparse-help.pd&lt;/code&gt; patch.&lt;/p&gt;

&lt;p&gt;As in the Pd-&amp;gt;Extempore case, you’re sending the message to localhost, so if
Extempore and Pd are running on the same machine then you’ll be golden. If
you’re on a LAN, you’d need to specify the host &amp;amp; port with something like
&lt;code&gt;(cons &quot;192.168.11.15&quot; 7011)&lt;/code&gt; or whatever.&lt;/p&gt;

&lt;p&gt;The one other thing to note about the &lt;code&gt;io:osc:send&lt;/code&gt; function is that the first
argument is a &lt;em&gt;time&lt;/em&gt; argument. If you wanted to, e.g. send a message with a
2-second delay after evaluating that line, you could do something like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-xtlang&quot;&gt;(io:osc:send (+ (now) (* *second* 2)) (cons &quot;localhost&quot; 7010) &quot;/test/msg&quot; &quot;Hello&quot; 500 6.6 &quot;World&quot; (random 10))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For a deeper dive on how time is handled in Extempore, see the &lt;a href=&quot;https://extemporelang.github.io/docs/overview/time/&quot;&gt;Extempore
docs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Happy OSCing 😊&lt;/p&gt;
&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:lan&quot; role=&quot;doc-endnote&quot;&gt;

      &lt;p&gt;even if you’re on a WAN, there are ways to do it—but you might have to
deal with some packet loss and
&lt;a href=&quot;https://en.wikipedia.org/wiki/Network_address_translation&quot;&gt;NAT&lt;/a&gt; issues &lt;a href=&quot;#fnref:lan&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Ben Swift</name></author><category term="extempore" /><category term="lens" /><summary type="html">Because Extempore and Pd are both multimedia programming environments, they both speak OSC straight out of the box. If you need to send messages (numbers, strings, other data) from one program to the other over the local network[^lan] then OSC is a pretty good way to do it.</summary></entry></feed>