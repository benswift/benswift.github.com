<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="https://benswift.me/feed.xml" rel="self" type="application/atom+xml" /><link href="https://benswift.me/" rel="alternate" type="text/html" /><updated>2019-01-17T17:13:40+11:00</updated><id>https://benswift.me/feed.xml</id><title type="html">benswift.me</title><subtitle>livecoder &amp; researcher homepage - code, creativity, culture</subtitle><author><name>Ben Swift</name></author><entry><title type="html">highlight.js with xtlang support</title><link href="https://benswift.me/2019/01/17/highlight-js-with-xtlang-support.html" rel="alternate" type="text/html" title="highlight.js with xtlang support" /><published>2019-01-17T10:54:00+11:00</published><updated>2019-01-17T10:54:00+11:00</updated><id>https://benswift.me/2019/01/17/highlight-js-with-xtlang-support</id><content type="html" xml:base="https://benswift.me/2019/01/17/highlight-js-with-xtlang-support.html">&lt;blockquote&gt;
  &lt;p&gt;It is a truth, universally acknowledged, that all programming language authors
must also be expert web developers.    &lt;strong&gt;Jane Austen&lt;/strong&gt; &lt;em&gt;(probably)&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I’ve just spend a solid day wrestling with source code syntax highlighting on my
blog, and I’ve finally got it figured out. To wit:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-armasm&quot;&gt;labelious:
  sub r0, 1
  bne doneski
  b labelious

doneski:
  nop
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I know you’ve got questions, so the rest of this post will be structured as an
&lt;strong&gt;FAQ&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;faq&quot;&gt;FAQ&lt;/h2&gt;

&lt;h3 id=&quot;why-did-you-even-do-that-it-seemed-to-be-working-fine-before&quot;&gt;Why did you even do that? It seemed to be working fine before.&lt;/h3&gt;

&lt;p&gt;Yes, well, it was mostly working fine. But I was just using an
off-the-shelf&lt;sup id=&quot;fnref:cdn&quot;&gt;&lt;a href=&quot;#fn:cdn&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; disribution of &lt;a href=&quot;https://highlightjs.org/&quot;&gt;highlight.js&lt;/a&gt;,
which supported a bunch of languages, but not all the ones I need. Especially
Extempore, which is super-important for showing off my livecoding stuff on this
blog.&lt;/p&gt;

&lt;h3 id=&quot;does-extemporextlang-have-highlightjs-support-now&quot;&gt;Does Extempore/xtlang have highlight.js support now?&lt;/h3&gt;

&lt;p&gt;Yep, &lt;a href=&quot;https://github.com/cyblue9&quot;&gt;&lt;code&gt;@blue9&lt;/code&gt;&lt;/a&gt; ported the &lt;a href=&quot;https://bitbucket.org/birkenfeld/pygments-main/src/7941677dc77d4f2bf0bbd6140ade85a9454b8b80/pygments/lexers/lisp.py?at=default&amp;amp;fileviewer=file-view-default#lisp.py-2420&quot;&gt;Scheme/xtlang
lexer&lt;/a&gt;
that I wrote for Pygments, which is a &lt;em&gt;big&lt;/em&gt; help to the Extempore community
(thanks &lt;code&gt;blue9&lt;/code&gt;).&lt;/p&gt;

&lt;h3 id=&quot;isnt-it-just-a-matter-of-adding-xtlang-to-the-highlightjs-build-step&quot;&gt;Isn’t it just a matter of adding &lt;code&gt;xtlang&lt;/code&gt; to the highlight.js build step?&lt;/h3&gt;

&lt;p&gt;No, because &lt;a href=&quot;https://github.com/highlightjs/highlightjs-xtlang#usage&quot;&gt;reasons&lt;/a&gt;.
It’s a real mess, and we’re waiting on &lt;a href=&quot;https://github.com/highlightjs/highlight.js/pull/1888&quot;&gt;this
PR&lt;/a&gt; to land before it
gets easier.&lt;/p&gt;

&lt;h3 id=&quot;howd-you-get-it-working-then&quot;&gt;How’d you get it working, then?&lt;/h3&gt;

&lt;p&gt;Hacks upon hacks. If you really wanna know, it’s in &lt;a href=&quot;https://github.com/benswift/benswift.github.io/tree/hljs-with-xtlang&quot;&gt;this
branch&lt;/a&gt;
(although the final product, &lt;code&gt;highlight.pack.js&lt;/code&gt; is in the main &lt;code&gt;source&lt;/code&gt;
branch).&lt;/p&gt;

&lt;p&gt;Basically, I backported the Extempore language support from the new “plugin” way
of doing things (which is better, but doesn’t really work yet) to the old
“built-in” way of doing things, and then generated a new, custom build of
highlight.js which included both xtlang and all the other languages that I need
for my blog.&lt;/p&gt;

&lt;h3 id=&quot;so-can-i-see-some-xtlang-code-then&quot;&gt;So can I see some xtlang code, then?&lt;/h3&gt;

&lt;p&gt;Sure, here’s an example function from
&lt;a href=&quot;https://github.com/digego/extempore/blob/master/examples/core/extempore_lang.xtm&quot;&gt;&lt;code&gt;examples/core/extempore_lang.xtm&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-xtlang&quot;&gt;(bind-func my-test-7
  (lambda ()
	(let ((a:&amp;lt;i64,double&amp;gt;* (alloc)) ; returns pointer to type &amp;lt;i64,double&amp;gt;
		  (b 37)
		  (c 6.4))
	  (tuple-set! a 0 b) ;; set i64 to 64
	  (tset! a 1 c) ;; set double to 6.4 - tset! is an alias for tuple-set!
	  (printf &quot;tuple:1 %lld::%f\n&quot; (tuple-ref a 0) (tref a 1))
	  ;; we can fill a tuple in a single call by using tfill!
	  (tfill! a 77 77.7)
	  (printf &quot;tuple:2 %lld::%f\n&quot; (tuple-ref a 0) (tuple-ref a 1))
	  (tuple-ref a 0)))) ;; return first element which is i64
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;when-will-we-get-this-syntax-colouring-goodness-when-viewing-extempore-code-on-github&quot;&gt;When will we get this syntax colouring goodness when viewing Extempore code on GitHub?&lt;/h3&gt;

&lt;p&gt;GitHub doesn’t use highlight.js, it uses
&lt;a href=&quot;https://github.com/github/linguist&quot;&gt;linguist&lt;/a&gt; for this sort of thing. So
getting it working on GH would involve porting the language definitions to that
project as well.&lt;/p&gt;

&lt;h3 id=&quot;whats-with-the-jane-austen-quote-above-then&quot;&gt;What’s with the Jane Austen quote above, then?&lt;/h3&gt;

&lt;p&gt;Figuring this all out required a lot of digging around in existing packages,
learning a new &lt;a href=&quot;https://www.npmjs.com/package/gear&quot;&gt;node-based build system&lt;/a&gt; and
a bunch of other things. I’m pretty capable with this sort of thing, so I got
there in the end. But it does make me a bit sad that the job of building a
community around a programming language involves so much stuff that doesn’t use
the language itself, and these days invariably involves poking around various
npm packages and staring at the Chrome developer tools.&lt;/p&gt;

&lt;h3 id=&quot;can-i-use-your-build-of-highlightjs-to-font-lock-xtlang-code-on-my-own-site&quot;&gt;Can I use your build of highlight.js to font-lock xtlang code on my own site?&lt;/h3&gt;

&lt;p&gt;Sure, I’d be pumped if you did. If you want, you can check out the
&lt;a href=&quot;https://github.com/benswift/benswift.github.io/tree/hljs-with-xtlang&quot;&gt;&lt;code&gt;hljs-with-xtlang&lt;/code&gt;
branch&lt;/a&gt; of
this repo and follow the instructions therein to make your own custom build. Or,
if you don’t want to do that, you could just use the one you’ve already
downloaded (since you’re visiting this website). Here’s a &lt;a href=&quot;/assets/js/highlight.pack.js&quot;&gt;direct
link&lt;/a&gt; if you want to do
things that way.&lt;/p&gt;
&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:cdn&quot;&gt;
      &lt;p&gt;well, off-the-CDN, anyway &lt;a href=&quot;#fnref:cdn&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Ben Swift</name></author><summary type="html">It is a truth, universally acknowledged, that all programming language authors must also be expert web developers.    Jane Austen (probably)</summary></entry><entry><title type="html">The annual benswift.me re-write: 2019 edition</title><link href="https://benswift.me/2019/01/02/the-annual-benswift-me-re-write-2019-edition.html" rel="alternate" type="text/html" title="The annual benswift.me re-write: 2019 edition" /><published>2019-01-02T17:46:00+11:00</published><updated>2019-01-02T17:46:00+11:00</updated><id>https://benswift.me/2019/01/02/the-annual-benswift-me-re-write-2019-edition</id><content type="html" xml:base="https://benswift.me/2019/01/02/the-annual-benswift-me-re-write-2019-edition.html">&lt;p&gt;Welcome, traveller. You’ve managed to find my blog without being &lt;a href=&quot;http://zork.wikia.com/wiki/Grue&quot;&gt;eaten by a
grue&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I’ve re-written my blog &lt;a href=&quot;/2017/07/06/benswift-me-update-july-2017-edition.html&quot;&gt;again&lt;/a&gt;, because I figure
it’s a good way for me to keep up to date with my web skills. I teach (among
other things) &lt;a href=&quot;https://cs.anu.edu.au/courses/comp1720/&quot;&gt;in-browser code art&lt;/a&gt; for
a living, and students can sniff out a fraud if you’re behind the times.&lt;/p&gt;

&lt;p&gt;I’ve (once again) gone with a &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;-powered static
site. This time, though, I’ve opted for my own lovingly hand-crafted HTML &amp;amp; CSS
rather than one of the out-of-the-box themes. In doing this, I decided on a few
design priorities:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;em&gt;modern&lt;/em&gt; markup: CSS grid &amp;amp; flexbox &lt;strong&gt;all the way&lt;/strong&gt; (sorry if you’re on an old
version of IE)&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;minimal&lt;/em&gt; markup: there’s really not many elements in each page (I wanted to
see how far I could push back against the &lt;code&gt;div&lt;/code&gt; soup that’s so common these
days)&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;semantic&lt;/em&gt; markup: we have &lt;code&gt;nav&lt;/code&gt; and &lt;code&gt;article&lt;/code&gt; and &lt;code&gt;main&lt;/code&gt; and &lt;code&gt;aside&lt;/code&gt;, so
let’s use them&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Typography-wise, I used &lt;a href=&quot;https://twitter.com/rsms&quot;&gt;@rsms&lt;/a&gt;’s new &lt;a href=&quot;https://rsms.me/inter/&quot;&gt;Inter
UI&lt;/a&gt; font family, and I really like it. I’m not a
designer (as you can probably tell) so I kept it simple—one typeface, one
highlight colour, and then I poke around with
&lt;a href=&quot;https://www.sass-lang.com&quot;&gt;Sass’s&lt;/a&gt; colour manipulation functions to get a &lt;em&gt;bit&lt;/em&gt;
more variation.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The verdict&lt;/strong&gt;: I was really pleasantly surprised—it came together in about a
day of hard work. Next time around (i.e. now that I know what I’m doing a bit
more) it’d be even easier. I particularly liked using &lt;a href=&quot;https://css-tricks.com/snippets/css/complete-guide-grid/#prop-grid-template-areas&quot;&gt;grid template
areas&lt;/a&gt;
to draw a little ascii-art diagram of my desired layout. Obviously the layout
for this blog is really boring, but I can imagine this being really handy for
more complex layouts.&lt;/p&gt;

&lt;p&gt;If it’s broken for you and you’re on a modern browser&lt;sup id=&quot;fnref:ie-shade&quot;&gt;&lt;a href=&quot;#fn:ie-shade&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;, then please
&lt;a href=&quot;mailto:ben.swift@anu.edu.au&quot;&gt;let me know&lt;/a&gt; and I’ll try to fix it if I can. I
don’t think I’ve broken any (many) links, but again let me know if you find
something I’ve missed.&lt;/p&gt;

&lt;p&gt;The other thing I really like about this iteration of the annual &lt;code&gt;benswift.me&lt;/code&gt;
redesign is that I finally understand the whole thing. No more magic themes
which I hesitantly poke around in “eye-of-newt” style whenever I want to make
changes, and that’s a nice feeling&lt;sup id=&quot;fnref:control-freak&quot;&gt;&lt;a href=&quot;#fn:control-freak&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;Let me know what you think of my new redesign in the comments. Just
kidding—there are no comments. But do get in touch in some other way (see the
icons at the top for various options).&lt;/p&gt;
&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:ie-shade&quot;&gt;
      &lt;p&gt;that’s my subtle way of throwing shade at IE &lt;a href=&quot;#fnref:ie-shade&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:control-freak&quot;&gt;
      &lt;p&gt;especially if you’re a control freak &lt;a href=&quot;#fnref:control-freak&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Ben Swift</name></author><summary type="html">Welcome, traveller. You’ve managed to find my blog without being eaten by a grue.</summary></entry><entry><title type="html">Another reveal.js plugin for Jekyll</title><link href="https://benswift.me/2018/09/28/another-reveal.js-plugin-for-jekyll.html" rel="alternate" type="text/html" title="Another reveal.js plugin for Jekyll" /><published>2018-09-28T13:42:26+10:00</published><updated>2018-09-28T13:42:26+10:00</updated><id>https://benswift.me/2018/09/28/another-reveal.js-plugin-for-jekyll</id><content type="html" xml:base="https://benswift.me/2018/09/28/another-reveal.js-plugin-for-jekyll.html">&lt;p&gt;I use &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; to create my course websites and
&lt;a href=&quot;https://github.com/hakimel/reveal.js/&quot;&gt;reveal.js&lt;/a&gt; to create my lecture slides.
Both of them are awesome, and allow me to focus on writing (hopefully) great
content, and the formatting/presentation stuff stays out of the way until I &lt;code&gt;git
push&lt;/code&gt; the updates to the server.&lt;/p&gt;

&lt;p&gt;There are a few ways of making these two tools (Jekyll and reveal.js) play
nicely together: see &lt;a href=&quot;https://github.com/dploeger/jekyll-revealjs&quot;&gt;here&lt;/a&gt; and
&lt;a href=&quot;https://medium.com/aerobatic-blog/building-a-reveal-js-presentation-with-jekyll-collections-52bcdba4114a&quot;&gt;here&lt;/a&gt;
for example. However, most of these require you to put each slide in a new &lt;code&gt;.md&lt;/code&gt;
file, which is a pain.&lt;/p&gt;

&lt;p&gt;What I want to do is to write one &lt;code&gt;.md&lt;/code&gt; file per presentation, and have the
sections (separated by &lt;code&gt;##&lt;/code&gt; headings) to determine the slide splits (this is how
&lt;a href=&quot;https://pandoc.org/MANUAL.html#producing-slide-shows-with-pandoc&quot;&gt;pandoc does it&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;I wrote a simple &lt;a href=&quot;https://jekyllrb.com/docs/plugins/&quot;&gt;Jekyll&lt;/a&gt; to make this
happen—which has just a couple of moving parts&lt;/p&gt;

&lt;p class=&quot;hl-para&quot;&gt;Because the source for this &lt;a href=&quot;https://github.com/benswift/benswift.github.io/&quot;&gt;whole blog is on
GH&lt;/a&gt;, then you can just head
there and see it for yourself if you’re the sort of person who prefers reading
code to prose. Think of this blog post as a “companion piece”.&lt;/p&gt;

&lt;h2 id=&quot;the-revealify-filter&quot;&gt;1. the revealify &lt;a href=&quot;https://jekyllrb.com/docs/plugins/filters/&quot;&gt;filter&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;First, put this code into a &lt;code&gt;revealify.rb&lt;/code&gt; file in your Jekyll &lt;code&gt;_plugins&lt;/code&gt;
directory:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;# (c) Ben Swift 2018, MIT Licence
# ben.swift@anu.edu.au

# a liquid filter for turning regular md output into the &amp;lt;section&amp;gt;-enclosed
# chunks required by reveal.js

require 'jekyll'
require 'nokogiri'

module Jekyll

  module Revealify

    def revealify(html)

      # parse content
      content = Nokogiri::HTML.fragment(html)

      # create an empty node
      reveal_div = Nokogiri::HTML.fragment('&amp;lt;div class=&quot;reveal&quot;&amp;gt;&amp;lt;div class=&quot;slides&quot;&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;', 'UTF-8')
      slides_div = reveal_div.search('.slides').first

      content.xpath(&quot;*&quot;).each do |element|

        # &amp;lt;section&amp;gt; elements should be passed through as-is
        if element.matches? &quot;section&quot;
          slides_div.add_child(element.dup)

        else
          # on &quot;split&quot; elements (&amp;lt;h1&amp;gt;, &amp;lt;h2&amp;gt;, &amp;lt;hr&amp;gt;)
          if element.matches? &quot;h1,h2,hr&quot;
            current_section = slides_div.add_child(&quot;&amp;lt;section&amp;gt;&quot;).first
            # hoist all the header's attributes up to the wrapper element
            # not sure if this will always work, but here goes...
            element.keys.each do |attribute|
              # relies on the fact that the &quot;current&quot; wrapper node is the last child in ret
              current_section[attribute] = element[attribute]
              # element.delete attribute
            end
          end

          # add the element to the current &amp;lt;section&amp;gt; (i.e. the current slide)
          # unless it's just an &amp;lt;hr&amp;gt; (which are used for splitting only)
          current_section = slides_div.last_element_child
          current_section.add_child(element.dup) unless element.matches? &quot;hr&quot;
        end

      end

      reveal_div.to_html
    end

  end

end

Liquid::Template.register_filter(Jekyll::Revealify)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;2-add-a-reveal-layout&quot;&gt;2. add a reveal &lt;a href=&quot;https://jekyllrb.com/docs/layouts/&quot;&gt;layout&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;You’ll need a new &lt;a href=&quot;https://jekyllrb.com/docs/layouts/&quot;&gt;layout&lt;/a&gt; as well: create a
&lt;code&gt;reveal.html&lt;/code&gt; file in your Jekyll &lt;code&gt;_layouts&lt;/code&gt; directory and make sure that the
body tag has this in it (you’ll need to make sure it’s got the right paths &amp;amp;
other stuff for your setup). The key part is that first &lt;code&gt;{{ content |
revealify }}&lt;/code&gt; line—that takes the content of your page (the jekyll
&lt;code&gt;.md&lt;/code&gt; file with &lt;code&gt;layout: reveal&lt;/code&gt; in the frontmatter) and passes it through the
filter defined in the &lt;a href=&quot;#the-revealify-filter&quot;&gt;revealify filter&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The configuration stuff here is just the example config from
&lt;a href=&quot;https://github.com/hakimel/reveal.js#configuration&quot;&gt;reveal.js&lt;/a&gt;, so feel free to
tweak to suit your own presentation.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;!-- this is where the reveailfy filter gets applied --&amp;gt;
{{ content | revealify }}

&amp;lt;!-- load the reveal.js source --&amp;gt;
&amp;lt;script src=&quot;/reveal.js-3.6.0/js/reveal.js&quot; type=&quot;text/javascript&quot;&amp;gt;&amp;lt;/script&amp;gt;

&amp;lt;!-- configure the presentation --&amp;gt;
&amp;lt;script&amp;gt;
 Reveal.initialize({

   // Display presentation control arrows
   controls: true,

   // Help the user learn the controls by providing hints, for example by
   // bouncing the down arrow when they first encounter a vertical slide
   controlsTutorial: true,

   // Determines where controls appear, &quot;edges&quot; or &quot;bottom-right&quot;
   controlsLayout: 'bottom-right',

   // Visibility rule for backwards navigation arrows; &quot;faded&quot;, &quot;hidden&quot;
   // or &quot;visible&quot;
   controlsBackArrows: 'faded',

   // Display a presentation progress bar
   progress: true,

   // Display the page number of the current slide
   slideNumber: false,

   // Push each slide change to the browser history
   history: false,

   // Enable keyboard shortcuts for navigation
   keyboard: true,

   // Enable the slide overview mode
   overview: true,

 });
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; I’m ommitting some details here about how to set up everything (e.g.
putting the reveal.js source folder in the right place).&lt;/p&gt;

&lt;h2 id=&quot;3-write-your-slides-as-markdown-content&quot;&gt;3. write your slides as markdown content&lt;/h2&gt;

&lt;p&gt;Finally, write your content as a regular jekyll post which uses the &lt;code&gt;reveal&lt;/code&gt;
layout, e.g.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-md&quot;&gt;---
title: &quot;Week 1: intro&quot;
layout: reveal
---

## Intro

- welcome to the course
- we're gonna learn all the things

## Timeline

- first, we'll sit in boring lectures...
- ... then, there will be a huge exam!

fun times.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, you get all the niceties of the &lt;code&gt;jekyll watch&lt;/code&gt; cycle; livereload,
auto-compilation of scss assets, etc.&lt;/p&gt;

&lt;p&gt;And if you need to do something interesting with the formatting or layout of
your content, then you can just drop straight into writing HTML (as you can
always do in a markdown file).&lt;/p&gt;

&lt;h2 id=&quot;4-write-amazing-content&quot;&gt;4. write amazing content&lt;/h2&gt;

&lt;p&gt;This is the hard part. But at least if you’ve got a nice workflow for actually
turning your content into nice looking slides then you’ve got a head start :)&lt;/p&gt;</content><author><name>Ben Swift</name></author><category term="software" /><summary type="html">I use Jekyll to create my course websites and reveal.js to create my lecture slides. Both of them are awesome, and allow me to focus on writing (hopefully) great content, and the formatting/presentation stuff stays out of the way until I git push the updates to the server.</summary></entry><entry><title type="html">Hosting a self-built jekyll site on GH pages</title><link href="https://benswift.me/2018/06/22/hosting-a-self-built-jekyll-site-on-gh-pages.html" rel="alternate" type="text/html" title="Hosting a self-built jekyll site on GH pages" /><published>2018-06-22T10:40:00+10:00</published><updated>2018-06-22T10:40:00+10:00</updated><id>https://benswift.me/2018/06/22/hosting-a-self-built-jekyll-site-on-gh-pages</id><content type="html" xml:base="https://benswift.me/2018/06/22/hosting-a-self-built-jekyll-site-on-gh-pages.html">&lt;p&gt;This blog is built from &lt;a href=&quot;http://commonmark.org/help/&quot;&gt;markdown&lt;/a&gt; files using
&lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; hosted on &lt;a href=&quot;https://pages.github.com/&quot;&gt;GitHub
pages&lt;/a&gt;, which saves a lot of hassle involved with DIY
hosting&lt;sup id=&quot;fnref:hassle&quot;&gt;&lt;a href=&quot;#fn:hassle&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;. There are a bunch of &lt;a href=&quot;http://blog.teamtreehouse.com/using-github-pages-to-host-your-website&quot;&gt;useful
tutorials&lt;/a&gt;
on how to set all this up.&lt;/p&gt;

&lt;p&gt;However, I like to have control over which plugins are used, etc. which GitHub
pages doesn’t let you do. What it (GH pages) &lt;em&gt;does&lt;/em&gt; let you do, though, is dump
a bunch of files (html, js, css) in a repo and just serve them as-is. These
files represent the “built” version of your site, not the source, so you’ll
probably want a separate repo for your content (e.g. your markdown files) and
the built site. Handling this stuff can be a hassle, so here’s the &lt;code&gt;Makefile&lt;/code&gt; I
use to make it easy.&lt;/p&gt;

&lt;p&gt;The basic process is:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;create a git repo where you keep your jekyll site (or not, but it’s so nice
to have your blog content under version control)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;create a separate project on GitLab called
&lt;code&gt;$(GH_USERNAME)/$(GH_USERNAME).github.io.git&lt;/code&gt;, but don’t create anything in
there yet&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code&gt;make init&lt;/code&gt; will turn the local jekyll build directory into a git repo&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code&gt;make push&lt;/code&gt; target will build your site (locally) and push it up to GitHub,
where it’ll be served by GitHub pages&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;After that, you can work on, commit &amp;amp; push your blog wherever you like (I
actually keep the content in the &lt;a href=&quot;https://github.com/benswift/benswift.github.io&quot;&gt;same GH
repo&lt;/a&gt;, but in a &lt;code&gt;source&lt;/code&gt; branch)
but you can push the built site to the master branch so GH pages will serve it
up for you.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-make&quot;&gt;BASE_HTML_DIR=_site
GH_USERNAME=benswift # change this to your GH username

all: push

init:
	mkdir -p $(BASE_HTML_DIR) &amp;amp;&amp;amp; cd $(BASE_HTML_DIR) &amp;amp;&amp;amp; git init . &amp;amp;&amp;amp; git remote add origin git@github.com:$(GH_USERNAME)/$(GH_USERNAME).github.io.git

generate-blog:
	bundle exec jekyll build

commit-all: generate-blog
	cd $(BASE_HTML_DIR) &amp;amp;&amp;amp; git add . &amp;amp;&amp;amp; git commit -m &quot;update blog&quot;

push: commit-all
	cd $(BASE_HTML_DIR) &amp;amp;&amp;amp; git push origin master
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:hassle&quot;&gt;

      &lt;p&gt;I know that it’s not actually &lt;em&gt;that&lt;/em&gt; much hassle, especially if you’ve
already got a webserver set up for other reasons, but zero hassle still
beats ε hassle ∀ε&amp;gt;0, especially when there’s other work to be done. &lt;a href=&quot;#fnref:hassle&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Ben Swift</name></author><summary type="html">This blog is built from markdown files using Jekyll hosted on GitHub pages, which saves a lot of hassle involved with DIY hosting[^hassle]. There are a bunch of useful tutorials on how to set all this up.</summary></entry><entry><title type="html">CHI hangs</title><link href="https://benswift.me/2018/06/22/chi-hangs.html" rel="alternate" type="text/html" title="CHI hangs" /><published>2018-06-22T10:29:00+10:00</published><updated>2018-06-22T10:29:00+10:00</updated><id>https://benswift.me/2018/06/22/chi-hangs</id><content type="html" xml:base="https://benswift.me/2018/06/22/chi-hangs.html">&lt;p&gt;Here’s a photo of Kieran and I hanging out at CHI. I’ll write a more detailed
trip report some other time, but from the general chats I had with people (and
random &lt;a href=&quot;https://eagereyes.org/blog/2018/seven-visualization-talks-that-terrified-me-at-chi&quot;&gt;unsolicited blog
posts&lt;/a&gt;)
it seems like &lt;a href=&quot;/2018/04/24/the-other-side-algorithm-as-ritual-in-artificial-intelligence.html&quot;&gt;the ritual&lt;/a&gt; started some conversations.&lt;/p&gt;

&lt;picture&gt;&lt;img alt=&quot;Ben and Kieran at CHI&quot; style=&quot;width:100%;&quot; src=&quot;/assets/images/posts/ben-kieran-at-chi-d61f2c6b56d962f9bff2ce7a9c3081555c981cea9b8e68e83da4deafa382b81a.jpg&quot; /&gt;&lt;/picture&gt;</content><author><name>Ben Swift</name></author><summary type="html">Here’s a photo of Kieran and I hanging out at CHI. I’ll write a more detailed trip report some other time, but from the general chats I had with people (and random unsolicited blog posts) it seems like the ritual started some conversations.</summary></entry><entry><title type="html">ANU Laptop Orchestra</title><link href="https://benswift.me/2018/06/06/anu-laptop-orchestra.html" rel="alternate" type="text/html" title="ANU Laptop Orchestra" /><published>2018-06-06T09:20:00+10:00</published><updated>2018-06-06T09:20:00+10:00</updated><id>https://benswift.me/2018/06/06/anu-laptop-orchestra</id><content type="html" xml:base="https://benswift.me/2018/06/06/anu-laptop-orchestra.html">&lt;p&gt;One of the coolest parts of my job is doing livecoding gigs—here’s a recent
set I did at Smiths as part of &lt;a href=&quot;https://www.smithsalternative.com/events/soundscapes-21-44719&quot;&gt;Soundscapes
#21&lt;/a&gt;. A big
shout-out to Ushini Attanayake (not in the video, sadly) who did a &lt;strong&gt;fantastic&lt;/strong&gt;
job of her first livecoding set.&lt;/p&gt;

&lt;iframe src=&quot;https://player.vimeo.com/video/269115310&quot; width=&quot;640&quot; height=&quot;1138&quot; frameborder=&quot;0&quot; webkitallowfullscreen=&quot;&quot; mozallowfullscreen=&quot;&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;!-- &lt;p&gt;&lt;a href=&quot;https://vimeo.com/269115310&quot;&gt;live @ soundscapes #21&lt;/a&gt; from &lt;a href=&quot;https://vimeo.com/benswift&quot;&gt;Ben Swift&lt;/a&gt; on &lt;a href=&quot;https://vimeo.com&quot;&gt;Vimeo&lt;/a&gt;.&lt;/p&gt; --&gt;

&lt;p&gt;Somehow I’ve managed to make that stuff part of my day job as a (&lt;em&gt;cough&lt;/em&gt;)
respectable computer science lecturer, because Laptop Orchestras (or &lt;em&gt;LOrk&lt;/em&gt;s)
are a thing. Seriously, &lt;a href=&quot;https://en.wikipedia.org/wiki/Laptop_orchestra&quot;&gt;look it up on the
internet&lt;/a&gt;. But ANU doesn’t have
one—sadface. And it’s time to fix that.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;if&lt;/strong&gt; you’re a current ANU undergrad or coursework-postgrad student (&lt;em&gt;any&lt;/em&gt;
ANU student, not just in computer science) and you’re into&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;music&lt;/strong&gt;: hi-tech DJing (including livecoding, live patching e.g. Max/MSP,
PD, live loop manipulation e.g. Ableton), and other instrumentalists who
want to perform live with the laptop orchestra are invited too&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;visuals&lt;/strong&gt;: VJing, projection mapping, 2D/3D graphics e.g. shaders, Unity,
etc., and other drawers/dancers/painters/glassblowers who want to perform
live with the laptop orchestra are invited too&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;organising&lt;/strong&gt;, &lt;strong&gt;managing&lt;/strong&gt; and &lt;strong&gt;promoting&lt;/strong&gt; these sorts of gigs and
bands so that people actually show up and have an awesome time (because
even laptop orchestras need agents&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;and&lt;/strong&gt; you want to get together with like (and unlike!)-minded folks and play
some gigs &lt;em&gt;for university credit&lt;/em&gt;, and you have 6–12 credit points (1–2
courses) of room in your ANU degree in S2 2018 and S1 2019&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;then&lt;/strong&gt; you need to get in touch with me (&lt;a href=&quot;mailto:ben.swift@anu.edu.au&quot;&gt;ben.swift@anu.edu.au&lt;/a&gt;), perhaps
with a link to some of your creative work, and we can try and make this
happen.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I’m putting together a &lt;a href=&quot;https://en.wikipedia.org/wiki/Laptop_orchestra&quot;&gt;Laptop
Orchestra&lt;/a&gt; (or, alternately an
&lt;a href=&quot;https://algorave.com/&quot;&gt;Algorave&lt;/a&gt; group) as a
&lt;a href=&quot;https://cs.anu.edu.au/TechLauncher/&quot;&gt;TechLauncher&lt;/a&gt; project. Don’t wait till the
start of semester 2; the groups might be full up by then and you’ll miss out!&lt;/p&gt;

&lt;p&gt;Even if you’re not sure if you’re the right person (e.g. you’re not sure how to
fit it into your degree program) if you’ve always liked technology, creativity
and live performance but never found the right outlet for those passions, then
&lt;a href=&quot;mailto:ben.swift@anu.edu.au&quot;&gt;get in touch&lt;/a&gt;, there might be ways to make it
happen.&lt;/p&gt;</content><author><name>Ben Swift</name></author><summary type="html">One of the coolest parts of my job is doing livecoding gigs—here’s a recent set I did at Smiths as part of Soundscapes #21. A big shout-out to Ushini Attanayake (not in the video, sadly) who did a fantastic job of her first livecoding set.</summary></entry><entry><title type="html">Centre for the Public Awareness of Code</title><link href="https://benswift.me/2018/06/05/centre-for-the-public-awareness-of-code.html" rel="alternate" type="text/html" title="Centre for the Public Awareness of Code" /><published>2018-06-05T09:13:00+10:00</published><updated>2018-06-05T09:13:00+10:00</updated><id>https://benswift.me/2018/06/05/centre-for-the-public-awareness-of-code</id><content type="html" xml:base="https://benswift.me/2018/06/05/centre-for-the-public-awareness-of-code.html">&lt;p&gt;&lt;em&gt;What’s your favourite movie?&lt;/em&gt; Most folks already have an answer to this
question (because they’ve been asked before). Mine’s &lt;a href=&quot;https://www.imdb.com/title/tt0118826/&quot;&gt;The
Castle&lt;/a&gt;.&lt;/p&gt;

&lt;picture&gt;&lt;img alt=&quot;Cast of 'The Castle'&quot; style=&quot;width:100%;&quot; src=&quot;/assets/images/posts/the-castle-687b260701eee27445e4308887b662a7fd9c94a3f79842c2ed309ff478e69bc7.jpg&quot; /&gt;&lt;/picture&gt;

&lt;p&gt;&lt;em&gt;What’s your favourite band/album?&lt;/em&gt; Again, a pretty standard “dinner party” line
of questioning. As a muso (at least in the loose sense of the word) I find this
a much tougher one to answer, partially because I have so many favourites, and
partially because I’m trying t&lt;/p&gt;

&lt;p&gt;&lt;em&gt;What’s your favourite scientist or scientific theory/fact?&lt;/em&gt; This one is harder,
but thanks to great work by many
&lt;a href=&quot;https://en.wikipedia.org/wiki/Carl_Sagan&quot;&gt;gifted&lt;/a&gt; &lt;a href=&quot;http://drkarl.com/&quot;&gt;science&lt;/a&gt;
&lt;a href=&quot;https://twitter.com/ANU_CPAS&quot;&gt;communicators&lt;/a&gt; people increasingly have an answer
to those questions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;What’s your favourite bit of (software) code? What’s your favourite
algorithm?&lt;/em&gt;&lt;/strong&gt; I reckon that most people will struggle to have an answer for this
one. In fact, most folks probably won’t understand the question. Yet code (and
the algorithms they manifest) &lt;em&gt;does&lt;/em&gt; impact the world today. Mark Zuckerberg is
still
&lt;a href=&quot;https://www.washingtonpost.com/news/the-switch/wp/2018/04/11/zuckerberg-facebook-hearing-congress-house-testimony/&quot;&gt;travelling&lt;/a&gt;
&lt;a href=&quot;http://www.latimes.com/business/technology/la-fi-tn-facebook-zuckerberg-europe-20180522-story.html&quot;&gt;around&lt;/a&gt;
with a suit and a haircut apologising for the way his code changed the course of
history. It also true that a naive “code doesn’t kill people; people kill
people” techno-dualism doesn’t really stack up in practice. The modern world is
a complex, socio-technical assemblage (a glorious hot mess!) and everything
affects everything else.&lt;/p&gt;

&lt;p&gt;This isn’t about setting up a dichotomy between those who “get” code and those
who don’t, and it certainly isn’t about adding a moral dimension to code
literacy (so that if you don’t code, you’re a bad person). There are some
amazing code communicators out there—check out Dan Shiffman on the &lt;a href=&quot;http://thecodingtrain.com/&quot;&gt;Coding
Train&lt;/a&gt;. And there’s stuff like &lt;a href=&quot;http://www.electronicbookreview.com/thread/electropoetics/codology&quot;&gt;Critical Code
Studies
(CCS)&lt;/a&gt;,
although that’s more about understanding code-as-text &lt;em&gt;deeply&lt;/em&gt; rather than
raising awareness of what code is currently doing in the world.&lt;/p&gt;

&lt;p&gt;What we need is a &lt;strong&gt;Centre for the Public Awareness of Code&lt;/strong&gt;, with a bunch of
folks doing for code/software/algorithms what Carl Sagan did for space science
with &lt;a href=&quot;https://en.wikipedia.org/wiki/Cosmos:_A_Personal_Voyage&quot;&gt;Cosmos&lt;/a&gt;. I’ve got
some ideas about how we could do it (&lt;a href=&quot;https://vimeo.com/269115310&quot;&gt;musical
livecoding&lt;/a&gt; is one of them) but I’m sure there are
other ways as well.&lt;/p&gt;

&lt;p&gt;I know that there are a lot of people (and organisations) who are working hard
at this problem right now, all over the world. Which angles are they attacking
the problem from? Who’s doing it best? What can we all learn from each other?
Let’s discuss on &lt;a href=&quot;https://twitter.com/benswift&quot;&gt;twitter&lt;/a&gt; :)&lt;/p&gt;</content><author><name>Ben Swift</name></author><summary type="html">What’s your favourite movie? Most folks already have an answer to this question (because they’ve been asked before). Mine’s The Castle.</summary></entry><entry><title type="html">The Other Side: Algorithm as Ritual in Artificial Intelligence</title><link href="https://benswift.me/2018/04/24/the-other-side-algorithm-as-ritual-in-artificial-intelligence.html" rel="alternate" type="text/html" title="The Other Side: Algorithm as Ritual in Artificial Intelligence" /><published>2018-04-24T09:50:00+10:00</published><updated>2018-04-24T09:50:00+10:00</updated><id>https://benswift.me/2018/04/24/the-other-side-algorithm-as-ritual-in-artificial-intelligence</id><content type="html" xml:base="https://benswift.me/2018/04/24/the-other-side-algorithm-as-ritual-in-artificial-intelligence.html">&lt;p&gt;Tomorrow morning (Wed April 25, 9am Montréal time) Kieran Browne and I are
performing an Artificial Intelligence divination ritual as part of the &lt;em&gt;alt.chi&lt;/em&gt;
session &lt;a href=&quot;https://chi2018.acm.org/technical-program/?sessionId=-L6Uzypel81JpsiUKYQ2&amp;amp;publicationId=-L7SB7rZwtlVgobKgWoH&quot;&gt;Scary, Sporty, Ginger and
Posh&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This is not a talk &lt;em&gt;about&lt;/em&gt; the ritual; we will be performing the ritual &lt;strong&gt;live&lt;/strong&gt;
at CHI, using an analog computing apparatus to communicate with an artificial
intelligence to divine the answers to our questions.&lt;/p&gt;

&lt;p&gt;The ritual will &lt;strong&gt;start on time at 9am&lt;/strong&gt; in &lt;a href=&quot;https://chi2018.acm.org/technical-program/?maps=true&quot;&gt;room
514B&lt;/a&gt;—it’s a small room,
so please come a touch early to make sure you don’t miss out on a seat.&lt;/p&gt;

&lt;p&gt;See &lt;a href=&quot;http://kieranbrowne.com/works/the-other-side/&quot;&gt;Kieran’s blog&lt;/a&gt; for more
details about tomorrow’s ritual, and read the
&lt;a href=&quot;https://doi.org/10.1145/3170427.3188404&quot;&gt;paper&lt;/a&gt; for the full story.&lt;/p&gt;</content><author><name>Ben Swift</name></author><category term="kieran-browne" /><summary type="html">Tomorrow morning (Wed April 25, 9am Montréal time) Kieran Browne and I are performing an Artificial Intelligence divination ritual as part of the alt.chi session Scary, Sporty, Ginger and Posh.</summary></entry><entry><title type="html">Telopea Hour of Code</title><link href="https://benswift.me/2017/09/06/telopea-hour-of-code.html" rel="alternate" type="text/html" title="Telopea Hour of Code" /><published>2017-09-06T08:57:00+10:00</published><updated>2017-09-06T08:57:00+10:00</updated><id>https://benswift.me/2017/09/06/telopea-hour-of-code</id><content type="html" xml:base="https://benswift.me/2017/09/06/telopea-hour-of-code.html">&lt;p&gt;Welcome, Telopea Hour of Code students. Here are a couple of links you’ll need
today: the &lt;a href=&quot;https://alpha.editor.p5js.org/&quot;&gt;p5 web editor&lt;/a&gt; and the &lt;a href=&quot;/talks/p5-hour-of-code/&quot;&gt;slides for
the presentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Have fun!&lt;/p&gt;</content><author><name>Ben Swift</name></author><summary type="html">Welcome, Telopea Hour of Code students. Here are a couple of links you’ll need today: the p5 web editor and the slides for the presentation.</summary></entry><entry><title type="html">Science Week gig</title><link href="https://benswift.me/2017/08/11/science-week-gig.html" rel="alternate" type="text/html" title="Science Week gig" /><published>2017-08-11T00:00:00+10:00</published><updated>2017-08-11T00:00:00+10:00</updated><id>https://benswift.me/2017/08/11/science-week-gig</id><content type="html" xml:base="https://benswift.me/2017/08/11/science-week-gig.html">&lt;p&gt;I’m playing a livecoding set at the &lt;a href=&quot;https://www.scienceweek.net.au/&quot;&gt;ACT Science Week launch party
tonight&lt;/a&gt;. Sorry about the late notice to anyone
who uses this blog to come to my gigs—I really should set up a newsletter or
something. I think there are still a few tickets left ($5, available from the
website linked above).&lt;/p&gt;</content><author><name>Ben Swift</name></author><category term="gigs" /><summary type="html">I’m playing a livecoding set at the ACT Science Week launch party tonight. Sorry about the late notice to anyone who uses this blog to come to my gigs—I really should set up a newsletter or something. I think there are still a few tickets left ($5, available from the website linked above).</summary></entry></feed>