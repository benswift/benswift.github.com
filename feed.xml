<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.0">Jekyll</generator><link href="https://benswift.me/feed.xml" rel="self" type="application/atom+xml" /><link href="https://benswift.me/" rel="alternate" type="text/html" /><updated>2020-01-11T14:13:19+11:00</updated><id>https://benswift.me/feed.xml</id><title type="html">benswift.me</title><subtitle>livecoder &amp; researcher homepage - code, creativity, culture</subtitle><author><name>Ben Swift</name></author><entry><title type="html">benswift.me dev roadmap for 2020</title><link href="https://benswift.me/blog/2019/11/17/benswift-me-dev-roadmap-for-2020/" rel="alternate" type="text/html" title="benswift.me dev roadmap for 2020" /><published>2019-11-17T00:00:00+11:00</published><updated>2019-11-17T00:00:00+11:00</updated><id>https://benswift.me/blog/2019/11/17/benswift-me-dev-roadmap-for-2020</id><content type="html" xml:base="https://benswift.me/blog/2019/11/17/benswift-me-dev-roadmap-for-2020/">&lt;p&gt;As a developer of web tech curricula (specifically 2D graphics &amp;amp; interaction
design in &lt;a href=&quot;https://cs.anu.edu.au/courses/comp1720/&quot;&gt;COMP1720&lt;/a&gt;) there’s always a
tension in trying to just teach the fundamentals and keeping the coursework
up-to-date. For the latter, that doesn’t necessarily mean re-writing the course
each year with the js framework-du-jour, but it’s useful to at least know what
the best practices are and how to point students in a good direction if they
want to go deeper.&lt;/p&gt;

&lt;p&gt;I try and use this website as a bit of a test-bed for &lt;a href=&quot;https://benswift.me/blog/tag/meta/&quot;&gt;trying new
things&lt;/a&gt; and staying up to date. So, here’s
my list of things to try in 2020:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;update to Jekyll 4 (&lt;em&gt;update&lt;/em&gt;: done, as of
&lt;a href=&quot;https://github.com/benswift/benswift.github.io/commit/fba9367965f00592ed98469aef3d8c925bc901cd&quot;&gt;fba9367&lt;/a&gt;)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;or&lt;/strong&gt; move this blog from Jekyll to &lt;a href=&quot;https://www.11ty.io&quot;&gt;Eleventy&lt;/a&gt; (because
all the cool kids are on the &lt;a href=&quot;https://jamstack.org&quot;&gt;JAMstack&lt;/a&gt; these days)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;switch to &lt;a href=&quot;https://www.netlify.com&quot;&gt;Netlify&lt;/a&gt; for hosting so that I can use
their nice workflow stuff (e.g. serverless functions)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;package up my &lt;a href=&quot;/blog/2018/09/28/another-reveal.js-plugin-for-jekyll/&quot;&gt;reveal slides&lt;/a&gt; plugin on npm (if
I switch to Eleventy) or RubyGems (if I stay with Jekyll) so that others can
use them&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;(maybe) re-write the CSS (from the current hand-rolled Sass) to something
using a utility class framework like &lt;a href=&quot;https://tailwindcss.com&quot;&gt;Tailwind&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There’s no timeline on any of this, and I’m going to be busy with other things
(e.g. my &lt;a href=&quot;/blog/2019/03/20/reimagine-fellow-project-pitch/&quot;&gt;Reimagine Fellowship&lt;/a&gt;, updating the
&lt;a href=&quot;https://github.com/digego/extempore&quot;&gt;Extempore&lt;/a&gt; docs and generally &lt;a href=&quot;/research/&quot;&gt;doing good
research&lt;/a&gt;).&lt;/p&gt;</content><author><name>Ben Swift</name></author><category term="meta" /><category term="web" /><summary type="html">As a developer of web tech curricula (specifically 2D graphics &amp;amp; interaction design in COMP1720) there’s always a tension in trying to just teach the fundamentals and keeping the coursework up-to-date. For the latter, that doesn’t necessarily mean re-writing the course each year with the js framework-du-jour, but it’s useful to at least know what the best practices are and how to point students in a good direction if they want to go deeper.</summary></entry><entry><title type="html">COMP1720 2019 major project exhibtion</title><link href="https://benswift.me/blog/2019/11/08/comp1720-2019-major-project-exhibtion/" rel="alternate" type="text/html" title="COMP1720 2019 major project exhibtion" /><published>2019-11-08T00:00:00+11:00</published><updated>2019-11-08T00:00:00+11:00</updated><id>https://benswift.me/blog/2019/11/08/comp1720-2019-major-project-exhibtion</id><content type="html" xml:base="https://benswift.me/blog/2019/11/08/comp1720-2019-major-project-exhibtion/">&lt;p&gt;If you’re around the ANU campus tomorrow (Saturday Nov 9) then come along to
experience the &lt;a href=&quot;https://cs.anu.edu.au/courses/comp1720/&quot;&gt;COMP1720&lt;/a&gt; &lt;em&gt;Art &amp;amp;
Interaction in New Media&lt;/em&gt; major project exhibition. This year’s theme is
&lt;em&gt;listening &lt;strong&gt;in&lt;/strong&gt;/listening &lt;strong&gt;out&lt;/strong&gt;&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Here are the details:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;date&lt;/strong&gt;: Sat Nov 9&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;time&lt;/strong&gt;: 4:30pm–6:30pm&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;location&lt;/strong&gt;: HN computer labs 1.23 &amp;amp; 1.24 (ground floor of the &lt;a href=&quot;https://goo.gl/maps/ZiwfuqyNSxx8ZAR3A&quot;&gt;Hanna Neumann
building&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;cost&lt;/strong&gt;: free!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The students have been working super hard (here’s a &lt;a href=&quot;https://cs.anu.edu.au/courses/comp1720/showcase/&quot;&gt;sneak
peek&lt;/a&gt;) so come along, play
with some cool interactive browser artworks and see some of the cool
code/creativity/culture work going on here at the ANU.&lt;/p&gt;

&lt;p&gt;Here’s a photo from last year’s exhibition just to whet your appetite.&lt;/p&gt;

&lt;picture&gt;
  &lt;img alt=&quot;folks having fun at the COMP1720 exhibition&quot; src=&quot;/assets/images/posts/comp1720-mp-exhibition-2018-2.jpg&quot; /&gt;
&lt;/picture&gt;

&lt;p&gt;See you tomorrow 😊&lt;/p&gt;</content><author><name>Ben Swift</name></author><category term="teaching" /><category term="ccc" /><category term="gigs" /><summary type="html">If you’re around the ANU campus tomorrow (Saturday Nov 9) then come along to experience the COMP1720 Art &amp;amp; Interaction in New Media major project exhibition. This year’s theme is listening in/listening out.</summary></entry><entry><title type="html">code/creativity/culture curriculum design workshop</title><link href="https://benswift.me/blog/2019/11/07/codesign-culture-lab-workshop/" rel="alternate" type="text/html" title="code/creativity/culture curriculum design workshop" /><published>2019-11-07T00:00:00+11:00</published><updated>2019-11-07T00:00:00+11:00</updated><id>https://benswift.me/blog/2019/11/07/codesign-culture-lab-workshop</id><content type="html" xml:base="https://benswift.me/blog/2019/11/07/codesign-culture-lab-workshop/">&lt;div class=&quot;hl-para&quot;&gt;

&lt;strong&gt;tl;dr&lt;/strong&gt; in this workshop you’ll:

&lt;ol&gt;

&lt;li&gt;break into groups&lt;/li&gt;

&lt;li&gt;be assigned a trio of &lt;strong&gt;code&lt;/strong&gt;/&lt;strong&gt;creativity&lt;/strong&gt;/&lt;strong&gt;culture&lt;/strong&gt; topics&lt;/li&gt;

&lt;li&gt;design a real c/c/c studio assessment item based around those three topics (and present it to the group)&lt;/li&gt;

&lt;li&gt;write some marking criteria for your assessment item (and present them to the group)&lt;/li&gt;

&lt;/ol&gt;

&lt;/div&gt;

&lt;div id=&quot;toc&quot;&gt;

  &lt;h2&gt;table of contents&lt;/h2&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#workshop-overview&quot; id=&quot;markdown-toc-workshop-overview&quot;&gt;Workshop overview&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#intro&quot; id=&quot;markdown-toc-intro&quot;&gt;Intro&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#timeline&quot; id=&quot;markdown-toc-timeline&quot;&gt;Timeline&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#group-formation&quot; id=&quot;markdown-toc-group-formation&quot;&gt;Group formation&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#group-work-session-1&quot; id=&quot;markdown-toc-group-work-session-1&quot;&gt;Session 1: writing an assessment spec&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#design-brief&quot; id=&quot;markdown-toc-design-brief&quot;&gt;Design brief&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#spin-the-wheels&quot; id=&quot;markdown-toc-spin-the-wheels&quot;&gt;Let’s spin the wheels!&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#things-to-consider-as-you-design-your-assessment-task&quot; id=&quot;markdown-toc-things-to-consider-as-you-design-your-assessment-task&quot;&gt;Things to consider as you design your assessment task&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#group-work-session-2&quot; id=&quot;markdown-toc-group-work-session-2&quot;&gt;Session 2: articulating the assessment criteria&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#things-to-consider-as-you-design-your-assessment-criteria&quot; id=&quot;markdown-toc-things-to-consider-as-you-design-your-assessment-criteria&quot;&gt;Things to consider as you design your assessment criteria&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#takeaway-questions&quot; id=&quot;markdown-toc-takeaway-questions&quot;&gt;Takeaway questions&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#appendices&quot; id=&quot;markdown-toc-appendices&quot;&gt;Appendices&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#presenter-bio&quot; id=&quot;markdown-toc-presenter-bio&quot;&gt;Presenter bio&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#footnotes&quot; id=&quot;markdown-toc-footnotes&quot;&gt;Footnotes&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;

&lt;h2 id=&quot;workshop-overview&quot;&gt;Workshop overview&lt;/h2&gt;

&lt;h3 id=&quot;intro&quot;&gt;Intro&lt;/h3&gt;

&lt;p&gt;Is it possible to learn about algorithms through writing poetry about wealth
inequality? How about exploring the issue of social media use via sculptures
built using cybersecurity tools and concepts? Is it possible to design an
assessment task which encourages deep technical work and honest cultural
reflection, while still producing a genuinely interesting creative outcome?&lt;/p&gt;

&lt;p&gt;This workshop brings together folks from all points of the
code/creativity/culture compass to design a &lt;em&gt;real&lt;/em&gt; assessment task for the
&lt;strong&gt;c/c/c studio&lt;/strong&gt; creative computing outreach program. In fact, it &lt;em&gt;needs&lt;/em&gt; a
diverse range of voices to work properly. So if you’ve got thoughts and ideas
about CS/Engineering curriculum design, the arts, and life within the
socio-technical assemblage of our present age, then come along and have your
say!&lt;/p&gt;

&lt;p&gt;This workshop is part of the &lt;a href=&quot;https://cecs.anu.edu.au/events/event-series/codesign-culture-lab&quot;&gt;CoDesign Culture
Lab&lt;/a&gt;. If
you’re coming to the culture lab and you’d like to be part of the workshop, &lt;a href=&quot;mailto:ben.swift@anu.edu.au&quot;&gt;get
in touch&lt;/a&gt; 😊&lt;/p&gt;

&lt;h3 id=&quot;timeline&quot;&gt;Timeline&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;9:00&lt;/strong&gt;: &lt;a href=&quot;/talks/ccc-studio-workshop/&quot;&gt;intro&lt;/a&gt;—what is the c/c/c studio&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;9:20&lt;/strong&gt;: &lt;a href=&quot;#group-formation&quot;&gt;group formation&lt;/a&gt; (with stickers! &lt;span style=&quot;color:#eb4d4b;&quot;&gt;⬤&lt;/span&gt;&lt;span style=&quot;color:#3498db;&quot;&gt;⬤&lt;/span&gt;&lt;span style=&quot;color:#27ae60;&quot;&gt;⬤&lt;/span&gt;&lt;span style=&quot;color:#85522f;&quot;&gt;⬤&lt;/span&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;9:30&lt;/strong&gt;: &lt;a href=&quot;#spin-the-wheels&quot;&gt;spin the wheel(s)!&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;9:45&lt;/strong&gt;: &lt;a href=&quot;#group-work-session-1&quot;&gt;group work session 1&lt;/a&gt; (assessment item spec)&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;10:30&lt;/strong&gt;:  break (morning tea)&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;11:00&lt;/strong&gt;: present your assessment item spec to workshop&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;11:30&lt;/strong&gt;: &lt;a href=&quot;#group-work-session-2&quot;&gt;group work session 2&lt;/a&gt; (assessment criteria)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;12:00&lt;/strong&gt;: present your assessment criteria to the workshop&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;12:15&lt;/strong&gt;: wrap-up&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;group-formation&quot;&gt;Group formation&lt;/h3&gt;

&lt;h4 id=&quot;find-your-stickers&quot;&gt;Find your stickers&lt;/h4&gt;

&lt;p&gt;For this workshop it’s important that each group has representatives from each
facet of the c/c/c triad. Look under your chair to find three stickers:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;the &lt;strong&gt;red&lt;/strong&gt; &lt;span style=&quot;color:#eb4d4b;&quot;&gt;⬤&lt;/span&gt; sticker is the &lt;em&gt;code&lt;/em&gt;
sticker—if you consider yourself a &lt;em&gt;code&lt;/em&gt; person&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;the &lt;strong&gt;blue&lt;/strong&gt; &lt;span style=&quot;color:#3498db;&quot;&gt;⬤&lt;/span&gt; sticker is the &lt;em&gt;creativity&lt;/em&gt;
sticker—if you consider yourself a &lt;em&gt;creativity&lt;/em&gt; person&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;the &lt;strong&gt;yellow&lt;/strong&gt; &lt;span style=&quot;color:#f1c40f;&quot;&gt;⬤&lt;/span&gt; sticker is the &lt;em&gt;culture&lt;/em&gt;
sticker—if you consider yourself a &lt;em&gt;culture&lt;/em&gt; person&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;the &lt;strong&gt;purple&lt;/strong&gt; &lt;span style=&quot;color:#85522f;&quot;&gt;⬤&lt;/span&gt; sticker is for if you
think that this whole “reducing one’s identity in such a multifaceted problem
space down to just a few stickers” thing is total bollocks—your job is to be
your group’s &lt;em&gt;enfant terrible&lt;/em&gt; 😉&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p class=&quot;hl-para&quot;&gt;You can choose to have 0, 1, 2, 3 or 4 stickers—it’s up to you.&lt;/p&gt;

&lt;h4 id=&quot;find-your-team-mates&quot;&gt;Find your team-mates&lt;/h4&gt;

&lt;p&gt;Once you’ve attached your stickers prominently to your forehead (or wherever you
decided to wear them) then you need to find three team-mates so that each group
has four members.&lt;/p&gt;

&lt;p&gt;The one requirement is that each group must have &lt;em&gt;all&lt;/em&gt; of the stickers between
them. So, as you mill about finding team-mates, ask one another&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;why you chose to identify with the particular stickers you chose&lt;/li&gt;
  &lt;li&gt;which sticker was the hardest to decide on, and why&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Once you’ve found a team, assemble at one of the tables and await further
instructions.&lt;/p&gt;

&lt;h2 id=&quot;group-work-session-1&quot;&gt;Session 1: writing an assessment spec&lt;/h2&gt;

&lt;p&gt;In his intro, we introduced the c/c/c studio idea and set the scene for the
whole “code/creativity/culture” thing (spoiler: they’re all &lt;em&gt;highly&lt;/em&gt; entangled).
You’re now a curriculum designer for the c/c/c studio! Welcome aboard.&lt;/p&gt;

&lt;h3 id=&quot;design-brief&quot;&gt;Design brief&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;Genius learns from nature, its own nature. Talent learns from art. Also,
creativity and culture seem to be important. &lt;em&gt;Olivia Wilde&lt;/em&gt;&lt;sup id=&quot;fnref:wilde&quot;&gt;&lt;a href=&quot;#fn:wilde&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p class=&quot;hl-para&quot;&gt;&lt;em&gt;Your design brief for today&lt;/em&gt;: in your group, create an assessment&lt;sup id=&quot;fnref:assessment&quot;&gt;&lt;a href=&quot;#fn:assessment&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;
task which teaches a particular &lt;strong&gt;code&lt;/strong&gt; concept/tool by exploring a
problem/challenge facing our&lt;sup id=&quot;fnref:culture&quot;&gt;&lt;a href=&quot;#fn:culture&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt; &lt;strong&gt;culture&lt;/strong&gt; through a particular
&lt;strong&gt;creative&lt;/strong&gt; process/medium.&lt;/p&gt;

&lt;p&gt;The educational context for this assessment task is the c/c/c studio—a
selective program for year 11 &amp;amp; 12 students. If you’re more familiar with a uni
context, they’re probably not too dissimilar from first-year undergraduates.&lt;/p&gt;

&lt;p&gt;In this group session your group needs to produce a (draft) document. I don’t
want to be &lt;em&gt;too&lt;/em&gt; dogmatic about the form and content—the whole point of this
workshop is to throw out the rulebook—but here’s a example of the sorts of
things that are usually important in an assessment item:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;description&lt;/strong&gt;: a high-level description of what the task is and what the
students are required to deliver&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;background/motivation&lt;/strong&gt;: a bit more background on the task, tools, problem
domain, as well as any pre-requisite skills the students will need&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;learning outcomes&lt;/strong&gt;: a list of learning outcomes for the assessment task (or
which the task is designed to assess)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;spec&lt;/strong&gt;: a concise, specific description of what the students are required to
produce, including any specific constraints or requirements on either the
deliverable or the process&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;resources&lt;/strong&gt;: a list of resources the students might find helpful in
completing the task&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;faq&lt;/strong&gt;: a list of (anticipated) questions the students might have about the
assessment task&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At the end of this session you get to present your assessment task to the wider
workshop. So, your group will need to organise:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;a scribe (either on-paper or on a laptop) to write the document&lt;/li&gt;
  &lt;li&gt;a presenter (or a creative group presentation strategy) for telling everyone
about your amazing assessment task&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you want to work on paper there are paper templates floating around (let us
know if you’d like one). If you’ve got a digital scribe, then there are
electronic templates (&lt;a href=&quot;/assets/documents/ccc-curriculum-design-workshop/ccc-assessment-task.md&quot;&gt;markdown&lt;/a&gt; and
&lt;a href=&quot;/assets/documents/ccc-curriculum-design-workshop/ccc-assessment-task.docx&quot;&gt;MS Word&lt;/a&gt;).&lt;/p&gt;

&lt;p class=&quot;hl-para&quot;&gt;One more thing to keep in mind: in the &lt;a href=&quot;#group-work-session-2&quot;&gt;next group work
session&lt;/a&gt; you’ll be writing a set of assessment criteria
which will be used to assess the submissions for your assessment task. So you
don’t have to worry about writing them down formally just yet, but keep that in
mind as you design your assessment task.&lt;/p&gt;

&lt;h3 id=&quot;spin-the-wheels&quot;&gt;Let’s spin the wheels!&lt;/h3&gt;

&lt;p&gt;You don’t get to pick the code concept/cultural problem/creative process triad
which forms the basis for your assessment task. Instead, we’ll spin the
code/creativity/culture wheels&lt;sup id=&quot;fnref:winwheel&quot;&gt;&lt;a href=&quot;#fn:winwheel&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt; and let fate&lt;sup id=&quot;fnref:fate&quot;&gt;&lt;a href=&quot;#fn:fate&quot; class=&quot;footnote&quot;&gt;5&lt;/a&gt;&lt;/sup&gt; decide.&lt;/p&gt;

&lt;script src=&quot;/assets/js/TweenMax.min.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;

&lt;script src=&quot;/assets/js/Winwheel.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;

&lt;script src=&quot;/assets/js/ccc-workshop-wheels.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;

&lt;style&gt;
.wheelIndicator {
  width:100%;
  font-size:4em;
  text-align:center;
  margin-bottom:-0.2em;
}

.wheelResult {
  font-size:2em;
  margin-bottom:1em;
}
&lt;/style&gt;

&lt;h4 id=&quot;the-code-wheel&quot;&gt;the code wheel&lt;/h4&gt;

&lt;p&gt;This wheel selects the &lt;em&gt;tool/concept&lt;/em&gt; which the students need to leverage (and
in doing so, understand) in their submission. This is deliberately broad—you
can (and should) narrow it down in &lt;em&gt;your&lt;/em&gt; assessment task. Don’t get hung up on
the “code” moniker, think about it as a computing/computer science tool/concept
more broadly.&lt;/p&gt;

&lt;p&gt;Note: one other way to frame this is this is the skill/concept that you want the
students to learn (perhaps surreptitiously) in &lt;em&gt;doing&lt;/em&gt; the assessment task.&lt;/p&gt;

&lt;div class=&quot;wheelIndicator&quot;&gt;⧨&lt;/div&gt;
&lt;div id=&quot;codeWheel-canvas&quot;&gt;&lt;/div&gt;

&lt;p class=&quot;wheelResult&quot;&gt;&lt;em&gt;code&lt;/em&gt; wheel: &lt;strong&gt;&lt;span class=&quot;codeWheel-canvas-result&quot;&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;script&gt;
// based on a (slightly tweaked) version of the ACM BoK 2016
let acmBoK2016 = [
  &quot;Circuits &amp; Electronics&quot;,
  &quot;Computing Algorithms&quot;,
  &quot;Computer Architecture&quot;,
  &quot;Digital Design&quot;,
  &quot;Embedded Systems&quot;,
  &quot;Computer Networks&quot;,
  &quot;Information Security&quot;,
  &quot;Signal Processing&quot;,
  &quot;Systems &amp; Project Eng.&quot;,
  &quot;Software Design&quot;
];

// these ones pulled out of Ben's arse
let benCodeConcepts = [
  &quot;algorithms&quot;,
  &quot;embedded systems&quot;,
  &quot;signal processing&quot;,
  &quot;software design&quot;,
  &quot;databases&quot;,
  &quot;networks&quot;,
  &quot;UI/UX design&quot;,
  &quot;data analytics&quot;,
  &quot;machine learning&quot;,
  &quot;cybersecurity&quot;
]

let codeWheel = makeWheel(benCodeConcepts, &quot;codeWheel-canvas&quot;);
&lt;/script&gt;

&lt;h4 id=&quot;the-creativity-wheel&quot;&gt;the creativity wheel&lt;/h4&gt;

&lt;p&gt;This wheel selects the creative medium through which the student will explore
the problem.&lt;/p&gt;

&lt;div class=&quot;wheelIndicator&quot;&gt;⧨&lt;/div&gt;
&lt;div id=&quot;creativityWheel-canvas&quot;&gt;&lt;/div&gt;

&lt;p class=&quot;wheelResult&quot;&gt;&lt;em&gt;creativity&lt;/em&gt; wheel: &lt;strong&gt;&lt;span class=&quot;creativityWheel-canvas-result&quot;&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;script&gt;
let creativityWheel = makeWheel(
  [
	&quot;music&quot;,
	&quot;sound&quot;,
    &quot;dance&quot;,
    &quot;photography&quot;,
	&quot;painting&quot;,
	&quot;drawing&quot;,
	&quot;textiles&quot;,
	&quot;film&quot;,
	&quot;sculpture&quot;,
	&quot;creative writing&quot;,
	&quot;memes&quot;,
  ],
  &quot;creativityWheel-canvas&quot;);
&lt;/script&gt;

&lt;h4 id=&quot;the-culture-wheel&quot;&gt;the culture wheel&lt;/h4&gt;

&lt;p&gt;This wheel selects the &lt;em&gt;problem/challenge&lt;/em&gt; facing our culture/society to explore
(and perhaps comment on) through the work. Again, you might want to narrow it
down to a particular angle on this problem, although it’s worth thinking about
how to leave students to wrestle with what &lt;em&gt;they&lt;/em&gt; think about the problem, not
just picking a theme which implies that there’s only one “right approach”.&lt;/p&gt;

&lt;div class=&quot;wheelIndicator&quot;&gt;⧨&lt;/div&gt;
&lt;div id=&quot;cultureWheel-canvas&quot;&gt;&lt;/div&gt;

&lt;p class=&quot;wheelResult&quot;&gt;&lt;em&gt;culture&lt;/em&gt; wheel: &lt;strong&gt;&lt;span class=&quot;cultureWheel-canvas-result&quot;&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;script&gt;
let cultureWheel = makeWheel(
  [
   &quot;privacy&quot;,
   &quot;ethics&quot;,
   &quot;wealth distribution&quot;,
   &quot;climate change&quot;,
   &quot;work-life balance&quot;,
   &quot;social media use&quot;,
   &quot;immigration&quot;,
   &quot;tolerance&quot;,
   &quot;food security&quot;,
   &quot;world peace&quot;
  ],
  &quot;cultureWheel-canvas&quot;);
&lt;/script&gt;

&lt;p class=&quot;wheelResult&quot;&gt;&lt;em&gt;assessment task goal:&lt;/em&gt;&lt;/p&gt;

&lt;p class=&quot;hl-para wheelResult&quot;&gt;

learning about &lt;strong&gt;&lt;span class=&quot;codeWheel-canvas-result&quot;&gt;____&lt;/span&gt;&lt;/strong&gt; by exploring &lt;strong&gt;&lt;span class=&quot;cultureWheel-canvas-result&quot;&gt;____&lt;/span&gt;&lt;/strong&gt; through &lt;strong&gt;&lt;span class=&quot;creativityWheel-canvas-result&quot;&gt;____&lt;/span&gt;&lt;/strong&gt;

&lt;/p&gt;

&lt;h3 id=&quot;things-to-consider-as-you-design-your-assessment-task&quot;&gt;Things to consider as you design your assessment task&lt;/h3&gt;

&lt;p&gt;Now that you’ve spun the wheels, you might be thinking that they’ve still left
you with a pretty broad scope—and you’d be right. Your group’s job is to
narrow this down into a specific task which is tractable for your intended
audience of students. It’s fine (good, even!) if you narrow it down a lot.&lt;/p&gt;

&lt;p&gt;Some of your group members might have lots of experience designing assessment
tasks, others may have never done it before (although I’m sure that everyone’s
&lt;em&gt;done&lt;/em&gt; one).&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;for the &lt;em&gt;code&lt;/em&gt; and &lt;em&gt;culture&lt;/em&gt; wheel results in particular, what are the key
aspects or sub-problems that you want the students to engage with? what are
some of the creative ways you can imagine to get those concepts across?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;the Learning Outcomes are really important, and can act as a guide for the
rest of the design task—don’t leave them till the last minute&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;what are the conventions of “assesment tasks”? how can you flaunt them?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;how can you ensure that the students engage seriously with the &lt;em&gt;code&lt;/em&gt; part of
the problem? how can you make sure they actually build something, not just
talk about stuff?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;in plain language, what do you want a student to learn through the process of
completing your assessment task? (that will help with coming up with some
learning outcomes)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;how might the &lt;em&gt;concept/tool&lt;/em&gt; and the &lt;em&gt;creative medium&lt;/em&gt; shape the responses to
the problem? can you use this to your advantage in encouraging students to
attain the learning outcomes?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;will the outcome (what the students produce) be something completely new, or
will it be a reimagination/repurposing of an existing technology, or
speculating on the impact of an existing technology as it develops into the
future?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;how are you going to constrain the scope of your task so that it supports
students from a wide range of backgrounds/abilities?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;do &lt;em&gt;you&lt;/em&gt; have any favourite resources or templates for designing an assessment
task? a quick google turns up a few (e.g. this &lt;a href=&quot;https://blog.aca.edu.au/assessing-the-digital-technologies-curriculum-5f81a98ce053&quot;&gt;blog post from the Australian
Computing
Academy&lt;/a&gt;
or this &lt;a href=&quot;https://www.uts.edu.au/research-and-teaching/learning-and-teaching/assessment-futures/designing-and-redesigning&quot;&gt;more general assessment design framework from
UTS&lt;/a&gt;)
but I’m sure you can find others as well&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;what’s the worst-case scenario you’d expect if you set your assessment task
for a bunch of eager c/c/c studio students? how can you write the spec to
minimise the chance of things going down this way?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;it’s ok to use images, diagrams, YouTube clips, interactive widgets—the
assessment task itself won’t be printed on paper, it’ll be hosted on the web&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;group-work-session-2&quot;&gt;Session 2: articulating the assessment criteria&lt;/h2&gt;

&lt;p&gt;As much as it feels gross and reductionistic to boil a student’s mark down to a
number, we need to mark the submissions. Your group’s second (and final)
deliverable is a set of assessment criteria for the assessment task.&lt;/p&gt;

&lt;p&gt;Again, you need to create a document which could be handed to a marker so that
they could assess the submissions and give a mark &amp;amp; grade. Again, the exact
format of this document is up to you. There are a few ways to do this:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;a series of examples of what constitutes bad/good/excellent work—what would
an &lt;em&gt;outstanding&lt;/em&gt; submission look like? what would a borderline-acceptable
(e.g. a bare pass) submission look like?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;a set of criteria for each of the code/creativity/culture dimensions of the
work, with descriptions of what bad/good/excellent work might look like&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;a full rubric (2x2 grid) with criteria along the rows, grades (e.g. fail,
pass, credit, distinction, high distinction) down the columns and a
description in each grid square&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;things-to-consider-as-you-design-your-assessment-criteria&quot;&gt;Things to consider as you design your assessment criteria&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;the problems (from the culture wheel) are &lt;em&gt;not solvable through a single
assessment task&lt;/em&gt;, so don’t make that the criteria—instead, you want students
to explore &amp;amp; understand the problem, process &amp;amp; tool more deeply&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;how do your criteria support students who haven’t necessarily thought deeply
about the “big questions” to do so? how do they encourage students who have
thought about this stuff to go deeper?&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;takeaway-questions&quot;&gt;Takeaway questions&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Did the &lt;a href=&quot;#spin-the-wheels&quot;&gt;wheels&lt;/a&gt; (and the segments therein) provide enough
structure for your assessment design exercise? Too much structure? If you were
using them as a tool for assessment design in the future, how would you modify
them?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;After participating, are you more or less convinced of the utility of the
creative arts in teaching the code concepts? Why?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;What type of student would benefit the most from doing your assessment task?
How are they similar/different from the students we see in our CS programs
here in CECS?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If &lt;strong&gt;you&lt;/strong&gt; were in charge of this workshop and had to deliver it again, what
would you change?&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p class=&quot;hl-para&quot;&gt;Thanks so much for participating 😊 If your group wrote the assessment item on
paper, can you hand it to Ben (or one of the other facilitators) before you
leave ? If you did it electronically (e.g. using the &lt;a href=&quot;/assets/documents/ccc-curriculum-design-workshop/ccc-assessment-task.md&quot;&gt;markdown
template&lt;/a&gt;) then
can you &lt;a href=&quot;mailto:ben.swift@anu.edu.au&quot;&gt;email it to Ben&lt;/a&gt;?&lt;/p&gt;

&lt;h2 id=&quot;appendices&quot;&gt;Appendices&lt;/h2&gt;

&lt;h3 id=&quot;presenter-bio&quot;&gt;Presenter bio&lt;/h3&gt;

&lt;p&gt;Dr Ben Swift is a Senior Lecturer in the ANU Research School of Computer Science
(RSCS). As the leader of the code/creativity/culture (c/c/c) research group,
Ben’s goal is to create spaces for talking about the way that code (software),
creativity (especially the arts) and culture (life) intersect in the modern
world. Ben’s research contributions range from traditional Computer Science
(digital multimedia, web technologies and human-computer interaction) through to
invited livecoding (live code-based music performance) performances and
multimedia artwork installations.&lt;/p&gt;

&lt;p&gt;In 2019 Ben was awarded one of the inaugural &lt;em&gt;Reimagine Fellowships&lt;/em&gt; to develop
the &lt;strong&gt;c/c/c studio&lt;/strong&gt;, an ANU Extension outreach program which will teach
computer science to pre-tertiary students through making art, music and other
cool things with computers. The c/c/c studio will also provide a supportive
community in which a new generation of people can learn, create, and
share—unlocking the latent potential in students who never knew their diverse
interests (especially in the arts &amp;amp; music) could be used in engineering and
computing.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://cs.anu.edu.au/code-creativity-culture/&quot;&gt;https://cs.anu.edu.au/code-creativity-culture/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://benswift.me&quot;&gt;http://benswift.me&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;footnotes&quot;&gt;Footnotes&lt;/h3&gt;
&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:wilde&quot;&gt;
      &lt;p&gt;obviously, this is fake, although &lt;a href=&quot;https://www.azquotes.com/quote/776726&quot;&gt;Oscar Wilde said something
similar&lt;/a&gt;, and I’m &lt;em&gt;pretty sure&lt;/em&gt; he
was &lt;a href=&quot;https://www.imdb.com/name/nm1312575/&quot;&gt;Olivia Wilde’s&lt;/a&gt; uncle &lt;a href=&quot;#fnref:wilde&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:assessment&quot;&gt;

      &lt;p&gt;you can think of it as an assignment, but that word has some baggage, so
just think of it as a description of a thing which a student must submit
which will be evaluated on whether it’s a good thing &lt;a href=&quot;#fnref:assessment&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:culture&quot;&gt;

      &lt;p&gt;Part of the challenge here is that we don’t live in a monoculture, at a
local level (because filter bubbles), at a national level (because
multiculturalism) and at a global level (because global village). Still, I’m
using this word so the c/c/c schtick makes sense. &lt;a href=&quot;#fnref:culture&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:winwheel&quot;&gt;
      &lt;p&gt;wheels powered by &lt;a href=&quot;http://dougtesting.net/home&quot;&gt;Winwheel.js&lt;/a&gt; by Douglas McKechie &lt;a href=&quot;#fnref:winwheel&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:fate&quot;&gt;
      &lt;p&gt;well, the PRNG in your web browser, anyway &lt;a href=&quot;#fnref:fate&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Ben Swift</name></author><category term="reimagine" /><category term="ccc" /><summary type="html"></summary></entry><entry><title type="html">LENS showcase S2 2019</title><link href="https://benswift.me/blog/2019/10/31/anu-laptop-ensemble-showcase-s2-2019/" rel="alternate" type="text/html" title="LENS showcase S2 2019" /><published>2019-10-31T00:00:00+11:00</published><updated>2019-10-31T00:00:00+11:00</updated><id>https://benswift.me/blog/2019/10/31/anu-laptop-ensemble-showcase-s2-2019</id><content type="html" xml:base="https://benswift.me/blog/2019/10/31/anu-laptop-ensemble-showcase-s2-2019/">&lt;p&gt;Last weekend the S2 2019
&lt;a href=&quot;https://cs.anu.edu.au/code-creativity-culture/lens/&quot;&gt;LENS&lt;/a&gt; cohort (the ANU
Laptop Ensemble) gave their final performances as part of the ANU School of
Music’s composition showcase. Thanks to everyone who attended, and congrats
again to the students who learned a bunch of computer music stuff &amp;amp;
build/composed and performed a working piece in one crazy semester. And an
especially big thanks to my LENS co-directors
&lt;a href=&quot;http://charlesmartin.com.au/&quot;&gt;Charles&lt;/a&gt; and
&lt;a href=&quot;http://music.cass.anu.edu.au/people/dr-alexander-hunter&quot;&gt;Alec&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There were more talented photographers than I present (and I’ll put those photos
&amp;amp; videos up when I track them down) but here are some photos I snapped of the
performances:&lt;/p&gt;

&lt;picture&gt;
  &lt;img alt=&quot;LENS members performing at the showcase&quot; src=&quot;/assets/images/posts/lens-showcase-2019-s2/IMG_0895.jpg&quot; /&gt;
&lt;/picture&gt;

&lt;picture&gt;
  &lt;img alt=&quot;LENS members performing at the showcase&quot; src=&quot;/assets/images/posts/lens-showcase-2019-s2/IMG_0896.jpg&quot; /&gt;
&lt;/picture&gt;

&lt;picture&gt;
  &lt;img alt=&quot;LENS members performing at the showcase&quot; src=&quot;/assets/images/posts/lens-showcase-2019-s2/IMG_0897.jpg&quot; /&gt;
&lt;/picture&gt;

&lt;picture&gt;
  &lt;img alt=&quot;LENS members performing at the showcase&quot; src=&quot;/assets/images/posts/lens-showcase-2019-s2/IMG_0898.jpg&quot; /&gt;
&lt;/picture&gt;

&lt;picture&gt;
  &lt;img alt=&quot;LENS members performing at the showcase&quot; src=&quot;/assets/images/posts/lens-showcase-2019-s2/IMG_0899.jpg&quot; /&gt;
&lt;/picture&gt;

&lt;picture&gt;
  &lt;img alt=&quot;LENS members performing at the showcase&quot; src=&quot;/assets/images/posts/lens-showcase-2019-s2/IMG_0900.jpg&quot; /&gt;
&lt;/picture&gt;

&lt;p&gt;the LENS members even stayed around afterwards to help us bump out:&lt;/p&gt;

&lt;picture&gt;
  &lt;img alt=&quot;LENS members packing up at the showcase&quot; src=&quot;/assets/images/posts/lens-showcase-2019-s2/IMG_0901.jpg&quot; /&gt;
&lt;/picture&gt;

&lt;p&gt;LENS will be back again in S1 2019, so if you’re interested then &lt;a href=&quot;mailto:ben.swift@anu.edu.au&quot;&gt;shoot me an
email&lt;/a&gt; and we can keep you in the loop about how to
be involved.&lt;/p&gt;</content><author><name>Ben Swift</name></author><category term="lens" /><category term="gigs" /><summary type="html">Last weekend the S2 2019 LENS cohort (the ANU Laptop Ensemble) gave their final performances as part of the ANU School of Music’s composition showcase. Thanks to everyone who attended, and congrats again to the students who learned a bunch of computer music stuff &amp;amp; build/composed and performed a working piece in one crazy semester. And an especially big thanks to my LENS co-directors Charles and Alec.</summary></entry><entry><title type="html">Ben and COMP2300 next year</title><link href="https://benswift.me/blog/2019/10/21/ben-and-comp2300-next-year/" rel="alternate" type="text/html" title="Ben and COMP2300 next year" /><published>2019-10-21T00:00:00+11:00</published><updated>2019-10-21T00:00:00+11:00</updated><id>https://benswift.me/blog/2019/10/21/ben-and-comp2300-next-year</id><content type="html" xml:base="https://benswift.me/blog/2019/10/21/ben-and-comp2300-next-year/">&lt;p&gt;Students&lt;sup id=&quot;fnref:organised-ones&quot;&gt;&lt;a href=&quot;#fn:organised-ones&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; are starting to turn their gaze towards 2020, and so
I’ve been getting a bunch of emails asking me if I’m teaching
&lt;a href=&quot;https://cs.anu.edu.au/courses/comp2300/&quot;&gt;COMP2300/6300&lt;/a&gt; &lt;em&gt;Computer Organisation
&amp;amp; Program Execution&lt;/em&gt; again in Semester 1 2020.&lt;/p&gt;

&lt;p&gt;The short answer : &lt;strong&gt;no&lt;/strong&gt;. The slightly longer answer is that while I’ll always
love COMP2300 (it’s the first course I got to design &amp;amp; write myself) my energies
for the next couple of years are going to be poured into the &lt;a href=&quot;/blog/2019/03/20/reimagine-fellow-project-pitch/&quot;&gt;c/c/c
studio&lt;/a&gt; (as part of my
&lt;a href=&quot;/blog/2019/08/30/Im-a-reimagine-fellow/&quot;&gt;Reimagine Fellowship&lt;/a&gt;). In 2020, &lt;a href=&quot;https://cs.anu.edu.au/code-creativity-culture/charles-martin/&quot;&gt;Charles
Martin&lt;/a&gt; will be
convening &amp;amp; running COMP2300—and he’ll do a great job. I’ll probably pop in
from time to time to give a guest lecture (and maybe even sing a revision song)
but he’ll be the main convenor. So if you’ve got any questions about taking that
course in 2020 (either as a student, or perhaps as part of the tutoring team)
then you should reach out to &lt;a href=&quot;mailto:charles.martin@anu.edu.au&quot;&gt;Charles&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:organised-ones&quot;&gt;
      &lt;p&gt;well, the organised ones, anyway &lt;a href=&quot;#fnref:organised-ones&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Ben Swift</name></author><category term="teaching" /><summary type="html">Students1 are starting to turn their gaze towards 2020, and so I’ve been getting a bunch of emails asking me if I’m teaching COMP2300/6300 Computer Organisation &amp;amp; Program Execution again in Semester 1 2020. well, the organised ones, anyway &amp;#8617;</summary></entry><entry><title type="html">Making Altair/Vega-Lite charts readable without squinting</title><link href="https://benswift.me/blog/2019/10/16/making-altair-vega-lite-charts-readable-without-squinting/" rel="alternate" type="text/html" title="Making Altair/Vega-Lite charts readable without squinting" /><published>2019-10-16T20:14:00+11:00</published><updated>2019-10-16T20:14:00+11:00</updated><id>https://benswift.me/blog/2019/10/16/making-altair-vega-lite-charts-readable-without-squinting</id><content type="html" xml:base="https://benswift.me/blog/2019/10/16/making-altair-vega-lite-charts-readable-without-squinting/">&lt;p&gt;My love for the &lt;a href=&quot;https://www.amazon.com/Grammar-Graphics-Statistics-Computing/dp/0387245448&quot;&gt;Grammar of
Graphics&lt;/a&gt;
runs deep, and in particular for Hadley Wickham’s famous &lt;code&gt;ggplot2&lt;/code&gt; which showed
me the light back when I was a young PhD student. Seriously, once you have your
head around how it works it gives you datavis superpowers. These days I often
work in Python, and for datavis I’m enjoying
&lt;a href=&quot;https://altair-viz.github.io/index.html&quot;&gt;Altair&lt;/a&gt; which is based around the same
philosophy (and outputs to &lt;a href=&quot;https://vega.github.io/vega-lite/&quot;&gt;Vega-Lite&lt;/a&gt; for
rendering in the browser).&lt;/p&gt;

&lt;p&gt;Recently I’ve needed to (a) create some snazzy graphs with Altair and (b)
display them in a slide deck. Part (a) was actually the easy part—the tricky
part was (b) getting Altair to render charts with text &amp;amp; other marks that
weren’t so small that the slide was unreadable.&lt;/p&gt;

&lt;p&gt;Here’s an example: a &lt;a href=&quot;https://altair-viz.github.io/gallery/simple_line_chart.html&quot;&gt;simple line
chart&lt;/a&gt; from the
&lt;a href=&quot;https://altair-viz.github.io/gallery/index.html&quot;&gt;Altair Example Gallery&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;import altair as alt
import numpy as np
import pandas as pd

x = np.arange(100)
source = pd.DataFrame({&quot;x&quot;: x, &quot;f(x)&quot;: np.sin(x / 5)})

alt.Chart(source).mark_line().encode(x=&quot;x&quot;, y=&quot;f(x)&quot;).save(f&quot;{CHART_DIR}/sin-x.svg&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;which (with default settings) produces a chart that looks like this:&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;f(x) = sin(x)/5&quot; src=&quot;/assets/images/posts/altair-charts/sin-x.svg&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;easy-tweaking-of-size-through-chart-themes&quot;&gt;Easy tweaking of “size” through chart themes&lt;/h2&gt;

&lt;p&gt;Now, that figure might look fairly readable, but when it’s on a slide the text,
labels &amp;amp; even lines are quite small&lt;sup id=&quot;fnref:examples&quot;&gt;&lt;a href=&quot;#fn:examples&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;. I don’t need &lt;a href=&quot;https://github.com/vega/vega-lite/issues/1714&quot;&gt;fine-grained
control&lt;/a&gt; over the relative sizes
of labels vs legend vs title, etc. I just want a simple knob for making all the
text bigger so that my slides don’t double as an &lt;a href=&quot;https://en.wikipedia.org/wiki/Eye_chart&quot;&gt;eye
chart&lt;/a&gt;. The Vega-Lite folks (the
underlying vis engine which Altair uses) &lt;a href=&quot;https://github.com/vega/vega-parser/issues/18&quot;&gt;know about the issue, but don’t want
to fix it&lt;/a&gt;.&lt;/p&gt;

&lt;p class=&quot;hl-para&quot;&gt;Note that when I’m talking about “size” I’m &lt;strong&gt;not&lt;/strong&gt; talking about the size &amp;amp;
dimensions of the chart—I’m talking about the size of the text, lines &amp;amp; other
marks &lt;em&gt;relative to&lt;/em&gt; the overall size of the chart.&lt;/p&gt;

&lt;p&gt;The easiest way I found to fix this is to set a small width &amp;amp; height for the
chart, then export to a vector format (e.g. svg) so that when the image gets
displayed everything will be “stretched” up into big, bold sizes (and since it’s
a vector format, things will still be nice and crisp). This chart code is the
same except for the &lt;code&gt;.properties(width=100, height=60)&lt;/code&gt; part:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;alt.Chart(source).mark_line().encode(x=&quot;x&quot;, y=&quot;f(x)&quot;).properties(
    width=100, height=60
).save(f&quot;{CHART_DIR}/sin-x-big-text.svg&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img alt=&quot;f(x) = sin(x)/5 with bigger labels&quot; src=&quot;/assets/images/posts/altair-charts/sin-x-big-text.svg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Obviously I’m exaggerating here to make a point, but the key point is that there
are just a couple of numbers to tweak (&lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt;) which control text
&amp;amp; line size, label sizes, and also titles and legends (if present). And that’s
not something that’s exposed as simply in any other way by the Altair/Vega-Lite
API.&lt;/p&gt;

&lt;p&gt;One final tip: if you want to have consistent sizes &amp;amp; aspect ratios across lots
of charts (e.g. you’re batch exporting lots of charts for a presentation or
report) you can create &lt;a href=&quot;https://altair-viz.github.io/user_guide/configuration.html#defining-a-custom-theme&quot;&gt;a custom
theme&lt;/a&gt;,
but otherwise you can just do it with a call to the &lt;code&gt;.properties()&lt;/code&gt; method as
shown.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:examples&quot;&gt;

      &lt;p&gt;To be honest, these simple examples from the example gallery don’t really
help me make my point, they’re still pretty readable. But when the charts
get more complicated &amp;amp; have more data marks then things get smaller &amp;amp; more
zoomed out, and the problem gets much worse. &lt;a href=&quot;#fnref:examples&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Ben Swift</name></author><category term="web" /><category term="python" /><summary type="html">My love for the Grammar of Graphics runs deep, and in particular for Hadley Wickham’s famous ggplot2 which showed me the light back when I was a young PhD student. Seriously, once you have your head around how it works it gives you datavis superpowers. These days I often work in Python, and for datavis I’m enjoying Altair which is based around the same philosophy (and outputs to Vega-Lite for rendering in the browser).</summary></entry><entry><title type="html">Package managers: update or upgrade?</title><link href="https://benswift.me/blog/2019/10/16/package-managers-update-or-upgrade/" rel="alternate" type="text/html" title="Package managers: &lt;code&gt;update&lt;/code&gt; or &lt;code&gt;upgrade&lt;/code&gt;?" /><published>2019-10-16T00:00:00+11:00</published><updated>2019-10-16T00:00:00+11:00</updated><id>https://benswift.me/blog/2019/10/16/package-managers-update-or-upgrade</id><content type="html" xml:base="https://benswift.me/blog/2019/10/16/package-managers-update-or-upgrade/">&lt;p&gt;Quick quiz: for the following language/system &lt;a href=&quot;https://en.wikipedia.org/wiki/Package_manager&quot;&gt;package
managers&lt;/a&gt;, what’s the name of the
subcommand to update&lt;sup id=&quot;fnref:or-upgrade&quot;&gt;&lt;a href=&quot;#fn:or-upgrade&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; your project/system to the latest version of
one (or more) of your project’s dependencies?&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;package manager&lt;/th&gt;
      &lt;th&gt;language/system&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;bundle&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Ruby&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;pip&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Python&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;poetry&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Python&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;pipenv&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Python&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;npm&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;javascript&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;yarn&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;javascript&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;brew&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;macOS&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;apt-get&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Debian&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;cargo&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Rust&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;stack&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Haskell&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;lein&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Clojure&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;dep&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Go&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;cpan&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Perl&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;button onclick=&quot;document.getElementById(&amp;quot;answer-table&amp;quot;).style.visibility=&amp;quot;visible&amp;quot;;&quot;&gt;click to reveal the answers&lt;/button&gt;&lt;/p&gt;

&lt;table id=&quot;answer-table&quot; style=&quot;visibility: hidden;&quot;&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;package manager&lt;/th&gt;
      &lt;th&gt;language/system&lt;/th&gt;
      &lt;th&gt;(sub)command name&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;bundle&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Ruby&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;upgrade&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;pip&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Python&lt;/td&gt;
      &lt;td&gt;go away&lt;sup id=&quot;fnref:pip&quot;&gt;&lt;a href=&quot;#fn:pip&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;poetry&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Python&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;update&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;pipenv&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Python&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;update&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;npm&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;javascript&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;update&lt;/code&gt; or &lt;code&gt;upgrade&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;yarn&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;javascript&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;upgrade&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;brew&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;macOS&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;upgrade&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;apt-get&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Debian&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;upgrade&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;cargo&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Rust&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;update&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;stack&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Haskell&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;update&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;lein&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Clojure&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;ancient upgrade&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;dep&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Go&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;ensure -update&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;cpan&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Perl&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;upgrade&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;For bonus points, which of them &lt;em&gt;also&lt;/em&gt; recognise the “other” subcommand but it
does something different? For even more bonus points, when does that “other”
option do something unwanted/destructive/irreversible (assuming that all you
want to do is update that dependency to the latest version)?&lt;/p&gt;

&lt;p class=&quot;hl-para&quot;&gt;Look, I’m not at all saying that you should just go and blindly
&lt;code&gt;update&lt;/code&gt;/&lt;code&gt;upgrade&lt;/code&gt; all of the things—that’s clearly a bad idea. But it still
takes me a non-zero amount of time as I switch between languages/tools to sit
and think “ok, for this project do I want to &lt;code&gt;update&lt;/code&gt; or &lt;code&gt;upgrade&lt;/code&gt;”? And that
makes me sad.&lt;/p&gt;

&lt;p&gt;If there’s a deep, principled (or even a shallow, pragmatic) reason to pick one
or the other then we should observe it, and do it &lt;em&gt;consistently&lt;/em&gt;. Even if
there’s not, we should toss a coin and be consistent anyway.&lt;/p&gt;

&lt;p&gt;If any of the above commands are incorrect, or if there’s a better way, then
&lt;a href=&quot;https://twitter.com/benswift&quot;&gt;ping me on twitter&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:or-upgrade&quot;&gt;
      &lt;p&gt;or, y’know, upgrade &lt;a href=&quot;#fnref:or-upgrade&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:pip&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://github.com/pypa/pip/issues/59&quot;&gt;https://github.com/pypa/pip/issues/59&lt;/a&gt; &lt;a href=&quot;#fnref:pip&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Ben Swift</name></author><category term="tools" /><category term="ux" /><summary type="html">Quick quiz: for the following language/system package managers, what’s the name of the subcommand to update1 your project/system to the latest version of one (or more) of your project’s dependencies? or, y’know, upgrade &amp;#8617;</summary></entry><entry><title type="html">Sound file I/O in Extempore with libsndfile</title><link href="https://benswift.me/blog/2019/10/15/sound-file-io-in-extempore-with-libsndfile/" rel="alternate" type="text/html" title="Sound file I/O in Extempore with libsndfile" /><published>2019-10-15T00:00:00+11:00</published><updated>2019-10-15T00:00:00+11:00</updated><id>https://benswift.me/blog/2019/10/15/sound-file-io-in-extempore-with-libsndfile</id><content type="html" xml:base="https://benswift.me/blog/2019/10/15/sound-file-io-in-extempore-with-libsndfile/">&lt;p&gt;&lt;a href=&quot;https://github.com/erikd/libsndfile/&quot;&gt;libsndfile&lt;/a&gt; is “a C library for reading
and writing files containing sampled audio data”, and it’s pretty great. Here’s
a quick crash-course on using &lt;a href=&quot;https://github.com/digego/extempore/blob/master/libs/external/sndfile.xtm&quot;&gt;Extempore’s libsndfile
bindings&lt;/a&gt;
to read, process and write audio data files.&lt;/p&gt;

&lt;p class=&quot;hl-para&quot;&gt;There have been some recent bugfixes in &lt;code&gt;libsndfile&lt;/code&gt;, and (even more recently)
these have made it into Extempore, which builds it’s own &lt;code&gt;libsndfile&lt;/code&gt; shared
library as part of the CMake build process. So if you want to try this stuff
it’s probably best that you’ve built the latest Extempore from &lt;code&gt;HEAD&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;loading-the-xtlang-wrappers-for-the-sndfile-library-functions&quot;&gt;Loading the xtlang wrappers for the sndfile library functions&lt;/h2&gt;

&lt;p&gt;Once you’ve got Extempore up and running, the first thing to do is to load the
libsndfile wrapper functions:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-xtlang&quot;&gt;(sys:load &quot;libs/external/sndfile.xtm&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;libs/external/sndlib.xtm&lt;/code&gt; contains &lt;code&gt;bind-lib&lt;/code&gt; definitions for all&lt;sup id=&quot;fnref:pm-all&quot;&gt;&lt;a href=&quot;#fn:pm-all&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; the
functions in the libsndfile library (compare that file to the &lt;a href=&quot;https://github.com/erikd/libsndfile/blob/master/src/sndfile.h.in&quot;&gt;C
header&lt;/a&gt; to see
for yourself).&lt;/p&gt;

&lt;p&gt;In this blog post I’m mostly going to write “thin” xtlang code—calling the C
functions directly wherever possible, and using the same basic types as the
underlying C library. You could easily write xtlang helper functions to make all
this stuff nicer, and &lt;code&gt;libs/external/sndfile.xtm&lt;/code&gt; actually has a bunch of these
as well (down the bottom of that file). However, I hope this bare-bones approach
is helpful for understanding what’s going on (and how you might use other C
shared libs if you wanted to).&lt;/p&gt;

&lt;h2 id=&quot;reading-the-audio-file-data-into-memory&quot;&gt;Reading the audio file data into memory&lt;/h2&gt;

&lt;p&gt;In a fairly common API design pattern, to get info about a sound file (length, channels,
sample rate, format, etc.) we need to:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;use &lt;code&gt;sf_open&lt;/code&gt; to give us a pointer to the data structure which libsndfile
uses to represent the audio file (a &lt;code&gt;SNDFILE*&lt;/code&gt;)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;pass a pointer to another data structure (a &lt;code&gt;SF_INFO*&lt;/code&gt;) which &lt;code&gt;sf_open&lt;/code&gt; will
populate with info about the file&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;sf_open&lt;/code&gt; doesn’t read the audio data into memory (where we can do stuff with
it) though—because first we need to figure out how big a buffer to allocate
for the data—and to do that, we need to know how many frames there are in the
audio file, and how many channels per frame.&lt;/p&gt;

&lt;p&gt;Looking at the documentation (i.e. the comment above the function declaration in
the C header file) for &lt;code&gt;SF_INFO&lt;/code&gt; we see that the first (tuple index &lt;code&gt;0&lt;/code&gt;) and third
(tuple index &lt;code&gt;2&lt;/code&gt;) fields are going to be useful&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-c&quot;&gt;struct SF_INFO
{   sf_count_t  frames ;        /* Used to be called samples.  Changed to avoid confusion. */
    int         samplerate ;
    int         channels ;
    int         format ;
    int         sections ;
    int         seekable ;
} ;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using all this info, then, we can make a simple xtlang function to return the
number of frames&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-xtlang&quot;&gt;(bind-func get_number_of_frames
  (lambda (filename)
    (let ((info:SF_INFO* (salloc))
          ;; call sf_info to populate info with data about the file
          (sfile (sf_open filename SFM_READ info)))
      (sf_close sfile)
      ;; return the number of frames
      (tref info 0))))

;; test it out using a wave file from the Extempore assets directory
;; (it should return the number 288366)
(get_number_of_frames &quot;assets/samples/piano/60.wav&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;{.hl-para}&lt;/p&gt;

&lt;p&gt;Most of the code in this post doesn’t check for e.g. bad filenames or other
potential errors, so if that’s a thing which might happen in your situation then
you’ll need to check that &lt;code&gt;sf_open&lt;/code&gt; doesn’t return &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We can do the exact same thing to get the number of channels per frame (just
returning a different element of the &lt;code&gt;info&lt;/code&gt; struct):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-xtlang&quot;&gt;(bind-func get_number_of_channels
  (lambda (filename)
    (let ((info:SF_INFO* (salloc))
          (sfile (sf_open filename SFM_READ info)))
      (sf_close sfile)
      ;; return the number of channels
      (tref info 2))))

;; returns 2 (it's a stereo file)
(get_number_of_channels &quot;assets/samples/piano/60.wav&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, we can calculate how many samples (num frames × num channels) we’ll
need in our “audio data” buffer. We can then use &lt;code&gt;sf_read&lt;/code&gt; to read the audio
data from the file into our buffer, converting it to e.g. &lt;code&gt;float&lt;/code&gt; (or whatever
the type of &lt;code&gt;SAMPLE&lt;/code&gt; is) as we go (libsndfile can read audio files in a bunch of
different formats, but for working with it in Extempore we just want floating
point values).&lt;/p&gt;

&lt;p&gt;First, set up a DSP callback—just playing white noise so that we can check
that it’s working.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-xtlang&quot;&gt;(bind-func dsp:DSP
  (lambda (in time chan dat)
    (random .1)))

(dsp:set! dsp)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, we add a bunch of sndfile-related stuff to the top-level &lt;code&gt;dsp&lt;/code&gt; closure
environment (the outer &lt;code&gt;let&lt;/code&gt;) to&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;get the number of frames/channels from the file&lt;/li&gt;
  &lt;li&gt;allocate a &lt;code&gt;SAMPLE&lt;/code&gt;&lt;sup id=&quot;fnref:sample&quot;&gt;&lt;a href=&quot;#fn:sample&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; buffer big enough to fit all the audio data&lt;/li&gt;
  &lt;li&gt;read the audio file data into this buffer&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Finally, in the inner &lt;code&gt;lambda&lt;/code&gt; we have a super-naive playback loop (look at the
way we’re incrementing &lt;code&gt;i&lt;/code&gt;—this will only work if the number of output
channels matches the number of channels in the audio file).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-xtlang&quot;&gt;(bind-func dsp:DSP 10000000 ;; allocate plenty of memory for our DSP closure

  (let ((filename &quot;assets/samples/piano/60.wav&quot;)
        (nframes (get_number_of_frames filename))
        (nchan (convert (get_number_of_channels filename)))
        (nsamp (* nframes nchan))
        (info:SF_INFO* (alloc))
        (sfile (sf_open filename SFM_READ info)) ;; SFM_READ = open the audio file in &quot;read-only&quot; mode
        ;; here's the pointer to the audio data
        (data:SAMPLE* (alloc nsamp))
        (i 0))

    (println &quot;read&quot; (sf_read sfile data nsamp) &quot;frames&quot;)
    (sf_close sfile)

    (lambda (in time chan dat)
      ;; a super-naive &quot;playback&quot; loop
      (set! i (% (+ i 1) nsamp))
      (* .2 (pref data i)))))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If it’s all worked, you should hear a piano playing repeated (legato) notes on
middle C.&lt;/p&gt;

&lt;p&gt;Of course, we could have simplified this by just calling &lt;code&gt;sf_open&lt;/code&gt; and
populating the &lt;code&gt;info&lt;/code&gt; with data once at the top of an xtlang function, then
doing stuff based on that information and finally &lt;code&gt;sf_close&lt;/code&gt;ing the file at the
end. That’s left as an exercise for the reader 😉&lt;/p&gt;

&lt;p class=&quot;hl-para&quot;&gt;One thing worth noting with all this is that calling a C lib from Extempore
doesn’t obviate the need to understand how the C library works, e.g. we still
need to match every call to &lt;code&gt;sf_open&lt;/code&gt; with a call to &lt;code&gt;sf_close&lt;/code&gt; as stated in the
libsndfile docs.&lt;/p&gt;

&lt;h2 id=&quot;writing-data-in-memory-to-an-audio-file&quot;&gt;Writing data in memory to an audio file&lt;/h2&gt;

&lt;p&gt;There’s one more thing we want to do with our libsndfile library: write a bunch
of audio data (which we’ve gloriously munged in Extempore) and write it back to
an audio file.&lt;/p&gt;

&lt;p&gt;Here’s a simple munging function which will replace the first &lt;code&gt;22050&lt;/code&gt; samples
with white noise, then leave the next &lt;code&gt;22050&lt;/code&gt; untouched, then replace the next
&lt;code&gt;22050&lt;/code&gt; with more white noise, and so on. I’m sure you can come up with
something more (sonically) interesting; this is just an easy one to test (by
ear) if it’s working.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-xtlang&quot;&gt;(bind-func munge_audio_data
  (lambda (data:SAMPLE* nsamp)
    (doloop (i nsamp)
      (if (&amp;lt; (modulo i 44100) 22050)
          (pset! data i (random .1))))))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The final thing to do is to create &lt;em&gt;another&lt;/em&gt; &lt;code&gt;SNDFILE&lt;/code&gt; object (this time opened
in &lt;code&gt;SFM_WRITE&lt;/code&gt; mode) where we’ll write the audio data. We’ll make some small
additions to our &lt;code&gt;dsp&lt;/code&gt; closure:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-xtlang&quot;&gt;(bind-func dsp:DSP 10000000 ;; allocate plenty of memory for our DSP closure

  (let ((filename &quot;assets/samples/piano/60.wav&quot;)
        (nframes (get_number_of_frames filename))
        (nchan (convert (get_number_of_channels filename)))
        (nsamp (* nframes nchan))
        (info:SF_INFO* (alloc))
        (srcfile (sf_open filename SFM_READ info))
        (dstfile (sf_open  &quot;assets/samples/piano/60-munged.wav&quot; SFM_WRITE info))
        ;; here's the pointer to the audio data
        (data:SAMPLE* (alloc nsamp))
        (i 0))

    (println &quot;read&quot; (sf_read srcfile data nsamp) &quot;frames&quot;)
    (sf_close srcfile)

    ;; munge the audio data
    (munge_audio_data data nsamp)

    (println &quot;wrote&quot; (sf_write dstfile data nsamp) &quot;frames&quot;)
    (sf_close dstfile)

    (lambda (in time chan dat)
      ;; a super-naive &quot;playback&quot; loop
      (set! i (% (+ i 1) nsamp))
      (* .2 (pref data i)))))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you re-evaluate &lt;em&gt;that&lt;/em&gt; &lt;code&gt;dsp&lt;/code&gt; closure, you should (a) hear the munged audio
and (b) it should have been written to the “assets/samples/piano/60-munged.wav”
file. Note that we re-used the &lt;code&gt;info&lt;/code&gt; data structure (which was populated with
the info from &lt;code&gt;srcfile&lt;/code&gt;) in the &lt;code&gt;dstfile&lt;/code&gt; call—this is deliberate, and makes
sure that we use the same file format for the output file as for the input file.
If you want to write it in some &lt;em&gt;other&lt;/em&gt; format, then look at the libsndfile
docs—there are lots of options.&lt;/p&gt;

&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;

&lt;p&gt;There’s lots more to explore, but I’ll leave it here for now. If you’ve got any
comments, then get in touch on the &lt;a href=&quot;mailto:extemporelang@googlegroups.com&quot;&gt;Extempore mailing
list&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;[c-xtlang-interop]:
    There’s more detail on how this works in the
    &lt;a href=&quot;https://extemporelang.github.io/docs/reference/c-xtlang-interop/&quot;&gt;Extempore
    docs&lt;/a&gt;
    if you’re interested.&lt;/p&gt;
&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:pm-all&quot;&gt;
      &lt;p&gt;well, &lt;em&gt;pretty much&lt;/em&gt; all &lt;a href=&quot;#fnref:pm-all&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:sample&quot;&gt;
      &lt;p&gt;&lt;code&gt;SAMPLE&lt;/code&gt; is an alias for &lt;code&gt;float&lt;/code&gt; by default &lt;a href=&quot;#fnref:sample&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Ben Swift</name></author><category term="extempore" /><summary type="html">libsndfile is “a C library for reading and writing files containing sampled audio data”, and it’s pretty great. Here’s a quick crash-course on using Extempore’s libsndfile bindings to read, process and write audio data files.</summary></entry><entry><title type="html">IoT China Study Tour not happening in 2019</title><link href="https://benswift.me/blog/2019/10/14/iot-china-study-tour-not-happening-in-2019/" rel="alternate" type="text/html" title="IoT China Study Tour not happening in 2019" /><published>2019-10-14T00:00:00+11:00</published><updated>2019-10-14T00:00:00+11:00</updated><id>https://benswift.me/blog/2019/10/14/iot-china-study-tour-not-happening-in-2019</id><content type="html" xml:base="https://benswift.me/blog/2019/10/14/iot-china-study-tour-not-happening-in-2019/">&lt;p&gt;In the (Australian) Summer of ‘16/17, ‘17/18 and ‘18/19 I ran an &lt;a href=&quot;https://cs.anu.edu.au/courses/china-study-tour/&quot;&gt;&lt;em&gt;Internet of
Things&lt;/em&gt; China Study Tour&lt;/a&gt; at
the Beijing Institute of Technology. They were good times.&lt;/p&gt;

&lt;picture&gt;
  &lt;img alt=&quot;a bunch of students
and I at the Great Wall of China in Dec. 2018&quot; src=&quot;/assets/images/posts/great-wall-of-china-2018.jpg&quot; /&gt;
&lt;/picture&gt;

&lt;p&gt;However, the &lt;a href=&quot;https://dfat.gov.au/people-to-people/new-colombo-plan/about/Pages/about.aspx&quot;&gt;New Colombo
Plan&lt;/a&gt;
grant (which provided the money for us to provide the travel &amp;amp; accommodation
scholarships for the study tour) expired last year—it was only a 3-year thing.
As a result, the BIT trip is not running this year (Summer ‘19/20). It &lt;em&gt;might&lt;/em&gt;
happen in future years (if we get more grant funding) but I’m afraid I can’t be
certain about that.&lt;/p&gt;

&lt;p&gt;If you’re interested in “study abroad” opportunities more generally then the
nice folks at &lt;a href=&quot;https://www.anu.edu.au/students/careers-opportunities/global-programs&quot;&gt;ANU Global
Programs&lt;/a&gt;
are the best people to talk to.&lt;/p&gt;</content><author><name>Ben Swift</name></author><category term="teaching" /><summary type="html">In the (Australian) Summer of ‘16/17, ‘17/18 and ‘18/19 I ran an Internet of Things China Study Tour at the Beijing Institute of Technology. They were good times.</summary></entry><entry><title type="html">Laptop Ensemble in the Canberra Times</title><link href="https://benswift.me/blog/2019/10/01/laptop-ensemble-in-the-canberra-times/" rel="alternate" type="text/html" title="Laptop Ensemble in the Canberra Times" /><published>2019-10-01T00:00:00+10:00</published><updated>2019-10-01T00:00:00+10:00</updated><id>https://benswift.me/blog/2019/10/01/laptop-ensemble-in-the-canberra-times</id><content type="html" xml:base="https://benswift.me/blog/2019/10/01/laptop-ensemble-in-the-canberra-times/">&lt;p&gt;The ANU Laptop Ensemble (LENS) is in the Canberra Times this morning: &lt;a href=&quot;https://www.canberratimes.com.au/story/6412297/anu-school-of-musics-new-orchestra-is-far-from-conventional/&quot;&gt;ANU
School of Music’s new orchestra is far from
conventional&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There’s some really encouraging stuff in there from ANU School of Music head
&lt;a href=&quot;https://music.cass.anu.edu.au/people/associate-professor-kim-cunio&quot;&gt;Kim Cunio&lt;/a&gt;
about the role of code in music-making:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“We want to re-imagine what an orchestra is,” he says. “My vision is to train
musicians that are part composers, part mathematicians, and part computer
hackers.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I’m so pumped—this is exactly what I’ve been trying to do for several years,
and having Kim on board as an ally is very encouraging. Along with the CECS
Reimagine agenda (including their support of my &lt;a href=&quot;/blog/2019/08/30/Im-a-reimagine-fellow/&quot;&gt;fellowship&lt;/a&gt; to put together the &lt;a href=&quot;/blog/2019/03/20/reimagine-fellow-project-pitch/&quot;&gt;c/c/c
studio&lt;/a&gt;) and the great things
happening &lt;a href=&quot;https://soad.cass.anu.edu.au&quot;&gt;elsewhere&lt;/a&gt; in
&lt;a href=&quot;https://cdhr.cass.anu.edu.au&quot;&gt;CASS&lt;/a&gt;, there’s good vibes in the air around
cross-disiplinary code, creativity and culture at the ANU.&lt;/p&gt;

&lt;p&gt;The article ends by saying:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Cunio hopes experiments with science, maths and technology will also open
“back doors” into music for a new breed of student.&lt;/p&gt;

  &lt;p&gt;“Sometimes the best musicians are lost to music.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I suspect that sometimes the best computer scientists are lost to CS as well.
Hopefully programs like the LENS can change that.&lt;/p&gt;</content><author><name>Ben Swift</name></author><category term="teaching" /><category term="reimagine" /><category term="lens" /><summary type="html">The ANU Laptop Ensemble (LENS) is in the Canberra Times this morning: ANU School of Music’s new orchestra is far from conventional.</summary></entry></feed>