<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.0">Jekyll</generator><link href="https://benswift.me/feed.xml" rel="self" type="application/atom+xml" /><link href="https://benswift.me/" rel="alternate" type="text/html" /><updated>2020-07-17T14:02:27+10:00</updated><id>https://benswift.me/feed.xml</id><title type="html">benswift.me</title><subtitle>livecoder &amp; researcher homepage - code, creativity, culture</subtitle><author><name>Ben Swift</name></author><entry><title type="html">mbsync v1.3.2 breaks Maildir for fastmail</title><link href="https://benswift.me/blog/2020/07/17/mbsync-v1-3-2-breaks-maildir-for-fastmail/" rel="alternate" type="text/html" title="mbsync v1.3.2 breaks Maildir for fastmail" /><published>2020-07-17T00:00:00+10:00</published><updated>2020-07-17T00:00:00+10:00</updated><id>https://benswift.me/blog/2020/07/17/mbsync-v1-3-2-breaks-maildir-for-fastmail</id><content type="html" xml:base="https://benswift.me/blog/2020/07/17/mbsync-v1-3-2-breaks-maildir-for-fastmail/">&lt;p&gt;As part of my ongoing quest to Emacs-all-the-things, I’m a long-time satisfied
user of the &lt;a href=&quot;https://www.djcbsoftware.nl/code/mu/&quot;&gt;mu&lt;/a&gt; email client. I even
&lt;a href=&quot;https://github.com/djcb/mu/pull/1725&quot;&gt;wrote the latest CI infrastructure setup&lt;/a&gt;
for the project as a way to give back to Dirk-Jan and the rest of the awesome mu
team.&lt;/p&gt;

&lt;p&gt;Anyway, mu doesn’t care how you get your email onto your machine (i.e. into your
&lt;code&gt;~/Maildir&lt;/code&gt;), and so for that task I use
&lt;a href=&quot;http://isync.sourceforge.net/mbsync.html&quot;&gt;isync/mbsync&lt;/a&gt; to download my mail
(via IMAP) from &lt;a href=&quot;https://www.fastmail.com/&quot;&gt;fastmail&lt;/a&gt;. My fastmail &lt;a href=&quot;https://github.com/benswift/.dotfiles/blob/master/mbsyncrc&quot;&gt;config
is&lt;/a&gt; if you want to
see how I set it all up.&lt;/p&gt;

&lt;p&gt;Everything was working swimmingly, until a recent patch version update to mbsync
(1.3.1 -&amp;gt; 1.3.2) broke things. All of a sudden, I started getting errors like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Maildir error: found subfolder 'INBOX/Sent Items', but store 'fastmail-local' does not specify SubFolders style
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There was no mention of a breaking change relating to &lt;code&gt;SubFolders&lt;/code&gt; style in the
&lt;a href=&quot;https://sourceforge.net/projects/isync/files/isync/1.3.2/&quot;&gt;v1.3.2 release
notes&lt;/a&gt;, but a look at
the manual with &lt;code&gt;man mbsync&lt;/code&gt; revealed this info:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;SubFolders&lt;/strong&gt; &lt;code&gt;Verbatim|Maildir++|Legacy&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;The on-disk folder naming style used for hierarchical mailboxes. This option
has no effect when &lt;code&gt;Flatten&lt;/code&gt; is used. Suppose mailboxes with the canonical
paths &lt;code&gt;top/sub/subsub&lt;/code&gt; and &lt;code&gt;INBOX/sub/subsub&lt;/code&gt;, the styles will yield the
following on-disk paths:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;em&gt;Verbatim&lt;/em&gt; - &lt;code&gt;Path/top/sub/subsub&lt;/code&gt; and &lt;code&gt;Inbox/sub/subsub&lt;/code&gt; (this is the style
you probably want to use)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;em&gt;Maildir++&lt;/em&gt; - &lt;code&gt;Inbox/.top.sub.subsub&lt;/code&gt; and &lt;code&gt;Inbox/..sub.subsub&lt;/code&gt; (this style
is compatible with Courier and Dovecot - but note that the mailbox metadata
format is not compatible). Note that attempts to set Path are rejected in
this mode.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;em&gt;Legacy&lt;/em&gt; - &lt;code&gt;Path/top/.sub/.subsub&lt;/code&gt; and &lt;code&gt;Inbox/.sub/.subsub&lt;/code&gt; (this is
mbsync’s historical style)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;em&gt;Default&lt;/em&gt;: unset; will error out when sub-folders are encountered&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By setting &lt;code&gt;SubFolders Verbatim&lt;/code&gt; in my &lt;code&gt;.mbsyncrc&lt;/code&gt; things started working again.
Hooray!&lt;/p&gt;</content><author><name>Ben Swift</name></author><category term="tools" /><category term="emacs" /><summary type="html">As part of my ongoing quest to Emacs-all-the-things, I’m a long-time satisfied user of the mu email client. I even wrote the latest CI infrastructure setup for the project as a way to give back to Dirk-Jan and the rest of the awesome mu team.</summary></entry><entry><title type="html">ACMC2020: tools for organising a virtual conference</title><link href="https://benswift.me/blog/2020/07/15/acmc2020-organising-my-first-virtual-conference/" rel="alternate" type="text/html" title="ACMC2020: tools for organising a virtual conference" /><published>2020-07-15T00:00:00+10:00</published><updated>2020-07-15T00:00:00+10:00</updated><id>https://benswift.me/blog/2020/07/15/acmc2020-organising-my-first-virtual-conference</id><content type="html" xml:base="https://benswift.me/blog/2020/07/15/acmc2020-organising-my-first-virtual-conference/">&lt;p&gt;I’ve been a bit quiet on this blog for the last few weeks&lt;sup id=&quot;fnref:weeks&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:weeks&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; because I’ve
been organising &lt;a href=&quot;https://acmc2020.com/&quot;&gt;ACMC2020&lt;/a&gt;: the &lt;em&gt;2020 Australasian Computer
Music Conference&lt;/em&gt;. From the conference landing page:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;This year’s conference theme is &lt;strong&gt;inclusion&lt;/strong&gt;. We want to highlight the
diverse range of people who contribute to Australia’s computer/electronic
music culture but may not normally attend an academic conference, including
artists and scholars who are young/emerging, from regional/remote areas, who
have a disability, who are First Nations People, who have low/no income, who
are engaged in community music making, or who simply work outside of academia
and mainstream institutions.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Well, the conference is now all done for 2020 (although the videos are still
freely available online; check out our
&lt;a href=&quot;https://www.youtube.com/watch?v=v6muRCIp3Kg&amp;amp;list=PL4_Bp-PE5_5sgaN4pIzrz0KGBn0RXramC&quot;&gt;keynotes&lt;/a&gt;).
It’s been a lot of hard work, but the ACMC community are &lt;em&gt;amazing&lt;/em&gt;, so it’s been
pretty fun as well. A special shout out to the rest of the ACMC &lt;a href=&quot;https://acmc2020.com/#Organisers&quot;&gt;organising
committee&lt;/a&gt; (Charles, Nat, Sia, Kit &amp;amp; Alec) for
all their hard work—thanks team :) So even though I’m writing this blog post,
these decisions &amp;amp; reflections are really the result of our combined labour, as
well as feedback from the ACMC community during the conference.&lt;/p&gt;

&lt;div id=&quot;toc&quot;&gt;

  &lt;h2&gt;table of contents&lt;/h2&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#tools-for-running-an-online-conference-in-2020&quot; id=&quot;markdown-toc-tools-for-running-an-online-conference-in-2020&quot;&gt;Tools for running an online conference in 2020&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#website&quot; id=&quot;markdown-toc-website&quot;&gt;Conference website&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#easychair&quot; id=&quot;markdown-toc-easychair&quot;&gt;Submissions &amp;amp; peer review&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#google-docs&quot; id=&quot;markdown-toc-google-docs&quot;&gt;Scheduling/programming the sessions&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#youtube&quot; id=&quot;markdown-toc-youtube&quot;&gt;Video presentations&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#discord&quot; id=&quot;markdown-toc-discord&quot;&gt;Q&amp;amp;A and discussion&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#going-to-the-pub-after-the-session&quot; id=&quot;markdown-toc-going-to-the-pub-after-the-session&quot;&gt;Going to the pub after the session&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;

&lt;h2 id=&quot;tools-for-running-an-online-conference-in-2020&quot;&gt;Tools for running an online conference in 2020&lt;/h2&gt;

&lt;p&gt;This post isn’t about the success (or otherwise) of ACMC2020 as an inclusive,
affirming computer music conference. I care about that a lot, and that post is
in the works, but this isn’t it.&lt;/p&gt;

&lt;p&gt;Instead, this post is a list of all the tools that we chose to use to put it all
together, and the rationale behind those decisions. There are lots of people all
around the world organising virtual conferences right now, so hopefully writing
down our experiences is helpful.&lt;/p&gt;

&lt;p&gt;As the hosts of a virtual ACMC, our priorities were:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;to minimise the risk technical difficulties, “live” activities were limited
to those where they add value (for example all talks were pre-recorded &amp;amp;
watched on YouTube to avoid the technical issues which come with live
screen-shared zoom presentations)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;use synchronous communication modes for discussion and q&amp;amp;a, but with
persistence: leave participants the option of returning to a discussion later
(or for leaving a question for a presenter in a different timezone, to be
answered at a friendlier time for them)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;where possible, use low-cost (because the ACMC doesn’t have a huge budget)
and open-source tools (so that the things we learn can be built upon by
others)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;automate all the things; it probably goes without saying if you know me or
read my blog, but manual work makes me sad and continuous integration
pipelines make me happy ☺&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p class=&quot;hl-para&quot;&gt;&lt;strong&gt;tl;dr&lt;/strong&gt; we used &lt;a href=&quot;https://easychair.org/&quot;&gt;EasyChair&lt;/a&gt; for submissions &amp;amp; peer
review, a &lt;a href=&quot;https://github.com/australasian-computer-music-association/acmc2020&quot;&gt;customised version of
ICLR’s&lt;/a&gt;
website, &lt;a href=&quot;https://support.google.com/youtube/answer/9080341?hl=en&quot;&gt;YouTube
premiere&lt;/a&gt;, and
&lt;a href=&quot;https://discord.com/&quot;&gt;Discord&lt;/a&gt; for text/voice discussion and q&amp;amp;a&lt;/p&gt;

&lt;h3 id=&quot;website&quot;&gt;Conference website&lt;/h3&gt;

&lt;p&gt;Initially we threw up simple &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; site (hosted using
GitHub Pages) with the basic conference info &amp;amp; Call for Papers. This was
super-easy and did the job through the initial phase of advertising the
conference and drumming up submissions.&lt;/p&gt;

&lt;p&gt;Around the time we were finalising the accepted papers &amp;amp; conference schedule,
the ICLR team &lt;a href=&quot;https://news.ycombinator.com/item?id=23282113&quot;&gt;posted on HN&lt;/a&gt; that
the tooling for their &lt;a href=&quot;https://iclr.cc/virtual_2020/index.html&quot;&gt;virtual
conference&lt;/a&gt; was newly &lt;a href=&quot;https://github.com/Mini-Conf/Mini-Conf&quot;&gt;available on
GitHub&lt;/a&gt;. We decided to use it as a
starting point for building the ACMC2020 conference website.&lt;/p&gt;

&lt;p&gt;The final version of the ACMC site is still live (and will remain so for a while
at least) at &lt;a href=&quot;https://acmc2020.com/&quot;&gt;https://acmc2020.com/&lt;/a&gt;, and the &lt;a href=&quot;https://github.com/australasian-computer-music-association/acmc2020&quot;&gt;source is up on
GitHub&lt;/a&gt; as
well.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/acmc-website-words-sounds-screenshot.png&quot; alt=&quot;ACMC website screenshot&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;reflections&quot;&gt;Reflections&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;in the end I think it looked really great (and we received some &lt;a href=&quot;https://twitter.com/benswift/status/1280746825637453824&quot;&gt;nice
feedback&lt;/a&gt; from the
creators of the template) but it was &lt;a href=&quot;https://github.com/australasian-computer-music-association/acmc2020/pulse&quot;&gt;a lot of
work&lt;/a&gt;
requiring a non-trivial amount of web development experience to get it to that
point (Charles Martin helped a lot with this)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;a static site which is automatically populated based on data in a CSV or YAML
file is a good option—it means as long as whatever system you’re using to
organise &amp;amp; schedule the accepted papers can output a &lt;code&gt;.csv&lt;/code&gt; file you can
probably make it work with this website template&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;if I had my time again, I’m undecided as to whether I’d use the same
&lt;a href=&quot;https://github.com/Mini-Conf/Mini-Conf&quot;&gt;Mini-Conf&lt;/a&gt; template as a starting
point, or just write a new Jekyll plugin which adds similar features (and just
has a more mature docs/ecosystem for static site building)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;easychair&quot;&gt;Submissions &amp;amp; peer review&lt;/h3&gt;

&lt;p&gt;We used &lt;a href=&quot;https://easychair.org/&quot;&gt;EasyChair&lt;/a&gt; for conference submissions,
partially because the small-ish size of the conference meant that we were able
to sneak in under the limits for their free tier. While the reviewing &amp;amp; final
decisions were done through EasyChair, at the end of that process we exported
all the accepted submissions as a big &lt;code&gt;.csv&lt;/code&gt; file (which we imported into Google
Docs—see below).&lt;/p&gt;

&lt;h4 id=&quot;reflections-1&quot;&gt;Reflections&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;since the &lt;a href=&quot;http://computermusic.org.au/&quot;&gt;ACMA&lt;/a&gt; has its roots in academia, the
majority of the audience for this conference are familiar with the whole “call
for papers -&amp;gt; peer review -&amp;gt; notification -&amp;gt; conference attendance” thing,
however there were certainly people for whom this process was unfamiliar and a
bit daunting (so we need to provide more guidance for those folks next time)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;EasyChair sucks, but the others (&lt;a href=&quot;https://new.precisionconference.com/&quot;&gt;Precision
Conference&lt;/a&gt;,
&lt;a href=&quot;https://cmt3.research.microsoft.com/&quot;&gt;CMT&lt;/a&gt;) suck too, so I wouldn’t strongly
push people one way on the other on this part of the process—as long as your
choice allows you to export all accepted submissions &amp;amp; their metadata in some
sort of machine-readable format (e.g. CSV, YAML)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;google-docs&quot;&gt;Scheduling/programming the sessions&lt;/h3&gt;

&lt;p&gt;EasyChair worked fine for distributing the submissions for peer review &amp;amp;
selecting the ones we wanted in the conference. It doesn’t really have a nice
story for how to organise those submissions into a coherent conference program.&lt;/p&gt;

&lt;p&gt;To do this, we used a shared Google Docs spreadsheet. Starting with the CSV
export from EasyChair, the ACMC committee added columns about which
presentations should go in which sessions and in which order. To get this data
into the &lt;a href=&quot;#website&quot;&gt;conference website&lt;/a&gt; we needed to manually “Download as
&lt;code&gt;.csv&lt;/code&gt;”, then copy the file into the &lt;code&gt;sitedata&lt;/code&gt; folder ready to be picked up by
the next build of the conference website.&lt;/p&gt;

&lt;h4 id=&quot;reflections-2&quot;&gt;Reflections&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;ACMA is lucky that &lt;em&gt;most&lt;/em&gt; of our community&lt;sup id=&quot;fnref:chronodiversity&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:chronodiversity&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; is based in
Australia across a relatively small range of timezones—if you’re running an
international conference then you need to think about the chronodiversity of
your participants when you’re scheduling your conference sessions (my
colleague &lt;a href=&quot;https://twitter.com/stevemblackburn&quot;&gt;Steve Blackburn&lt;/a&gt; has a
blogpost in the works about this)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;this step required the most manual work (in particular the manual “Download as
&lt;code&gt;.csv&lt;/code&gt;” step) which was certainly a hassle in the early stages of the
scheduling process when things are changing a lot, however the convenience &amp;amp;
familiarity of a spreadsheet was a net win&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;the &lt;a href=&quot;#website&quot;&gt;website infrastructure&lt;/a&gt; has a place for putting python scripts,
and &lt;a href=&quot;https://github.com/australasian-computer-music-association/acmc2020/blob/master/scripts/process_videos.py&quot;&gt;we used this a
lot&lt;/a&gt;
to run consistency checks &amp;amp; other helpful analyses (because checking stuff
with scripts is way more fun than checking it by eye, and &lt;em&gt;probably&lt;/em&gt; a
time-saver…)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;youtube&quot;&gt;Video presentations&lt;/h3&gt;

&lt;p&gt;All the AV content for the conference was streamed to “attendees” on YouTube.
ACMC isn’t a traditional academic conference—there are audiovisual computer
music performances alongside more traditional paper presentations—but we put
everything on YouTube nonetheless.&lt;/p&gt;

&lt;p&gt;A couple of the performances were livestreamed, but for the majority of the
conference program participants were asked to submit a video representing their
performance or paper presentation. Then, an &lt;a href=&quot;https://github.com/australasian-computer-music-association/acmc2020/blob/master/scripts/process_videos.py&quot;&gt;elaborate series of ffmpeg
scripts&lt;/a&gt;&lt;sup id=&quot;fnref:ffmpeg&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:ffmpeg&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;
concatenated the videos to produce a single video per session, with consistent
“titlecards” announcing the authors &amp;amp; title of each new video in the session.&lt;/p&gt;

&lt;p&gt;Each session video was uploaded to YouTube, and scheduled for “simultaneous
viewing” at the scheduled time using the &lt;a href=&quot;https://support.google.com/youtube/answer/9080341?hl=en&quot;&gt;YouTube
Premiere&lt;/a&gt; feature.
After the Premiere, the videos were (still are) left up on the &lt;a href=&quot;https://www.youtube.com/channel/UCKK95K68yVuok-qWNS4Z6Jw&quot;&gt;ACMC
YouTube&lt;/a&gt; for people to
catch up &amp;amp; watch at their leisure.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/acmc-youtube-screenshot.png&quot; alt=&quot;ACMC YouTube channel screenshot&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;reflections-3&quot;&gt;Reflections&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;outsourcing the video delivery to YouTube (who, regardless of what you think
of their business model, are &lt;strong&gt;really good&lt;/strong&gt; at delivering video) saved
so much stress&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;the ability to upload &amp;amp; schedule the video ahead of time but still watch it
all-together allows for synchronous discussion and q&amp;amp;a amongst attendees&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;when the premiere is done, you don’t have to “put the videos online for those
who missed them”; they’re already there (which is &lt;em&gt;so much easier&lt;/em&gt; than having
to make talk recordings, edit them together, and then upload them somewhere)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;YouTube’s analytics are also really good, if you’re into that sort of thing,
and you even get stuff like half-decent automatic subtitling and other
accessibility wins&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;it’s hard to know what sort of viewership counts as “successful”, but the ACMC
conference videos (in total) are currently at 2.2k views and ~500h watch time&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;in terms of wranging the videos pre-upload, &lt;a href=&quot;https://ffmpeg.org/&quot;&gt;&lt;code&gt;ffmpeg&lt;/code&gt;&lt;/a&gt; is
&lt;em&gt;amazing&lt;/em&gt; for dealing with all the weird audio/video formats that presenters
will send you, however until you grok that each &lt;code&gt;ffmpeg&lt;/code&gt; run is actually
setting up a graph of audio &amp;amp; video sinks, sources &amp;amp; filters you’re doomed to
copy-paste stuff from StackOverflow and then stare in bewilderment at cryptic
error messages (trust me… I learned this the hard way 😢)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;not all presenters&lt;sup id=&quot;fnref:acmc-presenters&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:acmc-presenters&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt; at an academic conference have the skills
(or the inclination) to create an engaging video of their work, so depending
on your community you might see the occasional “monotone drone over text
slides” presentation (but you’d get bad presentations at an in-person
conference as well)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;discord&quot;&gt;Q&amp;amp;A and discussion&lt;/h3&gt;

&lt;p&gt;ACMC2020 went all in on text-based chat using &lt;a href=&quot;https://discord.com/&quot;&gt;Discord&lt;/a&gt;
(we created our own ACMC2020 Discord server and sent an invite link to all
conference participants). YouTube is great for one-way one-to-many broadcasting,
but not so great for two-way communication, and especially not many-to-many
interaction &amp;amp; discussion. And having all the discussion for the whole conference
(with the ability to &lt;code&gt;@mention&lt;/code&gt; participants across sessions) in one place
helped with the feeling that this was a single event, rather than just a series
of disconnected YouTube videos.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/acmc-discord-screenshot.png&quot; alt=&quot;ACMC Discord channel screenshot&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;reflections-4&quot;&gt;Reflections&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;live video chat can be great for situations where everyone already knows
everyone else, but video (and even audio) can be a bit intimidating for
newcomers to a community, and we wanted to make the q&amp;amp;a as inclusive as
possible&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;we considered Zoom, but it’s really a video platform—as a text chat platform
it’s really bad (no persistent discussions, no ability to mention other
participants, no emoji/reaction gifs, etc.)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;within the ACMC2020 Discord server, we created a separate “channel” for each
conference session, where the live discussion would happen (all presenters
would hang out in that channel during the session), but this also allowed for
persistent session-specific questions to be asked and returned to later with
more thoughtful answers (or to get around timezone differences)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://slack.com/&quot;&gt;Slack&lt;/a&gt; would have probably worked similarly well to
Discord, but we liked the fact that Discord makes it easy to jump into an
“audio” chat—this was particularly useful for the keynote q&amp;amp;a sessions where
the session chair could collate the questions from the text chat, but the
speaker could respond using audio rather than having to type out their answers&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;going-to-the-pub-after-the-session&quot;&gt;Going to the pub after the session&lt;/h3&gt;

&lt;p&gt;Sadly, the ACMC committee never found out a good way of recreating this part of
the usual conference experience at an online conference. Some folks who were
geographically co-located did get together and watch some of the streams
together, but the recent &lt;a href=&quot;https://www.abc.net.au/news/2020-07-07/metropolitan-melbourne-suburbs-back-in-coronavirus-lockdown/12431564&quot;&gt;Melbourne covid19
lockdown&lt;/a&gt;
meant that some people couldn’t even do that.&lt;/p&gt;

&lt;h4 id=&quot;reflections-5&quot;&gt;Reflections&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;some aspects of the online conference that I prefer, the ACMC community still
needs to have some way of getting together in person to solidify the
relationships which developed over the course of ACMC2020&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:weeks&quot; role=&quot;doc-endnote&quot;&gt;

      &lt;p&gt;well, it’s actually pretty common that I’m quiet for a few weeks, so I
guess it’s business as usual &lt;a href=&quot;#fnref:weeks&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:chronodiversity&quot; role=&quot;doc-endnote&quot;&gt;

      &lt;p&gt;actually, we did have some overseas participants, and the async nature of
the &lt;a href=&quot;#discord&quot;&gt;Discord chat&lt;/a&gt; meant that people could mention them in their
questions in the text chat, and they could log in at a later time to provide
answers—this worked really well on a few occasions &lt;a href=&quot;#fnref:chronodiversity&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:ffmpeg&quot; role=&quot;doc-endnote&quot;&gt;

      &lt;p&gt;while this worked really nicely in the end, those scripts probably took me
as much time to get right as the rest of the website stuff combined 😞 &lt;a href=&quot;#fnref:ffmpeg&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:acmc-presenters&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;actually, all the ACMC presenters were great this year ☺ &lt;a href=&quot;#fnref:acmc-presenters&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Ben Swift</name></author><category term="web" /><category term="tools" /><summary type="html">I’ve been a bit quiet on this blog for the last few weeks[^weeks] because I’ve been organising ACMC2020: the 2020 Australasian Computer Music Conference. From the conference landing page:</summary></entry><entry><title type="html">LENS 2020 final gig stream tomorrow at 8pm</title><link href="https://benswift.me/blog/2020/06/11/lens-2020-final-gig-stream-tomorrow-at-8pm/" rel="alternate" type="text/html" title="LENS 2020 final gig stream tomorrow at 8pm" /><published>2020-06-11T00:00:00+10:00</published><updated>2020-06-11T00:00:00+10:00</updated><id>https://benswift.me/blog/2020/06/11/lens-2020-final-gig-stream-tomorrow-at-8pm</id><content type="html" xml:base="https://benswift.me/blog/2020/06/11/lens-2020-final-gig-stream-tomorrow-at-8pm/">&lt;p&gt;&lt;img src=&quot;/assets/images/posts/lens2020-final-gig-poster.jpg&quot; alt=&quot;LENS S1 2020 final gig poster&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you’re stuck at home this Friday night (or if you’ve got a good mobile data
package) then you should tune in to see the final gig from the &lt;em&gt;LENS: ANU Laptop
Ensemble&lt;/em&gt; S1 2020 cohort.&lt;/p&gt;

&lt;p&gt;Gig details are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;date&lt;/strong&gt;: Friday June 12&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;time&lt;/strong&gt;: 8pm–10pm AEST&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;location&lt;/strong&gt;: live on the &lt;a href=&quot;https://www.youtube.com/channel/UCIU6SqIS02GJlnLOPqlwmpA&quot;&gt;LENS YouTube channel &lt;svg class=&quot;icon&quot;&gt;&lt;use xlink:href=&quot;#fab.fa-youtube&quot;&gt;&lt;/use&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Even if you miss the live event, you can still watch the video anytime. Like and subscribe!&lt;/p&gt;

&lt;p&gt;There’s also a &lt;a href=&quot;https://www.facebook.com/events/2563515850576414&quot;&gt;Facebook
event&lt;/a&gt; if you’re into that
sort of thing.&lt;/p&gt;</content><author><name>Ben Swift</name></author><category term="livecoding" /><category term="ccc" /><category term="lens" /><category term="gigs" /><summary type="html"></summary></entry><entry><title type="html">Two-way OSC communication between Extempore and Pd</title><link href="https://benswift.me/blog/2020/04/30/two-way-osc-communication-between-extempore-and-pd/" rel="alternate" type="text/html" title="Two-way OSC communication between Extempore and Pd" /><published>2020-04-30T00:00:00+10:00</published><updated>2020-04-30T00:00:00+10:00</updated><id>https://benswift.me/blog/2020/04/30/two-way-osc-communication-between-extempore-and-pd</id><content type="html" xml:base="https://benswift.me/blog/2020/04/30/two-way-osc-communication-between-extempore-and-pd/">&lt;p&gt;Because &lt;a href=&quot;https://github.com/digego/extempore&quot;&gt;Extempore&lt;/a&gt; and
&lt;a href=&quot;https://puredata.info&quot;&gt;Pd&lt;/a&gt; are both multimedia programming environments, they
both speak &lt;a href=&quot;https://en.wikipedia.org/wiki/Open_Sound_Control&quot;&gt;OSC&lt;/a&gt; straight out
of the box. If you need to send messages (numbers, strings, other data) from one
program to the other over the local network&lt;sup id=&quot;fnref:lan&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:lan&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; then OSC is a pretty good way
to do it.&lt;/p&gt;

&lt;h2 id=&quot;pd-extempore&quot;&gt;Pd-&amp;gt;Extempore&lt;/h2&gt;

&lt;p&gt;To send OSC messages from Pd to Extempore, you’ll first need to start Extempore,
define a function to act as the OSC callback/handler, and start the OSC server
listening on a particular port.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-xtlang&quot;&gt;;; the name of this function doesn't matter, as long as you specify the same
;; name later when you start the server
(define (osc-receive-handler timestamp address . args)
  (println 'osc-receive-handler address '-&amp;gt; args))

;; start the server listening on port 7009
(io:osc:start-server 7009 &quot;osc-receive-handler&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once you evaluate those lines you’ll see a notification printed in the Extempore
terminal:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Starting OSC server on port: 7009 calling back to osc-receive-handler
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now that Extempore’s listening, you need to send a message with Pd. There’s a
built-in &lt;code&gt;oscformat&lt;/code&gt; object for this. As usual in Pd, the easiest way to see how
it works is to create an &lt;code&gt;oscformat&lt;/code&gt; object, then right-click to open up the
&lt;code&gt;oscformat-help.pd&lt;/code&gt; patch.&lt;/p&gt;

&lt;p&gt;Assuming you’re running Pd on the same computer as the Extempore OSC server you
set up before, you can send your messages to &lt;code&gt;localhost&lt;/code&gt; (look for the &lt;code&gt;connect
localhost 5000&lt;/code&gt; message in the Pd help patch). However, you need to make sure
the ports match—the Extempore server is listening on port &lt;code&gt;7099&lt;/code&gt;, while the
default port number in the &lt;code&gt;oscformat-help.pd&lt;/code&gt; patch is &lt;code&gt;5000&lt;/code&gt; (so you’ll need
to change it before you send that &lt;code&gt;connect message&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Once you’ve done all that, you should be able to trigger the send messages (e.g.
&lt;code&gt;1 2 3&lt;/code&gt;) near the top of the patch. They’ll be received by Extempore and passed
as arguments to the &lt;code&gt;osc-receive-handler&lt;/code&gt; function, which (as defined above)
just prints them to the log, so you’ll see output like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;osc-receive-handler &quot;/cat/horse/pig&quot; -&amp;gt; (1.000000 2.000000 3.000000)
osc-receive-handler &quot;/cat/horse/pig&quot; -&amp;gt; (4.000000 5.000000 &quot;weasel&quot; 6.000000 7.000000 &quot;rat&quot;)
osc-receive-handler &quot;/mouse/banana&quot; -&amp;gt; (1.000000 2.000000 3.000000)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Success! 🙌🎉🙌 Now, re-define your &lt;code&gt;osc-receive-handler&lt;/code&gt; to do something more
interesting and you’re away.&lt;/p&gt;

&lt;h2 id=&quot;extempore-pd&quot;&gt;Extempore-&amp;gt;Pd&lt;/h2&gt;

&lt;p&gt;Sending OSC messages the opposite direction is pretty similar. In this case,
it’s Pd’s &lt;code&gt;oscparse&lt;/code&gt; object that you’ll need. Again, go ahead an open up the
&lt;code&gt;oscparse-help.pd&lt;/code&gt; patch. Find the “packets from network” part of the patch
(again, make note of the port the server is listening on) and send the &lt;code&gt;listen&lt;/code&gt;
message to start Pd listening for incoming OSC messages.&lt;/p&gt;

&lt;p&gt;Then, start Extempore and start a listener again as before. You might not &lt;em&gt;use&lt;/em&gt;
this part if you’re just sending data out of Extempore, but it’s required to set
up some of the internal OSC infrastructure so you need to do it anyway.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-xtlang&quot;&gt;;; the name of this function doesn't matter, as long as you specify the same
;; name later when you start the server
(define (osc-receive-handler timestamp address . args)
  (println 'osc-receive-handler address '-&amp;gt; args))

;; start the server listening on port 7009
(io:osc:start-server 7009 &quot;osc-receive-handler&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, it’s a one-liner to send an OSC message to a particular host &amp;amp; port:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-xtlang&quot;&gt;(io:osc:send (now) (cons &quot;localhost&quot; 7010) &quot;/test/msg&quot; &quot;Hello&quot; 500 6.6 &quot;World&quot; (random 10))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After the address argument (in this case &lt;code&gt;&quot;/test/msg&quot;&lt;/code&gt;) you can supply as many
arguments as you like—you just need to make sure you unpack them properly on
the Pd side.&lt;/p&gt;

&lt;p&gt;This time, if the messages gets through ok you’ll see the message received in
your Pd log view, with stuff like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;parse-output: list test msg Hello 500 6.6 World 8
parse-output: list test msg Hello 500 6.6 World 0
parse-output: list test msg Hello 500 6.6 World 9
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;…plus a bunch more debugging output from the &lt;code&gt;oscparse-help.pd&lt;/code&gt; patch.&lt;/p&gt;

&lt;p&gt;As in the Pd-&amp;gt;Extempore case, you’re sending the message to localhost, so if
Extempore and Pd are running on the same machine then you’ll be golden. If
you’re on a LAN, you’d need to specify the host &amp;amp; port with something like
&lt;code&gt;(cons &quot;192.168.11.15&quot; 7011)&lt;/code&gt; or whatever.&lt;/p&gt;

&lt;p&gt;The one other thing to note about the &lt;code&gt;io:osc:send&lt;/code&gt; function is that the first
argument is a &lt;em&gt;time&lt;/em&gt; argument. If you wanted to, e.g. send a message with a
2-second delay after evaluating that line, you could do something like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-xtlang&quot;&gt;(io:osc:send (+ (now) (* *second* 2)) (cons &quot;localhost&quot; 7010) &quot;/test/msg&quot; &quot;Hello&quot; 500 6.6 &quot;World&quot; (random 10))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For a deeper dive on how time is handled in Extempore, see the &lt;a href=&quot;https://extemporelang.github.io/docs/overview/time/&quot;&gt;Extempore
docs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Happy OSCing 😊&lt;/p&gt;
&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:lan&quot; role=&quot;doc-endnote&quot;&gt;

      &lt;p&gt;even if you’re on a WAN, there are ways to do it—but you might have to
deal with some packet loss and
&lt;a href=&quot;https://en.wikipedia.org/wiki/Network_address_translation&quot;&gt;NAT&lt;/a&gt; issues &lt;a href=&quot;#fnref:lan&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Ben Swift</name></author><category term="extempore" /><category term="lens" /><summary type="html">Because Extempore and Pd are both multimedia programming environments, they both speak OSC straight out of the box. If you need to send messages (numbers, strings, other data) from one program to the other over the local network[^lan] then OSC is a pretty good way to do it.</summary></entry><entry><title type="html">A call-up to fight covid19</title><link href="https://benswift.me/blog/2020/04/18/a-call-up-to-fight-covid19/" rel="alternate" type="text/html" title="A call-up to fight covid19" /><published>2020-04-18T00:00:00+10:00</published><updated>2020-04-18T00:00:00+10:00</updated><id>https://benswift.me/blog/2020/04/18/a-call-up-to-fight-covid19</id><content type="html" xml:base="https://benswift.me/blog/2020/04/18/a-call-up-to-fight-covid19/">&lt;p&gt;As with many folks at the moment (both in Canberra and around the world) I’ve
been called up into a covid19 taskforce (an initiative of the ANU’s Software
Innovation Institute, in partnership with the &lt;a href=&quot;https://cs.anu.edu.au&quot;&gt;RSCS&lt;/a&gt; &amp;amp;
other parts of the ANU). I’m the technical lead on the part of the project which
is trying to wrap up epidemiological simulation models into usable &amp;amp; robust
tools for seeing &amp;amp; understanding what the results of said models mean for the
Canberra health system. How can we predict what will happen, and how can we
manage our finite resources to deliver the best care possible—these are the
questions we need to answer as the world settles in for (perhaps) a long period
of on-and-off distancing &amp;amp; isolation. I’ll be able to share more details in the
future, so if you’re interested in that sort of thing then come back to check
for updates on this blog (I’ll use the &lt;code&gt;covid19&lt;/code&gt; tag).&lt;/p&gt;

&lt;p&gt;That means that some aspects of my creative coding work are &lt;em&gt;temporarily&lt;/em&gt; on the
back burner (although I’m still teaching the &lt;a href=&quot;/blog/tag/lens/&quot;&gt;Laptop Ensemble&lt;/a&gt;). I can’t complain too much—covid19 has put lots of stuff
on the back burner all over the world. In fact, I’m thankful to (a) have a job
and (b) have a sense of agency about all this stuff; the feeling of impotence as
an individual in a big world beset by this pandemic can be hard to take
sometimes.&lt;/p&gt;

&lt;p&gt;The toolkit of computation as explored through the domain of making art &amp;amp; music
is no less relevant when we’re all stuck at home in isolation. The arts can be a
balm in difficult times, especially while many are staring down the barrel of
unemployment &amp;amp; the need to re-skill. Our computers threaten to eat us and our
happiness if we just sit at them passively consuming our social media &amp;amp; news
feeds.&lt;/p&gt;

&lt;p&gt;The c/c/c studio will still (fingers crossed) kick off formally in 2021 as
anticipated, so stay tuned for more updates. And if you’re a schoolteacher in
the Canberra region and you’d like to have a guest talk (or even an interactive
workshop) on musical livecoding delivered via zoom over the next few months,
&lt;a href=&quot;mailto:ben.swift@anu.edu.au&quot;&gt;get in touch&lt;/a&gt;.&lt;/p&gt;</content><author><name>Ben Swift</name></author><category term="research" /><category term="covid19" /><summary type="html">As with many folks at the moment (both in Canberra and around the world) I’ve been called up into a covid19 taskforce (an initiative of the ANU’s Software Innovation Institute, in partnership with the RSCS &amp;amp; other parts of the ANU). I’m the technical lead on the part of the project which is trying to wrap up epidemiological simulation models into usable &amp;amp; robust tools for seeing &amp;amp; understanding what the results of said models mean for the Canberra health system. How can we predict what will happen, and how can we manage our finite resources to deliver the best care possible—these are the questions we need to answer as the world settles in for (perhaps) a long period of on-and-off distancing &amp;amp; isolation. I’ll be able to share more details in the future, so if you’re interested in that sort of thing then come back to check for updates on this blog (I’ll use the covid19 tag).</summary></entry><entry><title type="html">LENS Online - the Laptop Ensemble in a time of covid19</title><link href="https://benswift.me/blog/2020/03/21/lens-online-the-laptop-ensemble-in-a-time-of-covid19/" rel="alternate" type="text/html" title="LENS Online - the Laptop Ensemble in a time of covid19" /><published>2020-03-21T00:00:00+11:00</published><updated>2020-03-21T00:00:00+11:00</updated><id>https://benswift.me/blog/2020/03/21/lens-online-the-laptop-ensemble-in-a-time-of-covid19</id><content type="html" xml:base="https://benswift.me/blog/2020/03/21/lens-online-the-laptop-ensemble-in-a-time-of-covid19/">&lt;p&gt;Well, as with all ANU courses, we’re taking the &lt;a href=&quot;https://cs.anu.edu.au/courses/comp2710-lens/&quot;&gt;Laptop
Ensemble&lt;/a&gt;
(&lt;a href=&quot;https://cs.anu.edu.au/courses/comp2710-lens/resources/faq/#whats-the-deal-with-the-dual-course-codes-comp2710-and-musi2205&quot;&gt;COMP2710/MUSI2205&lt;/a&gt;)
course online.&lt;/p&gt;

&lt;p&gt;In some ways this will be easy (after all, it has &lt;em&gt;Laptop&lt;/em&gt; in the course title),
while in other ways this will be quite challenging (after all, it has &lt;em&gt;Ensemble&lt;/em&gt;
in the course title). The biggest thing is that the Ensemble is a relatively small (by CS
course size standards) and engaged bunch of students, and so we can push some of
the “what will this course look like if we can’t meet physically for the entire
rest of the semester” question on to them&lt;sup id=&quot;fnref:lazy-pedagogy&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:lazy-pedagogy&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;If you’re not familiar with the Laptop Ensemble course, we use a flipped
lecture + weekly in-person crit/jam session model. Each week the students watch
some videos, listen to some music, read some things, look at some example code,
and make a 60 second video (with sound, obviously) exploring the week’s
“creative provocation”. Then we get together, watch &amp;amp; discuss everyone’s video
submissions (the crit part) and then get together in small ensembles (three
musicians, different groups each week) to jam &amp;amp; finish the workshop with a
3-minute-long ensemble performances from each group. It’s super fun, we make
noise every week, and the results so far (it’s the end of week 4) have been
really great.&lt;/p&gt;

&lt;p&gt;Now that &lt;a href=&quot;https://www.anu.edu.au/news/all-news/covid-19-staff-update-–-18-march-2020&quot;&gt;we’re going
online&lt;/a&gt;,
the flipped part won’t change, but we won’t get our weekly workshop session. So,
here’s the current plan:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;students will still submit weekly videos, but alternating between individual
submissions and group submissions&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;we’ll get together (synchronously) over zoom and watch the videos &amp;amp; have the crit&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;next week’s provocation: which models of collaboration work (and which don’t)
in a computer music ensemble?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;the final performance (the capstone of the course, usually held in a cool
nightclub) will &lt;em&gt;probably&lt;/em&gt; be an online streaming gig&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Stay tuned—still lots to figure out, but I’m kindof excited. LENS will survive
while the world collapses around us (seriously, though, be nice to each other,
don’t hoard stuff and try and #flattenthecurve).&lt;/p&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:lazy-pedagogy&quot; role=&quot;doc-endnote&quot;&gt;

      &lt;p&gt;the best educators, like the &lt;a href=&quot;http://threevirtues.com&quot;&gt;best programmers&lt;/a&gt;,
are &lt;a href=&quot;https://blog.optimus-education.com/why-lazy-teachers-are-best&quot;&gt;lazy&lt;/a&gt; &lt;a href=&quot;#fnref:lazy-pedagogy&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Ben Swift</name></author><category term="lens" /><category term="teaching" /><summary type="html">Well, as with all ANU courses, we’re taking the Laptop Ensemble (COMP2710/MUSI2205) course online.</summary></entry><entry><title type="html">Reimagine Fellowship UK trip report</title><link href="https://benswift.me/blog/2020/03/11/reimagine-fellowship-uk-trip-report/" rel="alternate" type="text/html" title="Reimagine Fellowship UK trip report" /><published>2020-03-11T00:00:00+11:00</published><updated>2020-03-11T00:00:00+11:00</updated><id>https://benswift.me/blog/2020/03/11/reimagine-fellowship-uk-trip-report</id><content type="html" xml:base="https://benswift.me/blog/2020/03/11/reimagine-fellowship-uk-trip-report/">&lt;p&gt;I was lucky enough to be able to spend most of February in the UK on a research
visit as part of my &lt;a href=&quot;/blog/2019/08/30/Im-a-reimagine-fellow/&quot;&gt;Reimagine Fellowship&lt;/a&gt;—designing &amp;amp; delivering a
“creative” coding extension course for ACT students in year 11 &amp;amp; 12.&lt;/p&gt;

&lt;p&gt;It was a great trip, and has answered some of the questions that I had ahead of
time, and more importantly has helped me pose better questions in the future. A
few trip highlights:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;the International Conference on Live Coding (ICLC ‘20) was super-fun,
&lt;a href=&quot;/livecoding/2020-02-07-iclc-20.html&quot;&gt;performing at the conference Algorave&lt;/a&gt; was a nice chance to show off some of
the more recent work in &lt;a href=&quot;https://github.com/digego/extempore&quot;&gt;Extempore&lt;/a&gt;,
being invited to run an &lt;a href=&quot;https://iclc.toplap.org/2020/schedule.html&quot;&gt;Extempore
workshop&lt;/a&gt; was an important chance
to road test some of the “creative coding teaching materials” I’ll be rolling
out next year through the &lt;a href=&quot;/blog/2019/03/20/reimagine-fellow-project-pitch/&quot;&gt;c/c/c studio creative code outreach program&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;hanging out with &lt;a href=&quot;https://twitter.com/samaaron&quot;&gt;Sam Aaron&lt;/a&gt; (of &lt;a href=&quot;http://sonic-pi.net&quot;&gt;Sonic
Pi&lt;/a&gt; fame) to discuss ways to use creative coding as a
diverse &amp;amp; inclusive pathway into computing, the architecture of livecoding
languages/environments, and again &lt;a href=&quot;https://www.twitch.tv/videos/551005336&quot;&gt;making some
music&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;meeting with &lt;a href=&quot;https://www.microsoft.com/en-us/research/people/simonpj/&quot;&gt;Simon Peyton
Jones&lt;/a&gt; at &lt;a href=&quot;https://www.microsoft.com/en-us/research/lab/microsoft-research-cambridge/&quot;&gt;MSR
Cambridge&lt;/a&gt;
to see how the grassroots &lt;a href=&quot;https://www.computingatschool.org.uk&quot;&gt;Computing at
School&lt;/a&gt; (CAS) organisation (of which
he’s the chair) works to encourage, support and equip teachers of computing
through a Community of Professional Practice, and to think about how we could
provide similar support to teachers in the ACT (and Australia), especially in
the context of providing creative code classroom resources &amp;amp; professional
development opportunities&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Visiting Quintin Cutts and the &lt;a href=&quot;https://www.gla.ac.uk/schools/computing/research/researchsections/cseducation/&quot;&gt;Centre for Computing Science
Education&lt;/a&gt;
at Glasgow University to &lt;a href=&quot;/talks/designing-the-ccc-studio/&quot;&gt;present&lt;/a&gt; &amp;amp; workshop ideas for the c/c/c studio outreach course, think strategically
about building up our (ANU RSCS’s) capability in CS education research and
partnering with them on improving the learning experience for all our existing
students, and also attracting new and diverse students who might not consider
studying CS at uni&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;climbing &lt;a href=&quot;https://en.wikipedia.org/wiki/Dumgoyne&quot;&gt;Dumgoyne&lt;/a&gt; in a whiteout,
emerging at the top just as the sun broke through the clouds to reveal a
glorious view of the countryside, then falling on my arse on the way down and
having to put my trousers in the dryer the night before flying out (as shown
in the picture)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/dumgoyne-arse-post-climb.jpg&quot; alt=&quot;my arse after slipping over on dumgoyne&quot; /&gt;&lt;/p&gt;

&lt;p&gt;All of these folks will be important collaborators going forward as we put the
creative code curriculum together (next deadline: documents for the &lt;a href=&quot;http://www.bsss.act.edu.au&quot;&gt;ACT
BSSS&lt;/a&gt; for accreditaion, due at the end of March). In
addition, I’m speaking next week at the National Future Schools festival (with
&lt;a href=&quot;https://aca.edu.au/about/&quot;&gt;Bruce Fuda&lt;/a&gt;) on &lt;a href=&quot;https://www.terrapinn.com/exhibition/national-future-schools/speaker-ben-SWIFT.stm&quot;&gt;Teaching Code with Music and
Teaching Music with
Code&lt;/a&gt;,
so if you’re in attendance you should come along and say hi.&lt;/p&gt;</content><author><name>Ben Swift</name></author><category term="reimagine" /><summary type="html">I was lucky enough to be able to spend most of February in the UK on a research visit as part of my Reimagine Fellowship—designing &amp;amp; delivering a “creative” coding extension course for ACT students in year 11 &amp;amp; 12.</summary></entry><entry><title type="html">Command/Control: giving OS aware keybinding hints</title><link href="https://benswift.me/blog/2020/02/14/command-control-giving-os-aware-keybinding-hints/" rel="alternate" type="text/html" title="Command/Control: giving OS aware keybinding hints" /><published>2020-02-14T00:00:00+11:00</published><updated>2020-02-14T00:00:00+11:00</updated><id>https://benswift.me/blog/2020/02/14/command-control-giving-os-aware-keybinding-hints</id><content type="html" xml:base="https://benswift.me/blog/2020/02/14/command-control-giving-os-aware-keybinding-hints/">&lt;p&gt;As someone who writes a lot of &lt;a href=&quot;https://extemporelang.github.io&quot;&gt;web-based&lt;/a&gt;
&lt;a href=&quot;https://cs.anu.edu.au/courses/comp1720/&quot;&gt;documentation for&lt;/a&gt;
&lt;a href=&quot;https://cs.anu.edu.au/courses/comp2300/&quot;&gt;using&lt;/a&gt;
&lt;a href=&quot;https://cs.anu.edu.au/courses/comp2710-lens/&quot;&gt;computers&lt;/a&gt;, it’s often useful to
give people hints about keybindings which could make their lives easier.
However, this is tricky when it comes to the control key/command key keybinding
convention on macOS vs Windows/Linux.&lt;/p&gt;

&lt;p&gt;In the past, I’ve just written things like:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;To save the file, hit &lt;kbd class=&quot;nopretty&quot;&gt;CTRL&lt;/kbd&gt;+&lt;kbd&gt;S&lt;/kbd&gt; to save
(or &lt;kbd class=&quot;nopretty&quot;&gt;⌘&lt;/kbd&gt;+&lt;kbd&gt;S&lt;/kbd&gt; if you’re on macOS)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;which gets &lt;em&gt;really tedious&lt;/em&gt; when you have to repeat it every time.&lt;/p&gt;

&lt;p&gt;So, I wrote a little bit of javascript which&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;scans the document for any &lt;kbd class=&quot;nopretty&quot;&gt;control&lt;/kbd&gt; elements&lt;/li&gt;
  &lt;li&gt;if it detects&lt;sup id=&quot;fnref:detection&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:detection&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; you’re viewing the site on macOS, changes it to
&lt;kbd class=&quot;nopretty&quot;&gt;⌘&lt;/kbd&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;It actually searches for all of &lt;kbd class=&quot;nopretty&quot;&gt;control&lt;/kbd&gt;, &lt;kbd class=&quot;nopretty&quot;&gt;command&lt;/kbd&gt;, &lt;kbd class=&quot;nopretty&quot;&gt;ctrl&lt;/kbd&gt;, &lt;kbd class=&quot;nopretty&quot;&gt;ctl&lt;/kbd&gt; or &lt;kbd class=&quot;nopretty&quot;&gt;cmd&lt;/kbd&gt; and “normalises”
them to &lt;kbd class=&quot;nopretty&quot;&gt;⌘&lt;/kbd&gt; (macOS) or &lt;kbd class=&quot;nopretty&quot;&gt;CTRL&lt;/kbd&gt; (otherwise).&lt;/p&gt;

&lt;p&gt;On the off chance that I actually don’t want it to do this, the script will skip
any &lt;code&gt;&amp;lt;kbd&amp;gt;&lt;/code&gt; element with a &lt;code&gt;nopretty&lt;/code&gt; class.&lt;/p&gt;

&lt;p&gt;If you’re interested, the script looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;window.addEventListener('DOMContentLoaded', (event) =&amp;gt; {

  // replace all these with the appropriate modifier for the platform
  let modKeys = [&quot;control&quot;, &quot;command&quot;, &quot;ctrl&quot;, &quot;ctl&quot;, &quot;cmd&quot;];

  let modifier = navigator.appVersion.indexOf(&quot;Mac&quot;)!=-1 ? &quot;⌘&quot; : &quot;CTRL&quot;;

  for (const kbdElement of document.querySelectorAll(&quot;kbd&quot;)) {
	if (modKeys.includes(kbdElement.textContent.toLowerCase()) &amp;amp;&amp;amp; !kbdElement.classList.contains(&quot;nopretty&quot;)){
	  kbdElement.textContent = modifier;
	}
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In case I make any tweaks, you can always find the latest version in my &lt;a href=&quot;https://github.com/benswift/benswift.github.io/blob/source/assets/js/os-aware-modifiers.js&quot;&gt;blog
source on
GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:detection&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;it’ll work in &lt;em&gt;most&lt;/em&gt; cases; foolproof OS autodetection is really hard &lt;a href=&quot;#fnref:detection&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Ben Swift</name></author><summary type="html">As someone who writes a lot of web-based documentation for using computers, it’s often useful to give people hints about keybindings which could make their lives easier. However, this is tricky when it comes to the control key/command key keybinding convention on macOS vs Windows/Linux.</summary></entry><entry><title type="html">ICLC Extempore workshop</title><link href="https://benswift.me/iclc-workshop/" rel="alternate" type="text/html" title="ICLC Extempore workshop" /><published>2020-02-06T00:00:00+11:00</published><updated>2020-02-06T00:00:00+11:00</updated><id>https://benswift.me/iclc-extempore-workshop</id><content type="html" xml:base="https://benswift.me/iclc-workshop/">&lt;p&gt;If you’re here for the &lt;a href=&quot;https://www.eventbrite.ie/e/introduction-to-music-making-in-extempore-tickets-89794851819&quot;&gt;ICLC Extempore
workshop&lt;/a&gt;
&lt;em&gt;Introduction to music-making in Extempore&lt;/em&gt;, then welcome!&lt;/p&gt;

&lt;p&gt;Here are the details if you’re still trying to find us:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Date&lt;/strong&gt;: Thu 6 Feb 2020&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Time&lt;/strong&gt;: 14:30–18:30 GMT&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Location&lt;/strong&gt;: Room CSG-013, Computer Science Building (building 8 on the
&lt;a href=&quot;https://www.ul.ie/buildings/sites/default/files/travel-uploads/Campus%20Map%20Update%2028-06-2017%20Website%20A3%20Final.pdf&quot;&gt;campus
map&lt;/a&gt;),
University of Limerick&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;workshop-outline&quot;&gt;Workshop outline&lt;/h2&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;1430&lt;/td&gt;
      &lt;td&gt;intro &amp;amp; getting to know each other&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1500&lt;/td&gt;
      &lt;td&gt;Extempore hacking&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1615&lt;/td&gt;
      &lt;td&gt;&lt;em&gt;afternoon tea break&lt;/em&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1630&lt;/td&gt;
      &lt;td&gt;moar Extempore hacking&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1730&lt;/td&gt;
      &lt;td&gt;demos&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1800&lt;/td&gt;
      &lt;td&gt;open feedback&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;intro&quot;&gt;Intro&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;about me&lt;/li&gt;
  &lt;li&gt;potted history of &lt;a href=&quot;https://github.com/digego/extempore&quot;&gt;Extempore&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;what we will/might/won’t cover today (a JIT workshop!)&lt;/li&gt;
  &lt;li&gt;meet one another, goal setting, CoC&lt;/li&gt;
&lt;/ul&gt;

&lt;picture&gt;
  &lt;img alt=&quot;two roads diverged...&quot; src=&quot;/assets/images/posts/jens-lelie-u0vgcIOQG08-unsplash.jpg&quot; /&gt;
&lt;/picture&gt;

&lt;h2 id=&quot;extempore-hacking&quot;&gt;Extempore hacking&lt;/h2&gt;

&lt;p&gt;First, set Extempore up on your machine using the &lt;a href=&quot;https://extemporelang.github.io/docs/overview/quickstart/&quot;&gt;quickstart
instructions&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Then, depending on which path you’d like to go down first, continue to either
the &lt;a href=&quot;https://extemporelang.github.io/docs/guides/sharedsystem/&quot;&gt;sharedsystem (synthesis &amp;amp; sampling)
guide&lt;/a&gt; or the
&lt;a href=&quot;https://extemporelang.github.io/docs/guides/pattern-language/&quot;&gt;pattern language
guide&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;demo-time--open-feedback&quot;&gt;Demo time &amp;amp; open feedback&lt;/h2&gt;

&lt;p&gt;At the end of the workshop, there will be a chance to share with the group both
the things you’ve made today and any thoughts on how we can do things
(Extempore-wise) better, friendlier, open-er and more accessible. Improving the
onboarding experience for Extempore is one of my big goals this year, so all
attendees get a chance to contribute to that broader mission.&lt;/p&gt;</content><author><name>Ben Swift</name></author><category term="extempore" /><category term="livecode" /><category term="teaching" /><summary type="html">If you’re here for the ICLC Extempore workshop Introduction to music-making in Extempore, then welcome!</summary></entry><entry><title type="html">ACMC ‘20 submissions now open</title><link href="https://benswift.me/blog/2020/01/29/acmc-20-submissions-now-open/" rel="alternate" type="text/html" title="ACMC '20 submissions now open" /><published>2020-01-29T00:00:00+11:00</published><updated>2020-01-29T00:00:00+11:00</updated><id>https://benswift.me/blog/2020/01/29/acmc-20-submissions-now-open</id><content type="html" xml:base="https://benswift.me/blog/2020/01/29/acmc-20-submissions-now-open/">&lt;p&gt;Good news everyone; we’re hosting the annual &lt;a href=&quot;https://acmc2020.com/&quot;&gt;Australasian Computer Music
Conference&lt;/a&gt; (ACMC) at the ANU this year from July 8–11.
ACMC is a festival of gigs, talks, installations and hands-on tutorials designed
to inspire, challenge, and showcase the computer music community. There’s lots
more information on the &lt;a href=&quot;https://acmc2020.com/&quot;&gt;conference website&lt;/a&gt;.&lt;/p&gt;

&lt;picture&gt;
  &lt;img alt=&quot;live computer music &amp;amp; visuals at ACMC'19&quot; src=&quot;/assets/images/posts/acmc-2019-allsop-gig.jpg&quot; /&gt;
&lt;/picture&gt;

&lt;p class=&quot;hl-para&quot;&gt;The call for submissions—papers, artist talks, performances, workshops,
tutorials and more—&lt;a href=&quot;https://acmc2020.com/#/features/03-submission&quot;&gt;is now
open&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;whos-it-for-and-why-should-you-come&quot;&gt;Who’s it for, and why should you come?&lt;/h2&gt;

&lt;p&gt;Sure, it’s hosted at an academic institution, but ACMC isn’t just for
professors. This year’s conference theme is &lt;strong&gt;inclusion&lt;/strong&gt;, and so we’re trying
really hard to make it easy for &lt;em&gt;all&lt;/em&gt; folks who love making noise with
computers, especially those who are often locked out of these sorts of events
for various reasons. We’re offering free/cheap conference tickets and even
scholarships to make that happen.&lt;/p&gt;

&lt;p&gt;So, if you’re reading this and you have some sort of creative practice which
involves computers/technology and sound/music, then I’d &lt;em&gt;love it&lt;/em&gt; if you’d apply
to come and show us your stuff. If you’re worried that your stuff is suitable,
then (1) it probably is, and (2) I’m really happy to discuss it with you to help
you figure out how best to participate—just &lt;a href=&quot;mailto:ben.swift@anu.edu.au&quot;&gt;send me an
email&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you’re not interested in submitting your own work, then mark those dates
(July 8–11) in your diary and stay tuned for when we release the program. We’re
also going to be running a bunch of workshops in the days before &amp;amp; after the
conference, so this could be your chance to start making music with computers
like you’ve always dreamed of 😊&lt;/p&gt;</content><author><name>Ben Swift</name></author><category term="gigs" /><category term="acma" /><category term="livecoding" /><summary type="html">Good news everyone; we’re hosting the annual Australasian Computer Music Conference (ACMC) at the ANU this year from July 8–11. ACMC is a festival of gigs, talks, installations and hands-on tutorials designed to inspire, challenge, and showcase the computer music community. There’s lots more information on the conference website.</summary></entry></feed>