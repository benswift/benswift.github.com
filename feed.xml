<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.6">Jekyll</generator><link href="https://benswift.me/feed.xml" rel="self" type="application/atom+xml" /><link href="https://benswift.me/" rel="alternate" type="text/html" /><updated>2019-11-08T12:38:26+11:00</updated><id>https://benswift.me/feed.xml</id><title type="html">benswift.me</title><subtitle>livecoder &amp; researcher homepage - code, creativity, culture</subtitle><author><name>Ben Swift</name></author><entry><title type="html">COMP1720 2019 major project exhibtion</title><link href="https://benswift.me/blog/2019/11/08/comp1720-2019-major-project-exhibtion/" rel="alternate" type="text/html" title="COMP1720 2019 major project exhibtion" /><published>2019-11-08T00:00:00+11:00</published><updated>2019-11-08T00:00:00+11:00</updated><id>https://benswift.me/blog/2019/11/08/comp1720-2019-major-project-exhibtion</id><content type="html" xml:base="https://benswift.me/blog/2019/11/08/comp1720-2019-major-project-exhibtion/">&lt;p&gt;If you‚Äôre around the ANU campus tomorrow (Saturday Nov 9) then come along to see
the &lt;a href=&quot;https://cs.anu.edu.au/courses/comp1720/&quot;&gt;COMP1720&lt;/a&gt; &lt;em&gt;Art &amp;amp; Interaction in
New Media&lt;/em&gt; major project exhibition. This year‚Äôs theme is &lt;em&gt;listening
&lt;strong&gt;in&lt;/strong&gt;/listening &lt;strong&gt;out&lt;/strong&gt;&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Here are the details:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;date&lt;/strong&gt;: Sat Nov 9&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;time&lt;/strong&gt;: 4:30pm‚Äì6:30pm&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;location&lt;/strong&gt;: HN computer labs 1.23 &amp;amp; 1.24 (ground floor of the &lt;a href=&quot;https://goo.gl/maps/ZiwfuqyNSxx8ZAR3A&quot;&gt;Hanna Neumann
building&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;cost&lt;/strong&gt;: free!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The students have been working super hard (here‚Äôs a &lt;a href=&quot;https://cs.anu.edu.au/courses/comp1720/showcase/&quot;&gt;sneak
peek&lt;/a&gt;) so come along, play
with some cool interactive browser artworks and see the cool
code/creativity/culture work going on here at the ANU üëè.&lt;/p&gt;

&lt;p&gt;Here‚Äôs a photo from &lt;em&gt;last year‚Äôs&lt;/em&gt; exhibition:&lt;/p&gt;

&lt;picture&gt;&lt;img alt=&quot;folks having fun at the COMP1720 exhibition&quot; src=&quot;/assets/images/posts/comp1720-mp-exhibition-2018-2-ca1d8558480207841dcb41c22d7722c929b5accef628f2eb1444b0d4254135fd.jpg&quot; /&gt;&lt;/picture&gt;</content><author><name>Ben Swift</name></author><category term="teaching" /><category term="ccc" /><category term="gigs" /><summary type="html">If you‚Äôre around the ANU campus tomorrow (Saturday Nov 9) then come along to see the COMP1720 Art &amp;amp; Interaction in New Media major project exhibition. This year‚Äôs theme is listening in/listening out.</summary></entry><entry><title type="html">code/creativity/culture curriculum design workshop</title><link href="https://benswift.me/blog/2019/11/07/codesign-culture-lab-workshop/" rel="alternate" type="text/html" title="code/creativity/culture curriculum design workshop" /><published>2019-11-07T00:00:00+11:00</published><updated>2019-11-07T00:00:00+11:00</updated><id>https://benswift.me/blog/2019/11/07/codesign-culture-lab-workshop</id><content type="html" xml:base="https://benswift.me/blog/2019/11/07/codesign-culture-lab-workshop/">&lt;p&gt;Is it possible to learn about algorithms by writing poetry about wealth
inequality? How about commenting on social media use via sculptures built using
cybersecurity tools and concepts? Furthermore, is it possible to design an
assessment task which encourages deep technical work and honest cultural
reflection, while still producing a genuinely interesting creative outcome?&lt;/p&gt;

&lt;p&gt;This workshop will bring together folks from all points of the
code/creativity/culture compass to design a &lt;em&gt;real&lt;/em&gt; assessment task for the
&lt;strong&gt;c/c/c studio&lt;/strong&gt; creative code outreach program. In fact, it &lt;em&gt;needs&lt;/em&gt; a diverse
range of voices to work properly. So if you‚Äôve got thoughts and ideas about
CS/Engineering curriculum design, the arts, and life within the socio-technical
assemblage of our present age, then come along and have your say!&lt;/p&gt;

&lt;p&gt;This workshop is part of the &lt;a href=&quot;https://cecs.anu.edu.au/events/event-series/codesign-culture-lab&quot;&gt;CoDesign Culture
Lab&lt;/a&gt;. If
you‚Äôre coming to the culture lab and you‚Äôd like to be part of the workshop, &lt;a href=&quot;mailto:ben.swift@anu.edu.au&quot;&gt;get
in touch&lt;/a&gt; üòä&lt;/p&gt;

&lt;div id=&quot;toc&quot;&gt;

  &lt;h2&gt;table of contents&lt;/h2&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#workshop-timeline&quot; id=&quot;markdown-toc-workshop-timeline&quot;&gt;Workshop timeline&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#group-work-session-1&quot; id=&quot;markdown-toc-group-work-session-1&quot;&gt;Session 1: writing an assessment spec&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#group-work-session-2&quot; id=&quot;markdown-toc-group-work-session-2&quot;&gt;Session 2: articulating the assessment criteria&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#presenter-bio&quot; id=&quot;markdown-toc-presenter-bio&quot;&gt;Presenter bio&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#footnotes&quot; id=&quot;markdown-toc-footnotes&quot;&gt;Footnotes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;

&lt;h2 id=&quot;workshop-timeline&quot;&gt;Workshop timeline&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;9:00&lt;/strong&gt;: intro‚Äîwhat is the c/c/c studio&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;9:20&lt;/strong&gt;: group formation &amp;amp; ice-breakers&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;9:30&lt;/strong&gt;: spin the wheel(s)!&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;9:45&lt;/strong&gt;: &lt;a href=&quot;#group-work-session-1&quot;&gt;group work session 1&lt;/a&gt; (assessment item spec)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;10:30&lt;/strong&gt;: present your assessment item spec to workshop&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;11:00&lt;/strong&gt;:  break (morning tea)&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;11:30&lt;/strong&gt;: &lt;a href=&quot;#group-work-session-2&quot;&gt;group work session 2&lt;/a&gt; (assessment criteria)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;12:00&lt;/strong&gt;: present your assessment criteria to the workshop&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;12:15&lt;/strong&gt;: wrap-up&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;group-work-session-1&quot;&gt;Session 1: writing an assessment spec&lt;/h2&gt;

&lt;p&gt;In his intro, Ben introduced the c/c/c studio idea and set the scene for the
whole ‚Äúcode/creativity/culture‚Äù thing (spoiler: they‚Äôre all &lt;em&gt;highly&lt;/em&gt; entangled).
You‚Äôre now a curriculum designer for the c/c/c studio! Welcome aboard.&lt;/p&gt;

&lt;h3 id=&quot;design-brief&quot;&gt;Design brief&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;Genius learns from nature, its own nature. Talent learns from art. Also,
creativity and culture seem to be important. &lt;em&gt;Olivia Wilde&lt;/em&gt;&lt;sup id=&quot;fnref:wilde&quot;&gt;&lt;a href=&quot;#fn:wilde&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Your design brief for today&lt;/strong&gt;: in your group, create an
assessment&lt;sup id=&quot;fnref:assessment&quot;&gt;&lt;a href=&quot;#fn:assessment&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; task which teaches a particular &lt;em&gt;code&lt;/em&gt; concept/tool by
exploring a problem/challenge facing our&lt;sup id=&quot;fnref:culture&quot;&gt;&lt;a href=&quot;#fn:culture&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt; &lt;em&gt;culture&lt;/em&gt; through a
&lt;em&gt;creative&lt;/em&gt; process/medium.&lt;/p&gt;

&lt;p&gt;In this group session (which runs until 10:30am) your group needs to write a
document. I don‚Äôt want to be &lt;em&gt;too&lt;/em&gt; dogmatic about the form and content‚Äîthe
whole point of this workshop is to throw out the rulebook‚Äîbut here‚Äôs a example
of the sorts of things that are usually important in describing an assessment
item:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;description&lt;/strong&gt;: a high-level description of what the task is and what the the
students will be doing&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;background/motivation&lt;/strong&gt;: a bit more background on the task, tools, problem
domain, as well as any pre-requisite skills the students will need&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;learning outcomes&lt;/strong&gt;: a list of learning outcomes for the assessment task (or
which the task is designed to assess)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;spec&lt;/strong&gt;: a concise, specific description of what the students are required to
produce, including any specific constraints or requirements on either the
deliverable or the process&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;resources&lt;/strong&gt;: a list of resources the students might find helpful in
completing the task&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;faq&lt;/strong&gt;: a list of (anticipated) questions the students might have about the
assessment task&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You don‚Äôt have to follow these exact headings, but you do have to produce a
document (by the end of this session!) which you‚Äôll then present to the wider
workshop. So, your group will need to organise:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;a scribe (either on-paper or on a laptop) to write the document&lt;/li&gt;
  &lt;li&gt;a presenter (or a creative group presentation strategy) for telling everyone
about your amazing assessment task&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you want to work on paper there are paper templates floating around (let us
know if you‚Äôd like one). If you‚Äôve got a digital scribe, then there are
electronic templates (&lt;a href=&quot;/assets/documents/ccc-curriculum-design-workshop/ccc-assessment-task.md&quot;&gt;markdown&lt;/a&gt; and
&lt;a href=&quot;/assets/documents/ccc-curriculum-design-workshop/ccc-assessment-task.docx&quot;&gt;MS Word&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;One more thing to keep in mind: in the &lt;em&gt;next&lt;/em&gt; group work session you‚Äôll be
writing a set of assessment criteria which will be used to assess the
submissions for your assessment task. So you don‚Äôt have to worry about writing
them down formally just yet, but keep that in mind as you design your assessment
task.&lt;/p&gt;

&lt;h3 id=&quot;lets-spin-the-wheels&quot;&gt;Let‚Äôs spin the wheels!&lt;/h3&gt;

&lt;p&gt;You don‚Äôt get to pick the code concept/cultural problem/creative process triad
which forms the basis for your assessment task. Instead, we‚Äôll spin the
code/creativity/culture wheels&lt;sup id=&quot;fnref:winwheel&quot;&gt;&lt;a href=&quot;#fn:winwheel&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt; and let fate&lt;sup id=&quot;fnref:fate&quot;&gt;&lt;a href=&quot;#fn:fate&quot; class=&quot;footnote&quot;&gt;5&lt;/a&gt;&lt;/sup&gt; decide.&lt;/p&gt;

&lt;script src=&quot;http://cdnjs.cloudflare.com/ajax/libs/gsap/latest/TweenMax.min.js&quot;&gt;&lt;/script&gt;

&lt;script src=&quot;/assets/js/Winwheel-b66809a0e59bfb42fc1f3a968197308db7eac0bea2d388ec34c5508d889a9aca.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;

&lt;script src=&quot;/assets/js/ccc-workshop-wheels-32dc5c5f8dbea522d232fd7a6f0e11c740282817adea83f90bd8802a515b1751.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;

&lt;style&gt;
.wheelIndicator {
  width:100%;
  font-size:6em;
  text-align:center;
  margin-bottom:-0.3em;
}

.wheelResult {
  font-size:2em;
  margin-bottom:1em;
}
&lt;/style&gt;

&lt;h4 id=&quot;the-code-wheel&quot;&gt;the code wheel&lt;/h4&gt;

&lt;p&gt;This wheel selects the &lt;em&gt;tool/concept&lt;/em&gt; which the students need to leverage (and
in doing so, understand) in their submission. This is deliberately broad‚Äîyou
can (and should) narrow it down in &lt;em&gt;your&lt;/em&gt; assessment task. Don‚Äôt get hung up on
the ‚Äúcode‚Äù moniker, think about it as a computing/computer science tool/concept
more broadly.&lt;/p&gt;

&lt;p&gt;Note: one other way to frame this is this is the skill/concept that you want the
students to learn (perhaps surreptitiously) in &lt;em&gt;doing&lt;/em&gt; the assessment task.&lt;/p&gt;

&lt;div class=&quot;wheelIndicator&quot;&gt;‚ß®&lt;/div&gt;
&lt;canvas id=&quot;codeWheel-canvas&quot; width=&quot;800&quot; height=&quot;600&quot; onclick=&quot;startSpin(codeWheel);&quot;&gt;
&lt;/canvas&gt;

&lt;p class=&quot;wheelResult&quot;&gt;&lt;em&gt;code&lt;/em&gt; wheel: &lt;strong&gt;&lt;span class=&quot;codeWheel-canvas-result&quot;&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;script&gt;
// based on a (slightly tweaked) version of the ACM BoK 2016
let acmBoK2016 = [
  &quot;Circuits &amp; Electronics&quot;,
  &quot;Computing Algorithms&quot;,
  &quot;Computer Architecture&quot;,
  &quot;Digital Design&quot;,
  &quot;Embedded Systems&quot;,
  &quot;Computer Networks&quot;,
  &quot;Information Security&quot;,
  &quot;Signal Processing&quot;,
  &quot;Systems &amp; Project Eng.&quot;,
  &quot;Software Design&quot;
];

// these ones pulled out of Ben's arse
let benCodeConcepts = [
  &quot;algorithms&quot;,
  &quot;embedded systems&quot;,
  &quot;signal processing&quot;,
  &quot;software design&quot;,
  &quot;databases&quot;,
  &quot;networks&quot;,
  &quot;UI/UX design&quot;,
  &quot;data analytics&quot;,
  &quot;machine learning&quot;,
  &quot;cybersecurity&quot;
]

let codeWheel = makeWheel(benCodeConcepts, &quot;codeWheel-canvas&quot;);
&lt;/script&gt;

&lt;h4 id=&quot;the-creativity-wheel&quot;&gt;the creativity wheel&lt;/h4&gt;

&lt;p&gt;This wheel selects the creative &lt;em&gt;process&lt;/em&gt; (the medium) through which the student
will explore the problem.&lt;/p&gt;

&lt;div class=&quot;wheelIndicator&quot;&gt;‚ß®&lt;/div&gt;
&lt;canvas id=&quot;creativityWheel-canvas&quot; width=&quot;800&quot; height=&quot;600&quot; onclick=&quot;startSpin(creativityWheel);&quot;&gt;
&lt;/canvas&gt;

&lt;p class=&quot;wheelResult&quot;&gt;&lt;em&gt;creativity&lt;/em&gt; wheel: &lt;strong&gt;&lt;span class=&quot;creativityWheel-canvas-result&quot;&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;script&gt;
let creativityWheel = makeWheel(
  [
	&quot;music&quot;,
	&quot;sound&quot;,
    &quot;dance&quot;,
    &quot;photography&quot;,
	&quot;painting&quot;,
	&quot;drawing&quot;,
	&quot;textiles&quot;,
	&quot;film&quot;,
	&quot;sculpture&quot;,
	&quot;creative writing&quot;,
	&quot;memes&quot;,
  ],
  &quot;creativityWheel-canvas&quot;);
&lt;/script&gt;

&lt;h4 id=&quot;the-culture-wheel&quot;&gt;the culture wheel&lt;/h4&gt;

&lt;p&gt;This wheel selects the &lt;em&gt;problem/challenge&lt;/em&gt; facing our culture/society to explore
(and perhaps comment on) through the work. Again, you might want to narrow it
down to a particular angle on this problem, although it‚Äôs worth thinking about
how to leave students to wrestle with what &lt;em&gt;they&lt;/em&gt; think about the problem, not
just picking a theme which implies that there‚Äôs only one ‚Äúright approach‚Äù.&lt;/p&gt;

&lt;div class=&quot;wheelIndicator&quot;&gt;‚ß®&lt;/div&gt;
&lt;canvas id=&quot;cultureWheel-canvas&quot; width=&quot;800&quot; height=&quot;600&quot; onclick=&quot;startSpin(cultureWheel);&quot;&gt;
&lt;/canvas&gt;

&lt;p class=&quot;wheelResult&quot;&gt;&lt;em&gt;culture&lt;/em&gt; wheel: &lt;strong&gt;&lt;span class=&quot;cultureWheel-canvas-result&quot;&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;script&gt;
let cultureWheel = makeWheel(
  [
   &quot;privacy&quot;,
   &quot;ethics&quot;,
   &quot;wealth distribution&quot;,
   &quot;climate change&quot;,
   &quot;work-life balance&quot;,
   &quot;social media use&quot;,
   &quot;immigration&quot;,
   &quot;tolerance&quot;,
   &quot;food security&quot;,
   &quot;world peace&quot;
  ],
  &quot;cultureWheel-canvas&quot;);
&lt;/script&gt;

&lt;p class=&quot;wheelResult&quot;&gt;&lt;em&gt;assessment task goal:&lt;/em&gt;&lt;/p&gt;

&lt;p class=&quot;hl-para wheelResult&quot;&gt;

learning about &lt;strong&gt;&lt;span class=&quot;codeWheel-canvas-result&quot;&gt;____&lt;/span&gt;&lt;/strong&gt; by exploring &lt;strong&gt;&lt;span class=&quot;cultureWheel-canvas-result&quot;&gt;____&lt;/span&gt;&lt;/strong&gt; through &lt;strong&gt;&lt;span class=&quot;creativityWheel-canvas-result&quot;&gt;____&lt;/span&gt;&lt;/strong&gt;

&lt;/p&gt;

&lt;h3 id=&quot;things-to-consider-as-you-design-your-assessment-task&quot;&gt;Things to consider as you design your assessment task&lt;/h3&gt;

&lt;p&gt;Now that you‚Äôve spun the wheels, you might be thinking that they‚Äôve left you
with a pretty broad scope‚Äîand you‚Äôd be right. Your group‚Äôs job is to narrow
this down into a specific task which is tractable for your intended audience of
students. It‚Äôs fine (good, even!) if you narrow it down a lot. As Oliver Wilde Constraint is the
mother of creativity[^]&lt;/p&gt;

&lt;p&gt;Some of your group members might have lots of experience designing assessment
tasks, others may have never done it before (although I‚Äôm sure that everyone‚Äôs
&lt;em&gt;done&lt;/em&gt; one).&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;for the &lt;em&gt;code&lt;/em&gt; and &lt;em&gt;culture&lt;/em&gt; wheel results in particular, what are the key
aspects or sub-problems that you want the students to engage with? what are
some of the creative ways you can imagine to get those concepts across?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;the target age/background/etc of the students is up to you‚Äîyou could choose
early high-school one-off workshop, year 11/12 extension program (i.e. the
c/c/c studio), first-year assignment at uni, graduate-level coursework, etc.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;the Learning Outcomes are really important, and can act as a guide for the
rest of the design task‚Äîdon‚Äôt leave them till the last minute&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;what are the conventions of ‚Äúassesment tasks‚Äù? how can you flaunt them?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;how can you ensure that the students engage seriously with the &lt;em&gt;code&lt;/em&gt; part of
the problem? how can you make sure they actually build something, not just
talk about stuff?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;in plain language, what do you want a student to learn through the process of
completing your assessment task? (that will help with coming up with some
learning outcomes)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;how might the &lt;em&gt;concept/tool&lt;/em&gt; and the &lt;em&gt;creative process&lt;/em&gt; shape the responses to
the problem? can you use this to your advantage in encouraging students to
attain the learning outcomes?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;how are you going to constrain the scope of your task so that it supports
students from a wide range of backgrounds/abilities?&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;group-work-session-2&quot;&gt;Session 2: articulating the assessment criteria&lt;/h2&gt;

&lt;h3 id=&quot;things-to-consider-as-you-design-your-assessment-criteria&quot;&gt;Things to consider as you design your assessment criteria&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;what would an &lt;em&gt;excellent&lt;/em&gt; submission look like? what would a
borderline-acceptable (e.g. a bare pass) submission look like?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;the problems (from the culture wheel) are &lt;em&gt;not solvable through a single
assessment task&lt;/em&gt;, so don‚Äôt make that the criteria‚Äîinstead, you want students
to explore &amp;amp; understand the problem, process &amp;amp; tool more deeply&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;presenter-bio&quot;&gt;Presenter bio&lt;/h2&gt;

&lt;p&gt;Dr Ben Swift is a Senior Lecturer in the ANU Research School of Computer Science
(RSCS). As the leader of the code/creativity/culture (c/c/c) research group,
Ben‚Äôs goal is to create spaces for talking about the way that code (software),
creativity (especially the arts) and culture (life) intersect in the modern
world. Ben‚Äôs research contributions range from traditional Computer Science
(digital multimedia, web technologies and human-computer interaction) through to
invited livecoding (live code-based music performance) performances and
multimedia artwork installations.&lt;/p&gt;

&lt;p&gt;In 2019 Ben was awarded one of the inaugural &lt;em&gt;Reimagine Fellowships&lt;/em&gt; to develop
the &lt;strong&gt;c/c/c studio&lt;/strong&gt;, an ANU Extension outreach program which will teach
computer science to pre-tertiary students through making art, music and other
cool things with computers. The c/c/c studio will also provide a supportive
community in which a new generation of people can learn, create, and
share‚Äîunlocking the latent potential in students who never knew their diverse
interests (especially in the arts &amp;amp; music) could be used in engineering and
computing.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://cs.anu.edu.au/code-creativity-culture/&quot;&gt;https://cs.anu.edu.au/code-creativity-culture/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://benswift.me&quot;&gt;http://benswift.me&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;footnotes&quot;&gt;Footnotes&lt;/h2&gt;
&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:wilde&quot;&gt;
      &lt;p&gt;obviously, this is fake, although &lt;a href=&quot;https://www.azquotes.com/quote/776726&quot;&gt;Oscar Wilde said something
similar&lt;/a&gt;, and I‚Äôm &lt;em&gt;pretty sure&lt;/em&gt; he
was Olivia Wilde‚Äôs uncle¬†&lt;a href=&quot;#fnref:wilde&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:assessment&quot;&gt;

      &lt;p&gt;you can think of it as an assignment, but that word has some baggage, so
just think of it as a description of a thing which a student must submit
which will be evaluated on whether it‚Äôs a good thing¬†&lt;a href=&quot;#fnref:assessment&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:culture&quot;&gt;

      &lt;p&gt;Part of the challenge here is that we don‚Äôt live in a monoculture, at a
local level (because filter bubbles), at a national level (because
multiculturalism) and at a global level (because global village). Still, I‚Äôm
using this word so the c/c/c schtick makes sense.¬†&lt;a href=&quot;#fnref:culture&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:winwheel&quot;&gt;
      &lt;p&gt;wheels powered by &lt;a href=&quot;http://dougtesting.net/home&quot;&gt;Winwheel.js&lt;/a&gt; by Douglas McKechie¬†&lt;a href=&quot;#fnref:winwheel&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:fate&quot;&gt;
      &lt;p&gt;well, the PRNG in your web browser, anyway¬†&lt;a href=&quot;#fnref:fate&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Ben Swift</name></author><category term="reimagine" /><category term="ccc" /><summary type="html">Is it possible to learn about algorithms by writing poetry about wealth inequality? How about commenting on social media use via sculptures built using cybersecurity tools and concepts? Furthermore, is it possible to design an assessment task which encourages deep technical work and honest cultural reflection, while still producing a genuinely interesting creative outcome?</summary></entry><entry><title type="html">LENS showcase S2 2019</title><link href="https://benswift.me/blog/2019/10/31/anu-laptop-ensemble-showcase-s2-2019/" rel="alternate" type="text/html" title="LENS showcase S2 2019" /><published>2019-10-31T00:00:00+11:00</published><updated>2019-10-31T00:00:00+11:00</updated><id>https://benswift.me/blog/2019/10/31/anu-laptop-ensemble-showcase-s2-2019</id><content type="html" xml:base="https://benswift.me/blog/2019/10/31/anu-laptop-ensemble-showcase-s2-2019/">&lt;p&gt;Last weekend the S2 2019
&lt;a href=&quot;https://cs.anu.edu.au/code-creativity-culture/lens/&quot;&gt;LENS&lt;/a&gt; cohort (the ANU
Laptop Ensemble) gave their final performances as part of the ANU School of
Music‚Äôs composition showcase. Thanks to everyone who attended, and congrats
again to the students who learned a bunch of computer music stuff &amp;amp;
build/composed and performed a working piece in one crazy semester. And an
especially big thanks to my LENS co-directors
&lt;a href=&quot;http://charlesmartin.com.au/&quot;&gt;Charles&lt;/a&gt; and
&lt;a href=&quot;http://music.cass.anu.edu.au/people/dr-alexander-hunter&quot;&gt;Alec&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There were more talented photographers than I present (and I‚Äôll put those photos
&amp;amp; videos up when I track them down) but here are some photos I snapped of the
performances:&lt;/p&gt;

&lt;picture&gt;&lt;img alt=&quot;LENS members performing at the showcase&quot; src=&quot;/assets/images/posts/lens-showcase-2019-s2/IMG_0895-7b85a61c7e420b72a5501a29478e7383f84aaee03306a04ab1adcb706bab1589.jpg&quot; /&gt;&lt;/picture&gt;
&lt;picture&gt;&lt;img alt=&quot;LENS members performing at the showcase&quot; src=&quot;/assets/images/posts/lens-showcase-2019-s2/IMG_0896-e57a47fb992d099eaf8c9dafb2621a22831ce33cb33041c0c09a376982017379.jpg&quot; /&gt;&lt;/picture&gt;
&lt;picture&gt;&lt;img alt=&quot;LENS members performing at the showcase&quot; src=&quot;/assets/images/posts/lens-showcase-2019-s2/IMG_0897-8c16c6195295fc51162a8127023d91e7eaeecea2082904e86bebb06e0bda7b03.jpg&quot; /&gt;&lt;/picture&gt;
&lt;picture&gt;&lt;img alt=&quot;LENS members performing at the showcase&quot; src=&quot;/assets/images/posts/lens-showcase-2019-s2/IMG_0898-71851e581d51ad11e16d11240608c9222c611ffd2dc387ae4d1f750dac31143c.jpg&quot; /&gt;&lt;/picture&gt;
&lt;picture&gt;&lt;img alt=&quot;LENS members performing at the showcase&quot; src=&quot;/assets/images/posts/lens-showcase-2019-s2/IMG_0899-074554cb7cd03ca42af42f42e3cc6322f0f0f417485bec1572c52c89fec8ce6e.jpg&quot; /&gt;&lt;/picture&gt;
&lt;picture&gt;&lt;img alt=&quot;LENS members performing at the showcase&quot; src=&quot;/assets/images/posts/lens-showcase-2019-s2/IMG_0900-c93c2205aea67252895126a4410acc3d96d3297a5951595140e766bab76bd081.jpg&quot; /&gt;&lt;/picture&gt;

&lt;p&gt;the LENS members even stayed around afterwards to help us bump out:&lt;/p&gt;

&lt;picture&gt;&lt;img alt=&quot;LENS members packing up at the showcase&quot; src=&quot;/assets/images/posts/lens-showcase-2019-s2/IMG_0901-afa757d193dc380549500eaf66f48bc8a91f516d815147e0c0514ffcfb73f476.jpg&quot; /&gt;&lt;/picture&gt;

&lt;p&gt;LENS will be back again in S1 2019, so if you‚Äôre interested then &lt;a href=&quot;mailto:ben.swift@anu.edu.au&quot;&gt;shoot me an
email&lt;/a&gt; and we can keep you in the loop about how to
be involved.&lt;/p&gt;</content><author><name>Ben Swift</name></author><category term="lens" /><category term="gigs" /><summary type="html">Last weekend the S2 2019 LENS cohort (the ANU Laptop Ensemble) gave their final performances as part of the ANU School of Music‚Äôs composition showcase. Thanks to everyone who attended, and congrats again to the students who learned a bunch of computer music stuff &amp;amp; build/composed and performed a working piece in one crazy semester. And an especially big thanks to my LENS co-directors Charles and Alec.</summary></entry><entry><title type="html">Ben and COMP2300 next year</title><link href="https://benswift.me/blog/2019/10/21/ben-and-comp2300-next-year/" rel="alternate" type="text/html" title="Ben and COMP2300 next year" /><published>2019-10-21T00:00:00+11:00</published><updated>2019-10-21T00:00:00+11:00</updated><id>https://benswift.me/blog/2019/10/21/ben-and-comp2300-next-year</id><content type="html" xml:base="https://benswift.me/blog/2019/10/21/ben-and-comp2300-next-year/">&lt;p&gt;Students&lt;sup id=&quot;fnref:organised-ones&quot;&gt;&lt;a href=&quot;#fn:organised-ones&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; are starting to turn their gaze towards 2020, and so
I‚Äôve been getting a bunch of emails asking me if I‚Äôm teaching
&lt;a href=&quot;https://cs.anu.edu.au/courses/comp2300/&quot;&gt;COMP2300/6300&lt;/a&gt; &lt;em&gt;Computer Organisation
&amp;amp; Program Execution&lt;/em&gt; again in Semester 1 2020.&lt;/p&gt;

&lt;p&gt;The short answer : &lt;strong&gt;no&lt;/strong&gt;. The slightly longer answer is that while I‚Äôll always
love COMP2300 (it‚Äôs the first course I got to design &amp;amp; write myself) my energies
for the next couple of years are going to be poured into the &lt;a href=&quot;/blog/2019/03/20/reimagine-fellow-project-pitch/&quot;&gt;c/c/c
studio&lt;/a&gt; (as part of my
&lt;a href=&quot;/blog/2019/08/30/Im-a-reimagine-fellow/&quot;&gt;Reimagine Fellowship&lt;/a&gt;). In 2020, &lt;a href=&quot;https://cs.anu.edu.au/code-creativity-culture/charles-martin/&quot;&gt;Charles
Martin&lt;/a&gt; will be
convening &amp;amp; running COMP2300‚Äîand he‚Äôll do a great job. I‚Äôll probably pop in
from time to time to give a guest lecture (and maybe even sing a revision song)
but he‚Äôll be the main convenor. So if you‚Äôve got any questions about taking that
course in 2020 (either as a student, or perhaps as part of the tutoring team)
then you should reach out to &lt;a href=&quot;mailto:charles.martin@anu.edu.au&quot;&gt;Charles&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:organised-ones&quot;&gt;
      &lt;p&gt;well, the organised ones, anyway¬†&lt;a href=&quot;#fnref:organised-ones&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Ben Swift</name></author><category term="teaching" /><summary type="html">Students1 are starting to turn their gaze towards 2020, and so I‚Äôve been getting a bunch of emails asking me if I‚Äôm teaching COMP2300/6300 Computer Organisation &amp;amp; Program Execution again in Semester 1 2020. well, the organised ones, anyway¬†&amp;#8617;</summary></entry><entry><title type="html">Making Altair/Vega-Lite charts readable without squinting</title><link href="https://benswift.me/blog/2019/10/16/making-altair-vega-lite-charts-readable-without-squinting/" rel="alternate" type="text/html" title="Making Altair/Vega-Lite charts readable without squinting" /><published>2019-10-16T20:14:00+11:00</published><updated>2019-10-16T20:14:00+11:00</updated><id>https://benswift.me/blog/2019/10/16/making-altair-vega-lite-charts-readable-without-squinting</id><content type="html" xml:base="https://benswift.me/blog/2019/10/16/making-altair-vega-lite-charts-readable-without-squinting/">&lt;p&gt;My love for the &lt;a href=&quot;https://www.amazon.com/Grammar-Graphics-Statistics-Computing/dp/0387245448&quot;&gt;Grammar of
Graphics&lt;/a&gt;
runs deep, and in particular for Hadley Wickham‚Äôs famous &lt;code&gt;ggplot2&lt;/code&gt; which showed
me the light back when I was a young PhD student. Seriously, once you have your
head around how it works it gives you datavis superpowers. These days I often
work in Python, and for datavis I‚Äôm enjoying
&lt;a href=&quot;https://altair-viz.github.io/index.html&quot;&gt;Altair&lt;/a&gt; which is based around the same
philosophy (and outputs to &lt;a href=&quot;https://vega.github.io/vega-lite/&quot;&gt;Vega-Lite&lt;/a&gt; for
rendering in the browser).&lt;/p&gt;

&lt;p&gt;Recently I‚Äôve needed to (a) create some snazzy graphs with Altair and (b)
display them in a slide deck. Part (a) was actually the easy part‚Äîthe tricky
part was (b) getting Altair to render charts with text &amp;amp; other marks that
weren‚Äôt so small that the slide was unreadable.&lt;/p&gt;

&lt;p&gt;Here‚Äôs an example: a &lt;a href=&quot;https://altair-viz.github.io/gallery/simple_line_chart.html&quot;&gt;simple line
chart&lt;/a&gt; from the
&lt;a href=&quot;https://altair-viz.github.io/gallery/index.html&quot;&gt;Altair Example Gallery&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;import altair as alt
import numpy as np
import pandas as pd

x = np.arange(100)
source = pd.DataFrame({&quot;x&quot;: x, &quot;f(x)&quot;: np.sin(x / 5)})

alt.Chart(source).mark_line().encode(x=&quot;x&quot;, y=&quot;f(x)&quot;).save(f&quot;{CHART_DIR}/sin-x.svg&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;which (with default settings) produces a chart that looks like this:&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;f(x) = sin(x)/5&quot; src=&quot;/assets/images/posts/altair-charts/sin-x-0147a350a59fcab490142d8a41999e9d5563ee11670d0e64e3d37124408c5715.svg&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;easy-tweaking-of-size-through-chart-themes&quot;&gt;Easy tweaking of ‚Äúsize‚Äù through chart themes&lt;/h2&gt;

&lt;p&gt;Now, that figure might look fairly readable, but when it‚Äôs on a slide the text,
labels &amp;amp; even lines are quite small&lt;sup id=&quot;fnref:examples&quot;&gt;&lt;a href=&quot;#fn:examples&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;. I don‚Äôt need &lt;a href=&quot;https://github.com/vega/vega-lite/issues/1714&quot;&gt;fine-grained
control&lt;/a&gt; over the relative sizes
of labels vs legend vs title, etc. I just want a simple knob for making all the
text bigger so that my slides don‚Äôt double as an &lt;a href=&quot;https://en.wikipedia.org/wiki/Eye_chart&quot;&gt;eye
chart&lt;/a&gt;. The Vega-Lite folks (the
underlying vis engine which Altair uses) &lt;a href=&quot;https://github.com/vega/vega-parser/issues/18&quot;&gt;know about the issue, but don‚Äôt want
to fix it&lt;/a&gt;.&lt;/p&gt;

&lt;p class=&quot;hl-para&quot;&gt;Note that when I‚Äôm talking about ‚Äúsize‚Äù I‚Äôm &lt;strong&gt;not&lt;/strong&gt; talking about the size &amp;amp;
dimensions of the chart‚ÄîI‚Äôm talking about the size of the text, lines &amp;amp; other
marks &lt;em&gt;relative to&lt;/em&gt; the overall size of the chart.&lt;/p&gt;

&lt;p&gt;The easiest way I found to fix this is to set a small width &amp;amp; height for the
chart, then export to a vector format (e.g. svg) so that when the image gets
displayed everything will be ‚Äústretched‚Äù up into big, bold sizes (and since it‚Äôs
a vector format, things will still be nice and crisp). This chart code is the
same except for the &lt;code&gt;.properties(width=100, height=60)&lt;/code&gt; part:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;alt.Chart(source).mark_line().encode(x=&quot;x&quot;, y=&quot;f(x)&quot;).properties(
    width=100, height=60
).save(f&quot;{CHART_DIR}/sin-x-big-text.svg&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img alt=&quot;f(x) = sin(x)/5 with bigger labels&quot; src=&quot;/assets/images/posts/altair-charts/sin-x-big-text-151a8e06a98f6b8a8efef8c8bc8cac21d062e26c3f42854af3bf53ea2ffc698d.svg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Obviously I‚Äôm exaggerating here to make a point, but the key point is that there
are just a couple of numbers to tweak (&lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt;) which control text
&amp;amp; line size, label sizes, and also titles and legends (if present). And that‚Äôs
not something that‚Äôs exposed as simply in any other way by the Altair/Vega-Lite
API.&lt;/p&gt;

&lt;p&gt;One final tip: if you want to have consistent sizes &amp;amp; aspect ratios across lots
of charts (e.g. you‚Äôre batch exporting lots of charts for a presentation or
report) you can create &lt;a href=&quot;https://altair-viz.github.io/user_guide/configuration.html#defining-a-custom-theme&quot;&gt;a custom
theme&lt;/a&gt;,
but otherwise you can just do it with a call to the &lt;code&gt;.properties()&lt;/code&gt; method as
shown.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:examples&quot;&gt;

      &lt;p&gt;To be honest, these simple examples from the example gallery don‚Äôt really
help me make my point, they‚Äôre still pretty readable. But when the charts
get more complicated &amp;amp; have more data marks then things get smaller &amp;amp; more
zoomed out, and the problem gets much worse.¬†&lt;a href=&quot;#fnref:examples&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Ben Swift</name></author><category term="web" /><category term="python" /><summary type="html">My love for the Grammar of Graphics runs deep, and in particular for Hadley Wickham‚Äôs famous ggplot2 which showed me the light back when I was a young PhD student. Seriously, once you have your head around how it works it gives you datavis superpowers. These days I often work in Python, and for datavis I‚Äôm enjoying Altair which is based around the same philosophy (and outputs to Vega-Lite for rendering in the browser).</summary></entry><entry><title type="html">Package managers: update or upgrade?</title><link href="https://benswift.me/blog/2019/10/16/package-managers-update-or-upgrade/" rel="alternate" type="text/html" title="Package managers: &lt;code&gt;update&lt;/code&gt; or &lt;code&gt;upgrade&lt;/code&gt;?" /><published>2019-10-16T00:00:00+11:00</published><updated>2019-10-16T00:00:00+11:00</updated><id>https://benswift.me/blog/2019/10/16/package-managers-update-or-upgrade</id><content type="html" xml:base="https://benswift.me/blog/2019/10/16/package-managers-update-or-upgrade/">&lt;p&gt;Quick quiz: for the following language/system &lt;a href=&quot;https://en.wikipedia.org/wiki/Package_manager&quot;&gt;package
managers&lt;/a&gt;, what‚Äôs the name of the
subcommand to update&lt;sup id=&quot;fnref:or-upgrade&quot;&gt;&lt;a href=&quot;#fn:or-upgrade&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; your project/system to the latest version of
one (or more) of your project‚Äôs dependencies?&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;package manager&lt;/th&gt;
      &lt;th&gt;language/system&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;bundle&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Ruby&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;pip&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Python&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;poetry&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Python&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;pipenv&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Python&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;npm&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;javascript&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;yarn&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;javascript&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;brew&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;macOS&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;apt-get&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Debian&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;cargo&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Rust&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;stack&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Haskell&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;lein&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Clojure&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;dep&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Go&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;cpan&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Perl&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;button onclick=&quot;document.getElementById(&amp;quot;answer-table&amp;quot;).style.visibility=&amp;quot;visible&amp;quot;;&quot;&gt;click to reveal the answers&lt;/button&gt;&lt;/p&gt;

&lt;table id=&quot;answer-table&quot; style=&quot;visibility: hidden;&quot;&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;package manager&lt;/th&gt;
      &lt;th&gt;language/system&lt;/th&gt;
      &lt;th&gt;(sub)command name&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;bundle&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Ruby&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;upgrade&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;pip&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Python&lt;/td&gt;
      &lt;td&gt;go away&lt;sup id=&quot;fnref:pip&quot;&gt;&lt;a href=&quot;#fn:pip&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;poetry&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Python&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;update&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;pipenv&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Python&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;update&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;npm&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;javascript&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;update&lt;/code&gt; or &lt;code&gt;upgrade&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;yarn&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;javascript&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;upgrade&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;brew&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;macOS&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;upgrade&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;apt-get&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Debian&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;upgrade&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;cargo&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Rust&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;update&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;stack&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Haskell&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;update&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;lein&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Clojure&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;ancient upgrade&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;dep&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Go&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;ensure -update&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;cpan&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Perl&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;upgrade&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;For bonus points, which of them &lt;em&gt;also&lt;/em&gt; recognise the ‚Äúother‚Äù subcommand but it
does something different? For even more bonus points, when does that ‚Äúother‚Äù
option do something unwanted/destructive/irreversible (assuming that all you
want to do is update that dependency to the latest version)?&lt;/p&gt;

&lt;p class=&quot;hl-para&quot;&gt;Look, I‚Äôm not at all saying that you should just go and blindly
&lt;code&gt;update&lt;/code&gt;/&lt;code&gt;upgrade&lt;/code&gt; all of the things‚Äîthat‚Äôs clearly a bad idea. But it still
takes me a non-zero amount of time as I switch between languages/tools to sit
and think ‚Äúok, for this project do I want to &lt;code&gt;update&lt;/code&gt; or &lt;code&gt;upgrade&lt;/code&gt;‚Äù? And that
makes me sad.&lt;/p&gt;

&lt;p&gt;If there‚Äôs a deep, principled (or even a shallow, pragmatic) reason to pick one
or the other then we should observe it, and do it &lt;em&gt;consistently&lt;/em&gt;. Even if
there‚Äôs not, we should toss a coin and be consistent anyway.&lt;/p&gt;

&lt;p&gt;If any of the above commands are incorrect, or if there‚Äôs a better way, then
&lt;a href=&quot;https://twitter.com/benswift&quot;&gt;ping me on twitter&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:or-upgrade&quot;&gt;
      &lt;p&gt;or, y‚Äôknow, upgrade¬†&lt;a href=&quot;#fnref:or-upgrade&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:pip&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://github.com/pypa/pip/issues/59&quot;&gt;https://github.com/pypa/pip/issues/59&lt;/a&gt;¬†&lt;a href=&quot;#fnref:pip&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Ben Swift</name></author><category term="tools" /><category term="ux" /><summary type="html">Quick quiz: for the following language/system package managers, what‚Äôs the name of the subcommand to update1 your project/system to the latest version of one (or more) of your project‚Äôs dependencies? or, y‚Äôknow, upgrade¬†&amp;#8617;</summary></entry><entry><title type="html">Sound file I/O in Extempore with libsndfile</title><link href="https://benswift.me/blog/2019/10/15/sound-file-io-in-extempore-with-libsndfile/" rel="alternate" type="text/html" title="Sound file I/O in Extempore with libsndfile" /><published>2019-10-15T00:00:00+11:00</published><updated>2019-10-15T00:00:00+11:00</updated><id>https://benswift.me/blog/2019/10/15/sound-file-io-in-extempore-with-libsndfile</id><content type="html" xml:base="https://benswift.me/blog/2019/10/15/sound-file-io-in-extempore-with-libsndfile/">&lt;p&gt;&lt;a href=&quot;https://github.com/erikd/libsndfile/&quot;&gt;libsndfile&lt;/a&gt; is ‚Äúa C library for reading
and writing files containing sampled audio data‚Äù, and it‚Äôs pretty great. Here‚Äôs
a quick crash-course on using &lt;a href=&quot;https://github.com/digego/extempore/blob/master/libs/external/sndfile.xtm&quot;&gt;Extempore‚Äôs libsndfile
bindings&lt;/a&gt;
to read, process and write audio data files.&lt;/p&gt;

&lt;p class=&quot;hl-para&quot;&gt;There have been some recent bugfixes in &lt;code&gt;libsndfile&lt;/code&gt;, and (even more recently)
these have made it into Extempore, which builds it‚Äôs own &lt;code&gt;libsndfile&lt;/code&gt; shared
library as part of the CMake build process. So if you want to try this stuff
it‚Äôs probably best that you‚Äôve built the latest Extempore from &lt;code&gt;HEAD&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;loading-the-xtlang-wrappers-for-the-sndfile-library-functions&quot;&gt;Loading the xtlang wrappers for the sndfile library functions&lt;/h2&gt;

&lt;p&gt;Once you‚Äôve got Extempore up and running, the first thing to do is to load the
libsndfile wrapper functions:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-xtlang&quot;&gt;(sys:load &quot;libs/external/sndfile.xtm&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;libs/external/sndlib.xtm&lt;/code&gt; contains &lt;code&gt;bind-lib&lt;/code&gt; definitions for all&lt;sup id=&quot;fnref:pm-all&quot;&gt;&lt;a href=&quot;#fn:pm-all&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; the
functions in the libsndfile library (compare that file to the &lt;a href=&quot;https://github.com/erikd/libsndfile/blob/master/src/sndfile.h.in&quot;&gt;C
header&lt;/a&gt; to see
for yourself).&lt;/p&gt;

&lt;p&gt;In this blog post I‚Äôm mostly going to write ‚Äúthin‚Äù xtlang code‚Äîcalling the C
functions directly wherever possible, and using the same basic types as the
underlying C library. You could easily write xtlang helper functions to make all
this stuff nicer, and &lt;code&gt;libs/external/sndfile.xtm&lt;/code&gt; actually has a bunch of these
as well (down the bottom of that file). However, I hope this bare-bones approach
is helpful for understanding what‚Äôs going on (and how you might use other C
shared libs if you wanted to).&lt;/p&gt;

&lt;h2 id=&quot;reading-the-audio-file-data-into-memory&quot;&gt;Reading the audio file data into memory&lt;/h2&gt;

&lt;p&gt;In a fairly common API design pattern, to get info about a sound file (length, channels,
sample rate, format, etc.) we need to:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;use &lt;code&gt;sf_open&lt;/code&gt; to give us a pointer to the data structure which libsndfile
uses to represent the audio file (a &lt;code&gt;SNDFILE*&lt;/code&gt;)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;pass a pointer to another data structure (a &lt;code&gt;SF_INFO*&lt;/code&gt;) which &lt;code&gt;sf_open&lt;/code&gt; will
populate with info about the file&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;sf_open&lt;/code&gt; doesn‚Äôt read the audio data into memory (where we can do stuff with
it) though‚Äîbecause first we need to figure out how big a buffer to allocate
for the data‚Äîand to do that, we need to know how many frames there are in the
audio file, and how many channels per frame.&lt;/p&gt;

&lt;p&gt;Looking at the documentation (i.e. the comment above the function declaration in
the C header file) for &lt;code&gt;SF_INFO&lt;/code&gt; we see that the first (tuple index &lt;code&gt;0&lt;/code&gt;) and third
(tuple index &lt;code&gt;2&lt;/code&gt;) fields are going to be useful&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-c&quot;&gt;struct SF_INFO
{   sf_count_t  frames ;        /* Used to be called samples.  Changed to avoid confusion. */
    int         samplerate ;
    int         channels ;
    int         format ;
    int         sections ;
    int         seekable ;
} ;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using all this info, then, we can make a simple xtlang function to return the
number of frames&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-xtlang&quot;&gt;(bind-func get_number_of_frames
  (lambda (filename)
    (let ((info:SF_INFO* (salloc))
          ;; call sf_info to populate info with data about the file
          (sfile (sf_open filename SFM_READ info)))
      (sf_close sfile)
      ;; return the number of frames
      (tref info 0))))

;; test it out using a wave file from the Extempore assets directory
;; (it should return the number 288366)
(get_number_of_frames &quot;assets/samples/piano/60.wav&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;{.hl-para}&lt;/p&gt;

&lt;p&gt;Most of the code in this post doesn‚Äôt check for e.g. bad filenames or other
potential errors, so if that‚Äôs a thing which might happen in your situation then
you‚Äôll need to check that &lt;code&gt;sf_open&lt;/code&gt; doesn‚Äôt return &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We can do the exact same thing to get the number of channels per frame (just
returning a different element of the &lt;code&gt;info&lt;/code&gt; struct):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-xtlang&quot;&gt;(bind-func get_number_of_channels
  (lambda (filename)
    (let ((info:SF_INFO* (salloc))
          (sfile (sf_open filename SFM_READ info)))
      (sf_close sfile)
      ;; return the number of channels
      (tref info 2))))

;; returns 2 (it's a stereo file)
(get_number_of_channels &quot;assets/samples/piano/60.wav&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, we can calculate how many samples (num frames √ó num channels) we‚Äôll
need in our ‚Äúaudio data‚Äù buffer. We can then use &lt;code&gt;sf_read&lt;/code&gt; to read the audio
data from the file into our buffer, converting it to e.g. &lt;code&gt;float&lt;/code&gt; (or whatever
the type of &lt;code&gt;SAMPLE&lt;/code&gt; is) as we go (libsndfile can read audio files in a bunch of
different formats, but for working with it in Extempore we just want floating
point values).&lt;/p&gt;

&lt;p&gt;First, set up a DSP callback‚Äîjust playing white noise so that we can check
that it‚Äôs working.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-xtlang&quot;&gt;(bind-func dsp:DSP
  (lambda (in time chan dat)
    (random .1)))

(dsp:set! dsp)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, we add a bunch of sndfile-related stuff to the top-level &lt;code&gt;dsp&lt;/code&gt; closure
environment (the outer &lt;code&gt;let&lt;/code&gt;) to&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;get the number of frames/channels from the file&lt;/li&gt;
  &lt;li&gt;allocate a &lt;code&gt;SAMPLE&lt;/code&gt;&lt;sup id=&quot;fnref:sample&quot;&gt;&lt;a href=&quot;#fn:sample&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; buffer big enough to fit all the audio data&lt;/li&gt;
  &lt;li&gt;read the audio file data into this buffer&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Finally, in the inner &lt;code&gt;lambda&lt;/code&gt; we have a super-naive playback loop (look at the
way we‚Äôre incrementing &lt;code&gt;i&lt;/code&gt;‚Äîthis will only work if the number of output
channels matches the number of channels in the audio file).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-xtlang&quot;&gt;(bind-func dsp:DSP 10000000 ;; allocate plenty of memory for our DSP closure

  (let ((filename &quot;assets/samples/piano/60.wav&quot;)
        (nframes (get_number_of_frames filename))
        (nchan (convert (get_number_of_channels filename)))
        (nsamp (* nframes nchan))
        (info:SF_INFO* (alloc))
        (sfile (sf_open filename SFM_READ info)) ;; SFM_READ = open the audio file in &quot;read-only&quot; mode
        ;; here's the pointer to the audio data
        (data:SAMPLE* (alloc nsamp))
        (i 0))

    (println &quot;read&quot; (sf_read sfile data nsamp) &quot;frames&quot;)
    (sf_close sfile)

    (lambda (in time chan dat)
      ;; a super-naive &quot;playback&quot; loop
      (set! i (% (+ i 1) nsamp))
      (* .2 (pref data i)))))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If it‚Äôs all worked, you should hear a piano playing repeated (legato) notes on
middle C.&lt;/p&gt;

&lt;p&gt;Of course, we could have simplified this by just calling &lt;code&gt;sf_open&lt;/code&gt; and
populating the &lt;code&gt;info&lt;/code&gt; with data once at the top of an xtlang function, then
doing stuff based on that information and finally &lt;code&gt;sf_close&lt;/code&gt;ing the file at the
end. That‚Äôs left as an exercise for the reader üòâ&lt;/p&gt;

&lt;p class=&quot;hl-para&quot;&gt;One thing worth noting with all this is that calling a C lib from Extempore
doesn‚Äôt obviate the need to understand how the C library works, e.g. we still
need to match every call to &lt;code&gt;sf_open&lt;/code&gt; with a call to &lt;code&gt;sf_close&lt;/code&gt; as stated in the
libsndfile docs.&lt;/p&gt;

&lt;h2 id=&quot;writing-data-in-memory-to-an-audio-file&quot;&gt;Writing data in memory to an audio file&lt;/h2&gt;

&lt;p&gt;There‚Äôs one more thing we want to do with our libsndfile library: write a bunch
of audio data (which we‚Äôve gloriously munged in Extempore) and write it back to
an audio file.&lt;/p&gt;

&lt;p&gt;Here‚Äôs a simple munging function which will replace the first &lt;code&gt;22050&lt;/code&gt; samples
with white noise, then leave the next &lt;code&gt;22050&lt;/code&gt; untouched, then replace the next
&lt;code&gt;22050&lt;/code&gt; with more white noise, and so on. I‚Äôm sure you can come up with
something more (sonically) interesting; this is just an easy one to test (by
ear) if it‚Äôs working.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-xtlang&quot;&gt;(bind-func munge_audio_data
  (lambda (data:SAMPLE* nsamp)
    (doloop (i nsamp)
      (if (&amp;lt; (modulo i 44100) 22050)
          (pset! data i (random .1))))))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The final thing to do is to create &lt;em&gt;another&lt;/em&gt; &lt;code&gt;SNDFILE&lt;/code&gt; object (this time opened
in &lt;code&gt;SFM_WRITE&lt;/code&gt; mode) where we‚Äôll write the audio data. We‚Äôll make some small
additions to our &lt;code&gt;dsp&lt;/code&gt; closure:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-xtlang&quot;&gt;(bind-func dsp:DSP 10000000 ;; allocate plenty of memory for our DSP closure

  (let ((filename &quot;assets/samples/piano/60.wav&quot;)
        (nframes (get_number_of_frames filename))
        (nchan (convert (get_number_of_channels filename)))
        (nsamp (* nframes nchan))
        (info:SF_INFO* (alloc))
        (srcfile (sf_open filename SFM_READ info))
        (dstfile (sf_open  &quot;assets/samples/piano/60-munged.wav&quot; SFM_WRITE info))
        ;; here's the pointer to the audio data
        (data:SAMPLE* (alloc nsamp))
        (i 0))

    (println &quot;read&quot; (sf_read srcfile data nsamp) &quot;frames&quot;)
    (sf_close srcfile)

    ;; munge the audio data
    (munge_audio_data data nsamp)

    (println &quot;wrote&quot; (sf_write dstfile data nsamp) &quot;frames&quot;)
    (sf_close dstfile)

    (lambda (in time chan dat)
      ;; a super-naive &quot;playback&quot; loop
      (set! i (% (+ i 1) nsamp))
      (* .2 (pref data i)))))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you re-evaluate &lt;em&gt;that&lt;/em&gt; &lt;code&gt;dsp&lt;/code&gt; closure, you should (a) hear the munged audio
and (b) it should have been written to the ‚Äúassets/samples/piano/60-munged.wav‚Äù
file. Note that we re-used the &lt;code&gt;info&lt;/code&gt; data structure (which was populated with
the info from &lt;code&gt;srcfile&lt;/code&gt;) in the &lt;code&gt;dstfile&lt;/code&gt; call‚Äîthis is deliberate, and makes
sure that we use the same file format for the output file as for the input file.
If you want to write it in some &lt;em&gt;other&lt;/em&gt; format, then look at the libsndfile
docs‚Äîthere are lots of options.&lt;/p&gt;

&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;

&lt;p&gt;There‚Äôs lots more to explore, but I‚Äôll leave it here for now. If you‚Äôve got any
comments, then get in touch on the &lt;a href=&quot;mailto:extemporelang@googlegroups.com&quot;&gt;Extempore mailing
list&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;[c-xtlang-interop]:
    There‚Äôs more detail on how this works in the
    &lt;a href=&quot;https://extemporelang.github.io/docs/reference/c-xtlang-interop/&quot;&gt;Extempore
    docs&lt;/a&gt;
    if you‚Äôre interested.&lt;/p&gt;
&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:pm-all&quot;&gt;
      &lt;p&gt;well, &lt;em&gt;pretty much&lt;/em&gt; all¬†&lt;a href=&quot;#fnref:pm-all&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:sample&quot;&gt;
      &lt;p&gt;&lt;code&gt;SAMPLE&lt;/code&gt; is an alias for &lt;code&gt;float&lt;/code&gt; by default¬†&lt;a href=&quot;#fnref:sample&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Ben Swift</name></author><category term="extempore" /><summary type="html">libsndfile is ‚Äúa C library for reading and writing files containing sampled audio data‚Äù, and it‚Äôs pretty great. Here‚Äôs a quick crash-course on using Extempore‚Äôs libsndfile bindings to read, process and write audio data files.</summary></entry><entry><title type="html">IoT China Study Tour not happening in 2019</title><link href="https://benswift.me/blog/2019/10/14/iot-china-study-tour-not-happening-in-2019/" rel="alternate" type="text/html" title="IoT China Study Tour not happening in 2019" /><published>2019-10-14T00:00:00+11:00</published><updated>2019-10-14T00:00:00+11:00</updated><id>https://benswift.me/blog/2019/10/14/iot-china-study-tour-not-happening-in-2019</id><content type="html" xml:base="https://benswift.me/blog/2019/10/14/iot-china-study-tour-not-happening-in-2019/">&lt;p&gt;In the (Australian) Summer of ‚Äò16/17, ‚Äò17/18 and ‚Äò18/19 I ran an &lt;a href=&quot;https://cs.anu.edu.au/courses/china-study-tour/&quot;&gt;&lt;em&gt;Internet of
Things&lt;/em&gt; China Study Tour&lt;/a&gt; at
the Beijing Institute of Technology. They were good times.&lt;/p&gt;

&lt;picture&gt;&lt;img alt=&quot;a bunch of students
and I at the Great Wall of China in Dec. 2018&quot; src=&quot;/assets/images/posts/great-wall-of-china-2018-5f9aa3802a2f2d7c27db5da9116ce8f8968814fa823763a09b7a97b35d11b5b3.jpg&quot; /&gt;&lt;/picture&gt;

&lt;p&gt;However, the &lt;a href=&quot;https://dfat.gov.au/people-to-people/new-colombo-plan/about/Pages/about.aspx&quot;&gt;New Colombo
Plan&lt;/a&gt;
grant (which provided the money for us to provide the travel &amp;amp; accommodation
scholarships for the study tour) expired last year‚Äîit was only a 3-year thing.
As a result, the BIT trip is not running this year (Summer ‚Äò19/20). It &lt;em&gt;might&lt;/em&gt;
happen in future years (if we get more grant funding) but I‚Äôm afraid I can‚Äôt be
certain about that.&lt;/p&gt;

&lt;p&gt;If you‚Äôre interested in ‚Äústudy abroad‚Äù opportunities more generally then the
nice folks at &lt;a href=&quot;https://www.anu.edu.au/students/careers-opportunities/global-programs&quot;&gt;ANU Global
Programs&lt;/a&gt;
are the best people to talk to.&lt;/p&gt;</content><author><name>Ben Swift</name></author><category term="teaching" /><summary type="html">In the (Australian) Summer of ‚Äò16/17, ‚Äò17/18 and ‚Äò18/19 I ran an Internet of Things China Study Tour at the Beijing Institute of Technology. They were good times.</summary></entry><entry><title type="html">Laptop Ensemble in the Canberra Times</title><link href="https://benswift.me/blog/2019/10/01/laptop-ensemble-in-the-canberra-times/" rel="alternate" type="text/html" title="Laptop Ensemble in the Canberra Times" /><published>2019-10-01T00:00:00+10:00</published><updated>2019-10-01T00:00:00+10:00</updated><id>https://benswift.me/blog/2019/10/01/laptop-ensemble-in-the-canberra-times</id><content type="html" xml:base="https://benswift.me/blog/2019/10/01/laptop-ensemble-in-the-canberra-times/">&lt;p&gt;The ANU Laptop Ensemble (LENS) is in the Canberra Times this morning: &lt;a href=&quot;https://www.canberratimes.com.au/story/6412297/anu-school-of-musics-new-orchestra-is-far-from-conventional/&quot;&gt;ANU
School of Music‚Äôs new orchestra is far from
conventional&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There‚Äôs some really encouraging stuff in there from ANU School of Music head
&lt;a href=&quot;https://music.cass.anu.edu.au/people/associate-professor-kim-cunio&quot;&gt;Kim Cunio&lt;/a&gt;
about the role of code in music-making:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;‚ÄúWe want to re-imagine what an orchestra is,‚Äù he says. ‚ÄúMy vision is to train
musicians that are part composers, part mathematicians, and part computer
hackers.‚Äù&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I‚Äôm so pumped‚Äîthis is exactly what I‚Äôve been trying to do for several years,
and having Kim on board as an ally is very encouraging. Along with the CECS
Reimagine agenda (including their support of my &lt;a href=&quot;/blog/2019/08/30/Im-a-reimagine-fellow/&quot;&gt;fellowship&lt;/a&gt; to put together the &lt;a href=&quot;/blog/2019/03/20/reimagine-fellow-project-pitch/&quot;&gt;c/c/c
studio&lt;/a&gt;) and the great things
happening &lt;a href=&quot;https://soad.cass.anu.edu.au&quot;&gt;elsewhere&lt;/a&gt; in
&lt;a href=&quot;https://cdhr.cass.anu.edu.au&quot;&gt;CASS&lt;/a&gt;, there‚Äôs good vibes in the air around
cross-disiplinary code, creativity and culture at the ANU.&lt;/p&gt;

&lt;p&gt;The article ends by saying:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Cunio hopes experiments with science, maths and technology will also open
‚Äúback doors‚Äù into music for a new breed of student.&lt;/p&gt;

  &lt;p&gt;‚ÄúSometimes the best musicians are lost to music.‚Äù&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I suspect that sometimes the best computer scientists are lost to CS as well.
Hopefully programs like the LENS can change that.&lt;/p&gt;</content><author><name>Ben Swift</name></author><category term="teaching" /><category term="reimagine" /><category term="lens" /><summary type="html">The ANU Laptop Ensemble (LENS) is in the Canberra Times this morning: ANU School of Music‚Äôs new orchestra is far from conventional.</summary></entry><entry><title type="html">Mapping the livecoding landscape</title><link href="https://benswift.me/blog/2019/09/21/mapping-the-livecoding-landscape/" rel="alternate" type="text/html" title="Mapping the livecoding landscape" /><published>2019-09-21T00:00:00+10:00</published><updated>2019-09-21T00:00:00+10:00</updated><id>https://benswift.me/blog/2019/09/21/mapping-the-livecoding-landscape</id><content type="html" xml:base="https://benswift.me/blog/2019/09/21/mapping-the-livecoding-landscape/">&lt;h2 id=&quot;people&quot;&gt;People&lt;/h2&gt;

&lt;ul&gt;

&lt;li&gt;
  &lt;a style=&quot;font-weight: 900;&quot; href=&quot;https://twitter.com/digego&quot;&gt;Andrew Sorensen&lt;/a&gt;,
  &lt;span style=&quot;font-style: italic;&quot;&gt;indie&lt;/span&gt;
&lt;/li&gt;

&lt;li&gt;
  &lt;a style=&quot;font-weight: 900;&quot; href=&quot;https://yaxu.org&quot;&gt;Alex McLean&lt;/a&gt;,
  &lt;span style=&quot;font-style: italic;&quot;&gt;indie&lt;/span&gt;
&lt;/li&gt;

&lt;li&gt;
  &lt;a style=&quot;font-weight: 900;&quot; href=&quot;http://wertlos.org/~rohrhuber/&quot;&gt;Juilan Rohrhuber&lt;/a&gt;,
  &lt;span style=&quot;font-style: italic;&quot;&gt;Institute for Music and Media, RSH D√ºsseldorf&lt;/span&gt;
&lt;/li&gt;

&lt;li&gt;
  &lt;a style=&quot;font-weight: 900;&quot; href=&quot;http://andrewrbrown.net.au/&quot;&gt;Andrew Brown&lt;/a&gt;,
  &lt;span style=&quot;font-style: italic;&quot;&gt;Queensland College of Art, Griffith University&lt;/span&gt;
&lt;/li&gt;

&lt;li&gt;
  &lt;a style=&quot;font-weight: 900;&quot; href=&quot;https://www.dur.ac.uk/music/staff/profile/?id=11477&quot;&gt;Nick Collins&lt;/a&gt;,
  &lt;span style=&quot;font-style: italic;&quot;&gt;Department of Music, Durham University&lt;/span&gt;
&lt;/li&gt;

&lt;li&gt;
  &lt;a style=&quot;font-weight: 900;&quot; href=&quot;http://thormagnusson.github.io/&quot;&gt;Thor Magnusson&lt;/a&gt;,
  &lt;span style=&quot;font-style: italic;&quot;&gt;Music Department, University of Sussex&lt;/span&gt;
&lt;/li&gt;

&lt;li&gt;
  &lt;a style=&quot;font-weight: 900;&quot; href=&quot;https://www.gewang.com&quot;&gt;Ge Wang&lt;/a&gt;,
  &lt;span style=&quot;font-style: italic;&quot;&gt;CCRMA, Stanford University&lt;/span&gt;
&lt;/li&gt;

&lt;li&gt;
  &lt;a style=&quot;font-weight: 900;&quot; href=&quot;http://sam.aaron.name/&quot;&gt;Sam Aaron&lt;/a&gt;,
  &lt;span style=&quot;font-style: italic;&quot;&gt;indie&lt;/span&gt;
&lt;/li&gt;

&lt;li&gt;
  &lt;a style=&quot;font-weight: 900;&quot; href=&quot;https://www.cl.cam.ac.uk/~afb21/&quot;&gt;Alan Blackwell&lt;/a&gt;,
  &lt;span style=&quot;font-style: italic;&quot;&gt;Cambridge Computer Laboratory&lt;/span&gt;
&lt;/li&gt;

&lt;li&gt;
  &lt;a style=&quot;font-weight: 900;&quot; href=&quot;https://fo.am/people/dave/&quot;&gt;Dave Griffiths&lt;/a&gt;,
  &lt;span style=&quot;font-style: italic;&quot;&gt;FoAM Kernow&lt;/span&gt;
&lt;/li&gt;

&lt;li&gt;
  &lt;a style=&quot;font-weight: 900;&quot; href=&quot;https://shellyknotts.wordpress.com&quot;&gt;Shelley Knotts&lt;/a&gt;,
  &lt;span style=&quot;font-style: italic;&quot;&gt;Department of Music, Durham University&lt;/span&gt;
&lt;/li&gt;

&lt;li&gt;
  &lt;a style=&quot;font-weight: 900;&quot; href=&quot;https://twitter.com/joannnne&quot;&gt;Joanne Armitage&lt;/a&gt;,
  &lt;span style=&quot;font-style: italic;&quot;&gt;School of Media and Communication, University of Leeds&lt;/span&gt;
&lt;/li&gt;

&lt;li&gt;
  &lt;a style=&quot;font-weight: 900;&quot; href=&quot;http://renickbell.net/&quot;&gt;Renick Bell&lt;/a&gt;,
  &lt;span style=&quot;font-style: italic;&quot;&gt;indie&lt;/span&gt;
&lt;/li&gt;

&lt;li&gt;
  &lt;a style=&quot;font-weight: 900;&quot; href=&quot;http://www.dktr0.net&quot;&gt;David Ogborn&lt;/a&gt;,
  &lt;span style=&quot;font-style: italic;&quot;&gt;Department of Communication Studies and Multimedia, McMaster University&lt;/span&gt;
&lt;/li&gt;

&lt;li&gt;
  &lt;a style=&quot;font-weight: 900;&quot; href=&quot;http://charlie-roberts.com/&quot;&gt;Charlie Roberts&lt;/a&gt;,
  &lt;span style=&quot;font-style: italic;&quot;&gt;Computer Science, Worcester Polytechnic Institute&lt;/span&gt;
&lt;/li&gt;

&lt;li&gt;
  &lt;a style=&quot;font-weight: 900;&quot; href=&quot;http://blog.sicchio.com/&quot;&gt;Kate Sicchio&lt;/a&gt;,
  &lt;span style=&quot;font-style: italic;&quot;&gt;Integrated Digital Media, New York University&lt;/span&gt;
&lt;/li&gt;

&lt;li&gt;
  &lt;a style=&quot;font-weight: 900;&quot; href=&quot;https://www.cyberpunk.net.ar&quot;&gt;Mauro&lt;/a&gt;,
  &lt;span style=&quot;font-style: italic;&quot;&gt;indie&lt;/span&gt;
&lt;/li&gt;

&lt;li&gt;
  &lt;a style=&quot;font-weight: 900;&quot; href=&quot;https://www.jackarmitage.com/&quot;&gt;Jack Armitage&lt;/a&gt;,
  &lt;span style=&quot;font-style: italic;&quot;&gt;Centre for Digital Music, Queen Mary University of London&lt;/span&gt;
&lt;/li&gt;

&lt;li&gt;
  &lt;a style=&quot;font-weight: 900;&quot; href=&quot;http://luisnavarrodelangel.net/&quot;&gt;Luis Navarro Del Angel&lt;/a&gt;,
  &lt;span style=&quot;font-style: italic;&quot;&gt;Department of Communication Studies and Multimedia, McMaster University&lt;/span&gt;
&lt;/li&gt;

&lt;li&gt;
  &lt;a style=&quot;font-weight: 900;&quot; href=&quot;http://kindohm.com/&quot;&gt;Mike Hodnick&lt;/a&gt;,
  &lt;span style=&quot;font-style: italic;&quot;&gt;indie&lt;/span&gt;
&lt;/li&gt;

&lt;/ul&gt;

&lt;h2 id=&quot;iclc-committees&quot;&gt;ICLC committees&lt;/h2&gt;

&lt;h3 id=&quot;2020-limerick-ireland&quot;&gt;2020 Limerick, Ireland&lt;/h3&gt;

&lt;p&gt;Programme Chair: Giuseppe Torre&lt;/p&gt;

&lt;p&gt;Performances Chair: Neil O‚ÄôConnor&lt;/p&gt;

&lt;p&gt;Workshops Chair: Nicholas Ward&lt;/p&gt;

&lt;p&gt;Installations Chair: Nora O Murch√∫&lt;/p&gt;

&lt;h3 id=&quot;2019-madrid-spain&quot;&gt;2019 Madrid, Spain&lt;/h3&gt;

&lt;p&gt;Chair - Jes√∫s Jara L√≥pez
Co-Chair - Lina Bautista
Co-Chair - Iv√°n Paz
Performance Chair - Juan A. Romero
Scientific Chair - Enrike Hurtado
Installations/Workshops Coordinator - Joaqu√≠n D√≠az Dur√°n
Production Adviser - Maite Camacho
Identity &amp;amp; Web - Adri√°n Cano/Jana Dom√≠nguez
Assistance - Live Code Mad&lt;/p&gt;

&lt;h3 id=&quot;2017-morelia-m√©xico&quot;&gt;2017 Morelia, M√©xico&lt;/h3&gt;

&lt;h4 id=&quot;core-organising-committee&quot;&gt;Core organising committee&lt;/h4&gt;

&lt;p&gt;Chair - Alexandra C√°rdenas
Co-Chair Ernesto Romero
Co-Chair Luis Navarro del Angel
Performance Chair - Jorge Ram√≠rez
Scientific Chair - Juan Sebasti√°n Lach
Production Adviser - Minerva Hern√°ndez Trejo
Identity &amp;amp; Web - Karen del Valle, Rodrigo Velasco, Felipe Ignacio
Networks - Malitzin Cort√©s&lt;/p&gt;

&lt;h4 id=&quot;steering-committee&quot;&gt;Steering Committee&lt;/h4&gt;

&lt;p&gt;David Ogborn, Chair (McMaster University)
Alex McLean (Deutsches Museum)
Shelly Knotts (Durham University)
Thor Magnusson (University of Sussex)
Kate Sicchio (New York University)
Graham Wakefield (York University)&lt;/p&gt;

&lt;h3 id=&quot;2016-mcmaster-university-canada&quot;&gt;2016 McMaster University, Canada&lt;/h3&gt;

&lt;h4 id=&quot;local-organising-committee&quot;&gt;Local organising committee&lt;/h4&gt;

&lt;p&gt;David Ogborn, General chair (McMaster University)
Graham Wakefield, Co-chair (York University)
Christina Baade, Scientific programme committee chair (McMaster University)
Kate Sicchio, Artistic programme committee chair (New York University)
Tanya Goncalves, Workshops chair (McMaster University)
Harold Sikkema, Design and videography coordinator (McMaster University)&lt;/p&gt;

&lt;h4 id=&quot;steering-committee-1&quot;&gt;Steering committee&lt;/h4&gt;

&lt;p&gt;Alex McLean, Chair (FoAM Kernow)
Shelly Knotts (Durham University)
Thor Magnusson (University of Sussex)
David Ogborn (McMaster University)
Kate Sicchio (Parsons the New School for Design)
Graham Wakefield (York University)&lt;/p&gt;

&lt;h4 id=&quot;programme-committee&quot;&gt;Programme committee&lt;/h4&gt;

&lt;p&gt;Samuel Aaron (University of Cambridge)
Amy Alexander (University of California, San Diego)
Juan Alzate Romero (IMWI - HfM Karlsruhe)
Joanne Armitage (University of Leeds)
Christina Baade (McMaster University)
Holger Ballweg (Northumbria University)
Sara Bannerman (McMaster University)
Renick Bell
Yael Benn (Manchester Metropolitan University)
Daven Bigelow (McMaster University)
Alan Blackwell (University of Cambridge)
Patrick Borgeat (University of Music, Karlsruhe)
Victoria Bradbury (Alfred University / NYSCC / SoAD)
Karen Burland (University of Leeds)
Pam Burnard (University of Cambridge)
Alexandra C√°rdenas (University of the Arts, Berlin)
Jacques Carette (McMaster University)
Luke Church (University of Cambridge)
Geoff Cox (Aarhus University)
Georg Essl (University of Michigan)
Andrew Fischer (Shutterfly, Inc)
Paula Gardner (McMaster University)
Tanya Goncalves (McMaster University)
Tom Hall (Anglia Ruskin University)
Mike Hodnick
Aaron Hutchinson (Hamilton Audio-Visual Node)
Ian Jarvis (York University)
Ali Khajehei (McMaster University)
Chris Kiefer (University of Sussex)
Shelly Knotts (Durham University)
Shawn Lawson (Rensselaer Polytechnic Institute)
Sang Won Lee (University of Michigan)
Thor Magnusson (University of Sussex)
Alex McLean (FoAM Kernow)
James Noble (Victoria University of Wellington)
Matthew Paine (McMaster University)
Roly Perera (University of Glasgow, University of Edinburgh)
Charlie Roberts (Rochester Institute of Technology)
Julian Rohrhuber (Institute For Music And Media, Robert Schumann Hochschule)
Adriana Sa (Goldsmiths College, University of London)
Kate Sicchio (Parsons the New School for Design)
Harold Sikkema (McMaster University)
Dagobert Sondervan
Andrew Sorensen
Dana Swarbrick (McMaster University)
Ben Swift (Australian National University)
Steven Tanimoto (University of Washington)
Eldad Tsabary (Concordia University)
Anne Veinberg (Orpheus Institute/Leiden University/Conservatorium Amsterdam)
Graham Wakefield (York University)
Joseph Wilk (Poetic Computation)
Scott Wilson (University of Birmingham)
Matthew Yee-King (Goldsmiths College, University of London)
Andrea Zeffiro (McMaster University)&lt;/p&gt;

&lt;h3 id=&quot;2015-university-of-leeds-uk&quot;&gt;2015 University of Leeds, UK&lt;/h3&gt;

&lt;h4 id=&quot;core-organising-committee-1&quot;&gt;Core organising committee&lt;/h4&gt;

&lt;p&gt;Alex McLean, General chair (University of Leeds)
Thor Magnusson, Co-chair (University of Sussex)
Kia Ng, Scientific programme committee chair (University of Leeds)
Shelly Knotts, Artistic programme committee chair (University of Durham)
Joanne Armitage, Workshop and special events chair (University of Leeds)&lt;/p&gt;

&lt;h4 id=&quot;evening-event-producer&quot;&gt;Evening event producer&lt;/h4&gt;

&lt;p&gt;Ash Sagar&lt;/p&gt;

&lt;h4 id=&quot;external-advisors&quot;&gt;External advisors&lt;/h4&gt;

&lt;p&gt;Juan A. Romero
Patrick Borgeat&lt;/p&gt;

&lt;h4 id=&quot;programme-committee-1&quot;&gt;Programme committee&lt;/h4&gt;

&lt;p&gt;&lt;em&gt;same as 2016&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;toplap-nodes&quot;&gt;TOPLAP nodes&lt;/h2&gt;

&lt;p&gt;This list is pinched &lt;em&gt;directly&lt;/em&gt; from the &lt;a href=&quot;https://toplap.org/nodes/&quot;&gt;TOPLAP
website&lt;/a&gt; (as at 21 Sep 2019):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://livecode.nyc/&quot;&gt;Livecode NYC&lt;/a&gt; (USA)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.facebook.com/groups/1683408058575303/&quot;&gt;TOPLAP Node Yorkshire&lt;/a&gt; (UK)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.facebook.com/groups/897471030365142/&quot;&gt;TOPLAP Node North-East&lt;/a&gt; (UK)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.facebook.com/toplap.mx/&quot;&gt;TOPLAP Node M√©xico&lt;/a&gt;¬†(MX)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.facebook.com/groups/toplapnodeberlin/1725919034313087/&quot;&gt;Cybernetic Orchestra&lt;/a&gt; (CA)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.facebook.com/groups/toplapnodeberlin/1725919034313087/&quot;&gt;TOPLAP Berlin&lt;/a&gt; (DE)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://noiskate.hotglue.me/?ToplapMedellin&quot;&gt;TOPLAP Medell√≠n&lt;/a&gt; (CO)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.facebook.com/groups/626111581071250/&quot;&gt;TOPLAP Bogot√°&lt;/a&gt; (CO)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.facebook.com/groups/583681711997021/&quot;&gt;TOPLAP Quito&lt;/a&gt; (EC)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.facebook.com/groups/362002184270964/&quot;&gt;TOPLAP Lima&lt;/a&gt; (PE)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://livecodear.github.io/&quot;&gt;TOPLAP Buenos Aires&lt;/a&gt; (AR)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://montreal.toplap.org&quot;&gt;Live coding √† Montr√©al&lt;/a&gt; (CA)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://toplapbarcelona.hangar.org/&quot;&gt;TOPLAP Barcelona&lt;/a&gt; (ES)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://twitter.com/toplapjp&quot;&gt;TOPLAP Japan&lt;/a&gt; (JP)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://netherlands-coding-live.github.io&quot;&gt;NL_CL (Netherlands Coding Live) node&lt;/a&gt; (NL)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://w3.impa.br/~vitorgr/livecode/&quot;&gt;Live coding @ IMPA (Rio de Janeiro)&lt;/a&gt; (BR)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.facebook.com/groups/353595622030440/&quot;&gt;TOPLAP Greater Bay Area&lt;/a&gt; (CN)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://tidalclub.github.io/sheffield.html&quot;&gt;Tidalclub Sheffield&lt;/a&gt; (UK)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://colectivo-de-livecoders.gitlab.io/&quot;&gt;CLiC (Colectivo de Live Coders)&lt;/a&gt; (AR)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://livecodenewengland.org/&quot;&gt;Livecode New England&lt;/a&gt; (USA)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.facebook.com/groups/1051671308353969/&quot;&gt;TOPLAP Italia&lt;/a&gt; (IT)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.facebook.com/groups/toplapfr/&quot;&gt;TOPLAP France&lt;/a&gt; (FR)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://algorave.fr/&quot;&gt;Algorave France &amp;amp; Belgique&lt;/a&gt; (FR/BE)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.meetup.com/Live-Coding-Frankfurt/&quot;&gt;Live Coding Frankfurt&lt;/a&gt; (DE)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://toplapvaldivia.wixsite.com/website&quot;&gt;TOPLAP Valdiva&lt;/a&gt; (CL)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.facebook.com/groups/587715001671363/&quot;&gt;LiveCoding D√ºsseldorf&lt;/a&gt; (DE)&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Ben Swift</name></author><category term="livecoding" /><category term="research" /><summary type="html">People</summary></entry></feed>