["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$reimagine-logo.dom-helpers","~:imports",null,"~:requires",["^ ","~$string","~$clojure.string","^:","^:","~$dom","~$goog.dom","^<","^<"],"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$html",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/Users/ben/Documents/research/benswift.me/_cljs/reimagine_logo/src/reimagine_logo/dom_helpers.cljs","~:line",70,"~:column",7,"~:end-line",70,"~:end-column",11,"~:arglists",["~#list",["~$quote",["^I",[["~$s"]]]]],"~:doc","Create a dom element from an html string."],"^5","~$reimagine-logo.dom-helpers/html","^C","/Users/ben/Documents/research/benswift.me/_cljs/reimagine_logo/src/reimagine_logo/dom_helpers.cljs","^G",11,"~:method-params",["^I",[["~$s"]]],"~:protocol-impl",null,"~:arglists-meta",["^I",[null,null]],"^E",1,"~:variadic?",false,"^D",70,"~:ret-tag","~$any","^F",70,"~:max-fixed-arity",1,"~:fn-var",true,"^H",["^I",["^J",["^I",[["~$s"]]]]],"^K","Create a dom element from an html string."],"~$normalize-args",["^ ","^A",null,"^B",["^ ","^C","/Users/ben/Documents/research/benswift.me/_cljs/reimagine_logo/src/reimagine_logo/dom_helpers.cljs","^D",33,"^E",7,"^F",33,"^G",21,"^H",["^I",["^J",["^I",[["~$tag","~$args"]]]]]],"^5","~$reimagine-logo.dom-helpers/normalize-args","^C","/Users/ben/Documents/research/benswift.me/_cljs/reimagine_logo/src/reimagine_logo/dom_helpers.cljs","^G",21,"^M",["^I",[["^V","^W"]]],"^N",null,"^O",["^I",[null,null]],"^E",1,"^P",false,"^D",33,"^Q","~$cljs.core/IVector","^F",33,"^S",2,"^T",true,"^H",["^I",["^J",["^I",[["^V","^W"]]]]]],"~$element",["^ ","^A",null,"^B",["^ ","^C","/Users/ben/Documents/research/benswift.me/_cljs/reimagine_logo/src/reimagine_logo/dom_helpers.cljs","^D",44,"^E",7,"^F",44,"^G",14,"^H",["^I",["^J",["^I",[["^V","~$&","^W"]]]]],"^K","Create a dom element using a keyword for the element name and a map\n  for the attributes. Append all children to parent. If the first\n  child is a string then the string will be set as the text content of\n  the parent and all remaining children will be appended.","~:top-fn",["^ ","^P",true,"~:fixed-arity",1,"^S",1,"^M",[["^I",["^V","^W"]]],"^H",["^I",[["^V","~$&","^W"]]],"^O",["^I",[null]]]],"^5","~$reimagine-logo.dom-helpers/element","^C","/Users/ben/Documents/research/benswift.me/_cljs/reimagine_logo/src/reimagine_logo/dom_helpers.cljs","^G",14,"^[",["^ ","^P",true,"^10",1,"^S",1,"^M",[["^I",["^V","^W"]]],"^H",["^I",[["^V","~$&","^W"]]],"^O",["^I",[null]]],"^M",[["^I",["^V","^W"]]],"^N",null,"^10",1,"^O",["^I",[null]],"^E",1,"^P",true,"~:methods",[["^ ","^10",1,"^P",true,"~:tag","^R"]],"^D",44,"^Q","^R","^F",44,"^S",1,"^T",true,"^H",["^I",[["^V","~$&","^W"]]],"^K","Create a dom element using a keyword for the element name and a map\n  for the attributes. Append all children to parent. If the first\n  child is a string then the string will be set as the text content of\n  the parent and all remaining children will be appended."],"~$insert-at",["^ ","^A",null,"^B",["^ ","^C","/Users/ben/Documents/research/benswift.me/_cljs/reimagine_logo/src/reimagine_logo/dom_helpers.cljs","^D",92,"^E",7,"^F",92,"^G",16,"^H",["^I",["^J",["^I",[["~$parent","~$child","~$index"]]]]],"^K","Insert a child element at a specific location."],"^5","~$reimagine-logo.dom-helpers/insert-at","^C","/Users/ben/Documents/research/benswift.me/_cljs/reimagine_logo/src/reimagine_logo/dom_helpers.cljs","^G",16,"^M",["^I",[["^15","^16","^17"]]],"^N",null,"^O",["^I",[null,null]],"^E",1,"^P",false,"^D",92,"^Q","^R","^F",92,"^S",3,"^T",true,"^H",["^I",["^J",["^I",[["^15","^16","^17"]]]]],"^K","Insert a child element at a specific location."],"~$append",["^ ","^A",null,"^B",["^ ","^C","/Users/ben/Documents/research/benswift.me/_cljs/reimagine_logo/src/reimagine_logo/dom_helpers.cljs","^D",18,"^E",7,"^F",18,"^G",13,"^H",["^I",["^J",["^I",[["^15","~$&","~$children"]]]]],"^K","Append all children to parent.","^[",["^ ","^P",true,"^10",1,"^S",1,"^M",[["^I",["^15","^1:"]]],"^H",["^I",[["^15","~$&","^1:"]]],"^O",["^I",[null]]]],"^5","~$reimagine-logo.dom-helpers/append","^C","/Users/ben/Documents/research/benswift.me/_cljs/reimagine_logo/src/reimagine_logo/dom_helpers.cljs","^G",13,"^[",["^ ","^P",true,"^10",1,"^S",1,"^M",[["^I",["^15","^1:"]]],"^H",["^I",[["^15","~$&","^1:"]]],"^O",["^I",[null]]],"^M",[["^I",["^15","^1:"]]],"^N",null,"^10",1,"^O",["^I",[null]],"^E",1,"^P",true,"^12",[["^ ","^10",1,"^P",true]],"^D",18,"^Q","^R","^F",18,"^S",1,"^T",true,"^H",["^I",[["^15","~$&","^1:"]]],"^K","Append all children to parent."],"~$set-text",["^ ","^A",null,"^B",["^ ","^C","/Users/ben/Documents/research/benswift.me/_cljs/reimagine_logo/src/reimagine_logo/dom_helpers.cljs","^D",25,"^E",7,"^F",25,"^G",15,"^H",["^I",["^J",["^I",[["~$e","~$s"]]]]],"^K","Set the text content for the passed element returning the\n  element. If a keyword is passed in the place of e, the element with\n  that id will be used and returned."],"^5","~$reimagine-logo.dom-helpers/set-text","^C","/Users/ben/Documents/research/benswift.me/_cljs/reimagine_logo/src/reimagine_logo/dom_helpers.cljs","^G",15,"^M",["^I",[["~$e","~$s"]]],"^N",null,"^O",["^I",[null,null]],"^E",1,"^P",false,"^D",25,"^Q",["^4",[null,"^R"]],"^F",25,"^S",2,"^T",true,"^H",["^I",["^J",["^I",[["~$e","~$s"]]]]],"^K","Set the text content for the passed element returning the\n  element. If a keyword is passed in the place of e, the element with\n  that id will be used and returned."],"~$build",["^ ","^A",null,"^B",["^ ","^C","/Users/ben/Documents/research/benswift.me/_cljs/reimagine_logo/src/reimagine_logo/dom_helpers.cljs","^D",80,"^E",7,"^F",80,"^G",12,"^H",["^I",["^J",["^I",[["~$x"]]]]],"^K","Build up a dom element from nested vectors."],"^5","~$reimagine-logo.dom-helpers/build","^C","/Users/ben/Documents/research/benswift.me/_cljs/reimagine_logo/src/reimagine_logo/dom_helpers.cljs","^G",12,"^M",["^I",[["~$x"]]],"^N",null,"^O",["^I",[null,null]],"^E",1,"^P",false,"^D",80,"^Q",["^4",[null,"^R"]],"^F",80,"^S",1,"^T",true,"^H",["^I",["^J",["^I",[["~$x"]]]]],"^K","Build up a dom element from nested vectors."],"~$get-element",["^ ","^A",null,"^B",["^ ","^C","/Users/ben/Documents/research/benswift.me/_cljs/reimagine_logo/src/reimagine_logo/dom_helpers.cljs","^D",13,"^E",7,"^F",13,"^G",18,"^H",["^I",["^J",["^I",[["~$id"]]]]],"^K","Return the element with the passed id."],"^5","~$reimagine-logo.dom-helpers/get-element","^C","/Users/ben/Documents/research/benswift.me/_cljs/reimagine_logo/src/reimagine_logo/dom_helpers.cljs","^G",18,"^M",["^I",[["^1A"]]],"^N",null,"^O",["^I",[null,null]],"^E",1,"^P",false,"^D",13,"^Q","^R","^F",13,"^S",1,"^T",true,"^H",["^I",["^J",["^I",[["^1A"]]]]],"^K","Return the element with the passed id."],"~$remove-children",["^ ","^A",null,"^B",["^ ","^C","/Users/ben/Documents/research/benswift.me/_cljs/reimagine_logo/src/reimagine_logo/dom_helpers.cljs","^D",64,"^E",7,"^F",64,"^G",22,"^H",["^I",["^J",["^I",[["^1A"]]]]],"^K","Remove all children from the element with the passed id."],"^5","~$reimagine-logo.dom-helpers/remove-children","^C","/Users/ben/Documents/research/benswift.me/_cljs/reimagine_logo/src/reimagine_logo/dom_helpers.cljs","^G",22,"^M",["^I",[["^1A"]]],"^N",null,"^O",["^I",[null,null]],"^E",1,"^P",false,"^D",64,"^Q","^R","^F",64,"^S",1,"^T",true,"^H",["^I",["^J",["^I",[["^1A"]]]]],"^K","Remove all children from the element with the passed id."],"~$element-arg?",["^ ","^A",null,"^B",["^ ","^C","/Users/ben/Documents/research/benswift.me/_cljs/reimagine_logo/src/reimagine_logo/dom_helpers.cljs","^D",75,"^E",8,"^F",75,"^G",20,"~:private",true,"^H",["^I",["^J",["^I",[["~$x"]]]]]],"^1F",true,"^5","~$reimagine-logo.dom-helpers/element-arg?","^C","/Users/ben/Documents/research/benswift.me/_cljs/reimagine_logo/src/reimagine_logo/dom_helpers.cljs","^G",20,"^M",["^I",[["~$x"]]],"^N",null,"^O",["^I",[null,null]],"^E",1,"^P",false,"^D",75,"^Q","~$boolean","^F",75,"^S",1,"^T",true,"^H",["^I",["^J",["^I",[["~$x"]]]]]]],"~:cljs.spec/registry-ref",[],"~:require-macros",null,"~:cljs.analyzer/constants",["^ ","~:seen",["^4",["~:else","~:id","~:class"]],"~:order",["^1O","^1N","^1M"]],"^K",null]